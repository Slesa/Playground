<!--  
-->


<ExampleTree ID="exampleTree" openProperty="isOpen">
<nodeVisibility>sdk</nodeVisibility>
<!--  -->
<root name="root/">

<children>


<!-- Welcome -->
<ExampleFolder
    title="Featured Samples" 
    id="Welcome"
    isOpen="true"
    showSkinSwitcher="true"
    screenshot="screenshots/tabs_ds_code.png"
    icon="[ISO_DOCS_SKIN]/images/silkicons/house.png"
    screenshotWidth="291" screenshotHeight="176"><description>
    Welcome to the SmartClient Feature Tour!
    &lt;BR&gt;
    &lt;BR&gt;
    Click on the name of an example in the tree on the left to load it.
    &lt;BR&gt;
    &lt;BR&gt;
    With an example loaded, you can view source code by clicking on the tabs shown above the
    running example.
    &lt;BR&gt;
    &lt;BR&gt;
    For an overview of how to use this Feature Explorer, including specific instructions for
    using code shown here in a standalone application, please see the &lt;a target=_blank
    href='${isc.ExampleViewer.getRefDocsURL()}#featureExplorerOverview'&gt;
    Feature Explorer Overview&lt;/a&gt; topic in the Reference Docs.
    <!--  -->
      

</description><children>
<!--
    <Example
        title="Hello World"
        jsURL="welcome/hello.js"
        xmlURL="welcome/hello.xml"><description><![CDATA[
        A SmartClient <code>Label</code> component displays the "Hello world!" message.
        ]]></description></Example>
-->
   <Example
        title="Hello World"
        jsURL="welcome/helloButton.js"
        xmlURL="welcome/helloButton.xml"><description><![CDATA[
        A SmartClient <code>IButton</code> component responds to mouse clicks by showing a
        modal <code>Dialog</code> component with the "Hello world!" message.  Source code is
        provided in both XML and JS formats.
        ]]></description>
        </Example>
        
    <Example
        title="Hello World (styling)"
        visibility="sdk"
        jsURL="welcome/helloStyled.js"
        xmlURL="welcome/helloStyled.xml"><tabs>
        <tab title="CSS" url="welcome/helloStyled.css"/>
        </tabs><description><![CDATA[
        This <code>Label</code> component is heavily styled with a combination of CSS class,
        CSS attribute shortcuts, and SmartClient attributes.  Source code is
        provided in both XML and JS formats.
        ]]></description></Example>
    <Example
        title="Hello You (form)"
        visibility="sdk"
        jsURL="welcome/helloForm.js"
        xmlURL="welcome/helloForm.xml"><description><![CDATA[
        This SmartClient <code>FormLayout</code> provides a text field and a button control.
        Type your name in the field, then click the button for a personalized message.
        Source code is provided in both XML and JS formats.
        ]]></description></Example>

    <Example title="Databound Calendar" ref="databoundCalendar" 
        icon="[ISO_DOCS_SKIN]/images/silkicons/cal.png" />
    <Example title="Live Grid" ref="fetchOperation"  
        icon="[ISO_DOCS_SKIN]/images/silkicons/application_put.png"><description><![CDATA[
        <p>Rows are fetched automatically as the user drags the scrollbar. Drag the 
        scrollbar quickly to the bottom to fetch a range near the end (a prompt will appear 
        during server fetch).</p>
        <p>Scroll slowly back up to fill in the middle.</p>
        <p>Another key unique feature of SmartClient is lazy rendering of <b>columns</b>. Most 
        browsers cannot handle displaying a large number of column and have serious 
        performance issues. SmartClient, however, does not render all columns outside the 
        visible area by default and only renders them as you scroll horizontally. You can 
        however disable this feature if desired.</p>
        <p>You can control how far ahead of the currently visible area rows should be 
        rendered. This is expressed as a ratio from viewport size to rendered area size. 
        The default is 1.3.</p>
        <p>Tweaking drawAheadRatio allows you to make tradeoffs between continuous 
        scrolling speed vs initial render time and render time when scrolling by large 
        amounts.</p> ]]></description></Example>
    <Example title="Adaptive Filter" ref="adaptiveFilter" 
        icon="[ISO_DOCS_SKIN]/images/silkicons/application_view_detail.png" />
    <Example title="Advanced Filter" ref="filterBuilderBracket" 
        icon="[ISO_DOCS_SKIN]/images/silkicons/sc_insertformula.png" />
    <Example title="Dynamic Frozen Columns" ref="dynamicFreeze"
        icon="[ISO_DOCS_SKIN]/images/silkicons/application_view_detail.png" />
	<Example title="User-Defined Hilites" ref="userDefinedHilites" 
        icon="[ISO_DOCS_SKIN]/images/silkicons/application_side_tree.png" />
	<Example title="Dynamic Grouping" ref="dynamicGrouping" 
        icon="[ISO_DOCS_SKIN]/images/silkicons/application_side_tree.png" />
    <Example title="Grid Summaries" ref="summaryGrid" 
        icon="[ISO_DOCS_SKIN]/images/silkicons/application_side_tree.png" />
    <Example title="Mass Update" ref="massUpdate" 
        icon="[ISO_DOCS_SKIN]/images/silkicons/arrow_out.png"/>
    <Example title="Expanding Rows" ref="expansionRelatedRecords"
        icon="[ISO_DOCS_SKIN]/images/silkicons/application_split.png" />
    <Example title="Dependent Selects (Grid)" ref="databoundDependentSelects"
        icon="[ISO_DOCS_SKIN]/images/silkicons/application_view_columns.png" />
    <Example title="Dependent Selects (Form)" ref="formDependentSelects"
        icon="[ISO_DOCS_SKIN]/images/silkicons/application_view_columns.png" />
    <Example title="Filter Related Records" ref="filterRelated"
        icon="[ISO_DOCS_SKIN]/images/silkicons/application_view_columns.png" />
    <Example title="Databound Dragging" ref="databoundDragCopy" 
        icon="[ISO_DOCS_SKIN]/images/silkicons/database_link.png"/>
<!-- how about a flag like "skinScreenShots" - in which case we can look at (say) isc.currentSkin and
     append to the screenshot property. Bit of a hack - that prop may be unset -->        
    <Example
        id="showcaseApp"
        title="Complete Application"
        icon="[ISO_DOCS_SKIN]/images/silkicons/application_osx.png"
        needServer="true"
        jsURL="demoApp/demoAppJS.js"
        xmlURL="demoApp/demoAppXML.xml"
        dataSource="supplyCategory"
        fullScreen="true"
        screenshot="demoApp/demoApp.png"
        screenshotWidth="480"
        screenshotHeight="337"
        >
        <tabs>
            <tab title="supplyItem" url="supplyItem.ds.xml"/>
        </tabs>
        <description>Demonstrates a range of SmartClient GUI components, data binding operations,
        and layout managers in a single-page application.
        </description></Example>
    <ExampleFolder title="Server Examples" isOpen="true" ref="serverExamples"/>
    <Example title="Tile Sort &amp; Filter" ref="tilingFilter" 
        icon="[ISO_DOCS_SKIN]/images/silkicons/application_view_tile.png"/>
    <Example title="Simple Cube" ref="basicCube"
        icon="[ISO_DOCS_SKIN]/images/silkicons/cube_simple.png" />
    <Example title="Advanced Cube" ref="analytics"
        icon="[ISO_DOCS_SKIN]/images/silkicons/cube_simple.png" />
    <Example id="DrawingPreview" title="Drawing Preview" url="drawing/Drawing.html"
       screenshot="drawing/drawing_screenshot.png"
       screenshotWidth="386"
       screenshotHeight="336"
       requiresModules="Drawing"
       external="true"
       externalWindowConfig="height=675,width=800,toolbar=no,resizable=no">
       <description><![CDATA[Click on the buttons at the top to create (or erase) shapes using
       the SmartClient drawing module. Drawn objects may be manipulated at runtime - drag the
       control points, or change the control form values to update them.
       <P>
       This is a <span style="color:red">preview</span> of unreleased SmartClient functionality.  
       <a href="http://www.smartclient.com/company/contact.jsp">Contact
       Isomorphic</a> to get
       early access to this technology.
       ]]></description></Example>
    <Example title="Portal Preview" ref="portal"
        icon="[ISO_DOCS_SKIN]/images/silkicons/world.png" />
    <Example title="Printing" ref="printing" 
        icon="[ISO_DOCS_SKIN]/images/silkicons/printer.png" />
    <Example
        id="offlineSupport"
        title="Offline support"
        jsURL="offline/offlineSupport.js"
        descriptionHeight="150"><tabs>
            <tab name="supplyItem" dataSource="supplyItem"/>
            <tab name="supplyCategory" dataSource="supplyCategory"/>
       </tabs>
        <description><![CDATA[
        SmartClient has support for caching server responses in browser storage, allowing
        these cached responses to be returned to an application at some future point when 
        the application is offline.  Offline support is automatic once enabled - if the user
        switches the application or browser into offline mode, or the browser detects that it
        is offline, the framework automatically and transparently starts returning cached 
        responses whenever it can (application code can determine that responses have come 
        from offline cache if necessary)<p>
        Use the tree to navigate categories; click a category to load the grid with
        matching items.  Now reload the page and click "Go offline" (or switch your
        browser into offline mode).  If you click a category that you selected before
        the reload, you will see that the grid is still populated from the Offline cache; if 
        you click a category you did not previously select, or attempt to open a node
        in the tree that you did not previously open, you will get the "Data not available
        while offline" message.
        ]]></description>
        </Example>
    <Example
        id="offlinePrefs"
        title="Offline preferences"
        jsURL="offline/offlinePrefs.js"
        descriptionHeight="150"><tabs>
        <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
        </tabs>
        <description><![CDATA[
        SmartClient provides a unified Offline browser storage API that your programs can use 
        for any client-side persistence task.  In this example, we store the ListGrid's 
        viewState to browser-local storage. Try resizing or reordering some columns in the
        grid, click "Persist State", then press F5 to reload, or close and re-open the browser;
        your changes have been remembered.  Try adding a formula field to the grid and reload 
        again. Persisting a user's preferences like this is a compelling addition to any application, 
        and in this case we don't even need a server.<p>
        Offline support is provided in modern HTML5 browsers, and also in older versions of 
        Internet Explorer (6 and greater); the underlying technologies used are very different,
        but the SmartClient API you use is the same regardless of browser.
        ]]></description>
        </Example> 
    <Example title="Pattern Reuse" ref="patternReuse" 
        icon="[ISO_DOCS_SKIN]/images/silkicons/database_table.png" />
    <Example title="Metadata Import" ref="xmlSchemaImport" 
        icon="[ISO_DOCS_SKIN]/images/silkicons/arrow_in.png" />
    <Example
        jsURL="devConsole/devConsole.js"
        title="Developer Console"
        icon="[ISO_DOCS_SKIN]/images/silkicons/bug.png"
        showSkinSwitcher="false"
        showSource="false"
        ><description><![CDATA[
The Developer Console is a suite of development tools implemented in SmartClient itself.  The
Console runs in its own browser window, parallel to your running application, so it is always
available: in every browser, and in every deployment environment.<BR> 
Click on the name of a screenshot below to see more information about developer
console features.
        ]]></description></Example>
    <Example
        title="SmartClient Docs"
        jsURL="docs/docs.js"
        showSkinSwitcher="false"
        showSource="false"
        ><description>
        SmartClient contains over 100 documented components with more than 2000 documented,
        supported APIs.  All of SmartClient's documentation is integrated into a
        SmartClient-based, searchable documentation browser, including API reference, concepts,
        tutorials, live examples, architectural blueprints and deployment instructions.
        </description></Example>


</children></ExampleFolder>



<!-- Concepts -->
<!--
<ExampleFolder title="Concepts" isOpen="false"><description>
    Essential SmartClient concepts.
</description><children>
    <Example title="Visual components" xmlURL=".xml" jsURL=".js"><description>
        Visual components are the building blocks of SmartClient applications.
        </description></Example>
    <Example title="Inline HTML" xmlURL=".xml" jsURL=".js"><description>
        HTML in SmartClient
        Embed existing web pages, portlets, and components inside SmartClient components.
        &lt;code&gt;HTMLFlow&lt;/code&gt; and &lt;code&gt;HTMLPane&lt;/code&gt; components manage
        and display your page fragments in standard HTML and CSS.
        </description></Example>
    <Example title="Layouts" xmlURL=".xml" jsURL=".js"><description>
        Create pixel-perfect page layouts without CSS hacks.
        HLayout, VLayout, HStack, and VStack are the building blocks for easy liquid layouts.
        </description></Example>
    <Example title="Editors" xmlURL=".xml" jsURL=".js"><description>
        Create flexible multi-field forms and grids for user data entry.
        FormLayout and ListGrid components manage a rich set of built-in and custom input
        controls for all data types.
        </description></Example>
    <Example title="DataSources" xmlURL=".xml" jsURL=".js"><description>
        Accelerate development with model-driven components.
        DataSources provide a shared data model for your forms, grids, and reports, with
        easy read-write data binding to JSON, XML, WSDL, POJOs, and other remote data providers.
        </description></Example>
    <Example title="Extensions" xmlURL=".xml" jsURL=".js"><description>
        Build your own SmartClient components.
        The SmartClient class system is fully exposed to customize, aggregate, or build
        new components for your unique requirements.
        </description></Example>
</children></ExampleFolder>
-->


<!-- PARENT FOLDER: Grids -->
<ExampleFolder
    showSkinSwitcher="true"
    title="Grids"
    isOpen="false"
    icon="[ISO_DOCS_SKIN]/images/silkicons/application_view_columns.png"><description>
    High-performance interactive data grids.
</description><children>
    <!--
    <Example
        title="ListGrid Showcase"
        jsURL="grids/gridShowcase.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        ListGrid showcase.
        </description></Example>
    <Example
        title="ListGrid"
        xmlURL="ListGrid.xml"><description>
        Click, ctrl-click, or shift-click to select rows. Click column headers to sort. Drag
        column headers to resize or reorder. Move row selection with arrow keys.
        </description></Example>
      -->

<!-- Grids > Appearance (combining Layout and Formatting for now) -->
<ExampleFolder
    title="Appearance"
    isOpen="false"><description>
    Styling, sizing and formatting options for grids, as well as built-in end user controls.
</description><children>
    <Example
        title="Column order"
        id="columnOrder"
        jsURL="grids/layout/columnOrder.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Drag and drop the column headers to rearrange columns in the grid.
        Right-click the column headers to hide or show columns.
        Click the buttons to hide or show the "Capital" column.
        </description></Example>
    <Example
        title="Column size"
        id="columnSize"
        jsURL="grids/layout/columnSize.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click and drag between the column headers to resize columns in the grid.
        </description></Example>
    <Example
        title="Column align"
        visibility="sdk"
        jsURL="grids/layout/columnAlign.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click the radio buttons to change the alignment of the "Flag" column.
        </description></Example>
    <Example
        title="Column headers"
        visibility="sdk"
        jsURL="grids/layout/columnHeaders.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click the buttons to show or hide the column headers.
        </description></Example>
    <Example
        title="Column titles"
        visibility="sdk"
        jsURL="grids/layout/columnTitles.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click the buttons to change the title of the "Country" column.
        </description></Example>
    <Example
        title="Multiline values"
        id="multilineValues"
        jsURL="grids/layout/multiLineValues.js"><tabs>
        <tab title="countryData" url="grids/data/countryDataDetail.js"/>
        </tabs><description>
        Click and drag between the "Background" and "Flag" column headers, or resize your browser
        window to change the size of the entire grid. The "Background" values are
        confined to a fixed row height.
        </description></Example>
    <!-- hidden: exposes LG.body, and ledger styles unlikely to need to be flipped on/off
                 dynamically
    <Example
        title="Ledger style"
        jsURL="grids/formatting/ledgerStyle.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click the buttons to enable or disable alternating light/dark rows.
        </description></Example>
        -->
    <Example title="Header Spans" ref="headerSpans" />
    <Example
        title="Cell styles"
        jsURL="grids/formatting/cellStyles.js"><tabs>
        <tab title="CSS" url="grids/formatting/cellStyles.css"/>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Mouse over the rows and click-drag to select rows, to see the effects of different
        base styles on these two grids.
        </description></Example>
    <Example
        title="Hilite cells (add style)"
        id="addStyle"
        jsURL="grids/formatting/addStyle.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        This grid hilites "Population" values greater than 1 billion or less than 50 million
        using additive style attributes (text color and weight).
        </description></Example>
    <Example
        title="Hilite cells (replace style)"
        id="replaceStyle"
        jsURL="grids/formatting/replaceStyle.js"><tabs>
        <tab title="CSS" url="grids/formatting/replaceStyle.css"/>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        This grid hilites "Population" values greater than 1 billion or less than 50 million
        using a full set of compound styles (with customized background colors). Mouse over or
        click-drag rows to see how these styles apply to different row states.
        </description></Example>

    <Example
        title="Rounded Selection"
        jsURL="grids/formatting/roundedSelection.js"><tabs>
        <tab title="CSS" url="grids/formatting/simpleCellStyles.css"/>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Select the rows to see a custom selection effect with rounded edges achieved via the
        selectionCanvas subsystem.
        </description>
        <badSkins>BlackOps</badSkins>
        <bestSkin>TreeFrog</bestSkin>
    </Example>
    <Example
        title="Animated Selection and RollOvers"
        jsURL="grids/formatting/animatedSelection_RollOver.js"><tabs>
        <tab title="CSS" url="grids/formatting/simpleCellStyles.css"/>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        RollOver, and select the rows in the grid to see rollover and selection indicators fade
        into view. This is achieved via the rollOverCanvas and selectionCanvas subsystem. 
        Note that the opacity setting on the rollUnderCanvas allows true color layering.
        </description></Example>
    <Example
        title="RollOver Reticle Effect"
        jsURL="grids/formatting/rollOverRecticle.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        RollOver the rows in the grid to see a custom roll over recticle effect, 
        achieved via the rollOverCanvas subsystem.
        </description>
        <badSkins>BlackOps</badSkins>
        <bestSkin>TreeFrog</bestSkin>
    </Example>
    <Example
        title="RollOver Controls"
        jsURL="grids/formatting/rollOverControls.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        RollOver the rows in the grid to row-level controls buttons appear embedded in the row.
        This example utilizes the rollOverCanvas subsystem to achieve this effect. 
        </description></Example>
    
    <Example
        title="Format values"
        id="formatValues"
        jsURL="grids/formatting/formatValues.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        This grid applies custom formatters to the "Nationhood" and "Area" columns.
        Click on the "Nationhood" or "Area" column headers to sort the underlying data values.
        </description></Example>
    <Example
        title="Empty values"
        id="emptyValues"
        jsURL="grids/formatting/emptyValues.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Double-click any cell, delete its value, and press Enter or click outside the cell to
        save and display the empty value. This grid shows "--" for empty date values, and
        "unknown" for other empty values.
        </description></Example>
    <Example
        title="Empty grid"
        id="emptyGrid"
        jsURL="grids/layout/emptyGrid.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click the buttons to add or remove all data in the grid.
        </description></Example>
</children></ExampleFolder>


<!-- Grids > Interaction (combining with Selection for now) -->
<ExampleFolder
    title="Interaction"
    isOpen="false"><description>
    Selection and drag and drop of data, hovers, and grid events.
</description><children>
    <Example
        title="Rollover"
        visibility="sdk"
        jsURL="grids/interaction/rollover.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Move the mouse over rows in the grid to see rollover highlights.
        Click the buttons to enable or disable this behavior.
        </description></Example>
    <Example
        title="Single select"
        visibility="sdk"
        jsURL="grids/selection/singleSelect.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click to select any single row in the grid.
        </description></Example>
    <Example
        title="Multiple select"
        id="multipleSelect"
        jsURL="grids/selection/multipleSelect.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click to select a single row in the grid. Shift-click to select a continuous range of rows.
        Ctrl-click to add or remove individual rows from the selection.
        </description></Example>
    <Example
        title="Simple select"
        jsURL="grids/selection/simpleSelect.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click to select or deselect any row in the grid.
        </description></Example>
    <Example
        title="Checkbox Select"
        jsURL="grids/selection/checkboxSelect.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        By setting selectionAppearance to "checkbox", the ListGrid can use checkboxes 
        to indicate the selected state of records. Only by clicking on a checkbox will the 
        corresponding record be selected or unselected.
        </description></Example>
    <Example
        title="Drag select"
        jsURL="grids/selection/dragSelect.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click and drag to select a continuous range of rows in the grid.
        </description></Example>
    <Example
        title="Value hover tips"
        id="valueHoverTips"
        jsURL="grids/interaction/valueHover.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Move the mouse over a value in the "Government" column and pause (hover) for a
        longer description of that value.
        </description></Example>
    <Example
        title="Header hover tips"
        jsURL="grids/interaction/headerHover.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Move the mouse over a column header and pause (hover) for a longer description
        of that column.
        </description></Example>
    <Example
        title="Drag reorder"
        id="gridsDragReorder"
        jsURL="grids/interaction/dragOrder.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Drag and drop to change the order of countries in this list.
        </description></Example>
    <Example
        title="Drag move"
        id="gridsDragMove"
        jsURL="grids/interaction/dragMove.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Drag and drop to move rows between the two lists. 
        </description></Example>
    <Example
        title="Drag copy"
        id="gridsDragCopy"
        jsURL="grids/interaction/dragCopy.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Drag and drop to copy rows from the first list to the second list.
        </description></Example>
    <Example
        title="Disabled rows"
        id="disabledRows"
        jsURL="grids/interaction/disabled.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Mouse over, drag, or click on any values in this grid.
        All "Europe" country records in this grid are disabled.
        </description></Example>
    <Example
        title="Record clicks"
        id="recordClicks"
        jsURL="grids/interaction/recordClicks.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click, double-click, or right-click any row in the grid.
        </description></Example>
    <Example
        title="Cell clicks"
        id="cellClicks"
        jsURL="grids/interaction/cellClicks.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click, double-click, or right-click any value in the grid.
        </description></Example>
</children></ExampleFolder>


<!-- Grids > Autofit -->
<ExampleFolder
    title="Autofit"
    isOpen="false"><description>
    Various auto-fit behaviors built-in to every Grid
</description><children>
    <Example
        title="Free Space"
        id="autoFitFreeSpace"
        jsURL="grids/autofit/autoFitFreeSpace.js"><tabs>
            <tab title="supplyItem" url="supplyItem.ds.xml"/>
        </tabs><description>
        By default, grids used in a Layout will fill available space, allowing users to show 
        and hide other components on the screen in order to view and interact with more data 
        at once in the grid.  Imagine that the blue outline represents all the space that is
        available for this interface.  Click on the "Details" header to hide the tabs and
        reveal more rows.  Click on the resizebar next to the Navigation tree to hide it,
        allowing more space for columns.
        </description></Example>
    <Example
        title="Cell Values"
        id="autofitValues"
        jsURL="grids/autofit/autoFitValues.js"><tabs>
        <tab title="countryData" url="grids/data/countryDataDetail.js"/>
        </tabs><description>
        Click and drag between the "Background" and "Flag" column headers, or resize your browser
        window to change the size of the entire grid. The rows resize to fit
        the "Background" values.
        </description></Example>
    <Example
        title="Rows"
        id="autofitRows"
        jsURL="grids/autofit/autoFitRows.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click the buttons to show different numbers of records. The grid resizes to fit
        all rows without scrolling.
        </description></Example>
    <Example
        title="Columns"
        id="autofitColumns"
        jsURL="grids/autofit/autoFitColumns.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click and drag between the column headers to resize the columns. The grid resizes to
        fit the new column widths.  The width setting on the grid as a whole acts as a minimum.
        </description></Example>
    <Example
        title="Column Widths"
        id="autofitColumnWidths"
        jsURL="grids/autofit/autoFitColumnWidths.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        ListGrid fields can be set to auto-fit to their titles and/or field values. In this
        example the first two columns are set to auto-fit when the grid is drawn. The first
        field's title exceeds the space used by its values, and the second field the reverse
        is true. In both cases the column is correctly sized to fit its content.
        Note that the user can also perform one time auto-fit of columns at runtime by
        double-clicking on any header or using
        the context-menu option.
        </description>
    </Example>
    <Example
        title="New Records"
        id="autofitNewRecords"
        jsURL="grids/autofit/autoFitNewRecords.js">
        <description>
        Autofit to rows can be made subject to a maximum. Add new rows to the grid, and note that the
        grid expands to show the new rows. This grid is configured to stop expanding once you have more
        than 5 rows, and begin scrolling instead.
        </description></Example>
    <Example
        title="Filter"
        id="autofitFilter"
        jsURL="grids/autofit/autoFitFilter.js"><tabs>
        <tab title="worldDS" url="grids/ds/worldSQLDS.ds.xml" canEdit="false" />
        </tabs><description>
        Change the filter to show the grid resizing within the constraint of its maximum 
        autofit rows. Enter a country filter of "cook island" to see the grid shrink down to minimum
        size. Change the country filter to "island" to show the grid at almost maximum size, but
        not scrolling.  Change the country filter to "land" to show the grid scrolling because
        its maximum autofit size (10) isn't large enough to display all rows.
        </description></Example>
</children></ExampleFolder>


<!-- Grids > Filter -->
<ExampleFolder
    title="Filtering"
    isOpen="false"><description>
    SmartClient grids provide interactive filtering of standard and custom data types,
    with automatic client/server coordination.
</description><children>
    <Example
        title="Filter"
        id="filter"
        jsURL="grids/filtering/filter.js"><tabs>
        <tab title="worldDS" url="grids/ds/worldSQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        Type "island" above the Country column, then press Enter or click the filter button
        (top-right corner of the grid) to show only countries with "island" in their name.
        Select "North America" above the Continent column to filter countries by that continent.
        ]]></description></Example>
    <Example
        title="Live Filter"
        id="liveFilter"
        jsURL="grids/filtering/liveFilter.js"><tabs>
        <tab title="worldDS" url="grids/ds/worldSQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        Begin typing a country name into in the filter box for the Country column.  Grids can 
        be configured to filter as you type.        
        ]]></description></Example>
    <Example
        title="Adaptive Filter"
        id="adaptiveFilter"
        descriptionHeight="165"
        jsURL="grids/filtering/adaptiveFilter.js"><tabs>
            <tab title="supplyItem" url="supplyItem.ds.xml"/>
        </tabs><description><![CDATA[
        SmartClient combines large dataset handling with <b>adaptive</b> use of
        client-side filtering.  Begin typing an Item name in the filter box above the "Item"
        column (for example, enter "add").  When the dataset becomes small enough, SmartClient
        switches to client-side filtering automatically - enter more letters, or criteria on
        other columns, to see this.  The label underneath the grid flashes briefly
        every time SmartClient needs to visit the server.
        <P>
        Delete part of the item name to see SmartClient automatically switch back to
        server-side filtering when necessary.  
        <P>
        Adaptive filtering eliminates up to 90% of the most costly types of server contact
        (searching through large datasets), <b>dramatically improving responsiveness and
        scalability</b>.
        ]]></description></Example>
    <Example
        title="Advanced Filter"
        id="advancedFilter"
        jsURL="grids/filtering/advancedFilter.js"><tabs>
        <tab title="worldDS" url="grids/ds/worldSQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        SmartClient's Advanced Filter feature allows you to create complex, multi-condition 
        filters.  Ordinary DynamicForms can be used to generate AdvancedCriteria objects, as we
        are doing here, simply by specifying a valid "operator" on one or more of the form fields.  
        ]]></description></Example>
    <Example
        title="Custom Filter"
        id="filterBuilder"
        jsURL="grids/filtering/filterBuilder.js"><tabs>
        <tab title="worldDS" url="grids/ds/worldSQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        Use the FilterBuilder to construct custom queries that combine multiple criteria across
        any field in your DataSource.  Note that the operator
        select list only shows operators suitable for the field selected, and the comparison
        field changes to suit the type of the selected field (for example, select field 
        "independence" and note that the comparison field changes to a date). Add clauses to
        your query with the "+" icon. Click "Filter" to see the result in the ListGrid.
        ]]></description></Example>
    <Example
        title="Nested Filter"
        id="filterBuilderBracket"
        jsURL="grids/filtering/filterBuilderBracket.js"><tabs>
        <tab title="worldDS" url="grids/ds/worldSQLDS.ds.xml" canEdit="false" />
        </tabs>
        <descriptionHeight>120</descriptionHeight>
        <description><![CDATA[
        Use the FilterBuilder to construct queries of arbitrary complexity.  The FilterBuilder,
        and the underlying AdvancedCriteria system, support building queries with subclauses
        nested to any depth.  The initial criteria in this example are set up to display only
        European countries where either the name ends with "land", or the population is less 
        than 3 million - an unlikely query, perhaps, but one that shows the barest example of
        the FilterBuilder's flexibility.
        <p>
        Add clauses to the query with the "+" icon; add nested subclauses with the "+()" button.
        Click "Filter" to see the result in the ListGrid.
        ]]></description></Example>
    <Example
        title="Big Filter"
        id="bigFilter"
        jsURL="grids/filtering/bigFilter.js"><tabs>
        </tabs>
        <descriptionHeight>120</descriptionHeight>
        <description><![CDATA[
        When a FilterBuilder must work with a very large number of fields, you can set 
        FilterBuilder.fieldDataSource to a DataSource containing records that represent the
        fields to display in the FieldPickers in each clause.  The FilterBuilder below is 
        created without a normal DataSource, but specifies a fieldDataSource and the 
        FieldPicker items in each clause are populated dynamically with it's records.  In this 
        mode, the FieldPickers are represented by ComboBoxItems, rather than SelectItems, and 
        have default settings that provide type-ahead auto-completion.
        <P>Note also that, when fieldDataSource is specified and the operator for a clause
        is of a type that uses a field-lookup, the valueField is also populated dynamically by 
        the fieldDataSource.
        ]]></description></Example>
    <Example
        title="Header Spans"
        id="headerSpans"
        jsURL="grids/sorting/headerSpans.js"><tabs>
        <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        HeaderSpans are a second level of headers that appears above the normal ListGrid 
        headers, providing a visual cue for grouping. Resize columns and note that the 
        HeaderSpans change accordingly. Right-click in the header and note that you can hide
        and display spanned columns as a group, as well as individually.
        ]]></description></Example>
    <Example
        title="Disable filter"
        id="disableFilter"
        jsURL="grids/filtering/disable.js"><tabs>
        <tab title="worldDS" url="grids/ds/worldSQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        Type "island" above the Country column, then press Enter or click the filter button
        (top-right corner of the grid) to show only countries with "island" in their name.
        Select "North America" above the Continent column to filter countries by that continent.
        Filtering is disabled on the "Flag" and "Capital" columns.
        ]]></description></Example>
    <Example title="Autofit filter" ref="autofitFilter"/>
    <Example
        title="Date Range"
        id="dateRangeFilter"
        jsURL="grids/filtering/dateRangeFilter.js"><tabs>
        <tab title="worldDS" url="grids/ds/worldSQLDS.ds.xml" canEdit="false" />
        </tabs>
        <descriptionHeight>180</descriptionHeight>
        <description><![CDATA[
        Smartclient provides special widgets for filtering date values, including recognised 
        RelativeDate strings that cause filtering relative to some other base-date. 
        <P>The RelativeDateRangeItem allows selection of dates in three ways: you can select a
        preset date-string, like "Today" or "Tomorrow", or a "ranged" date-string, such as 
        "N days from now" and enter a quantity to associate with it, or you can directly enter
        a date-string in a recognized format.  You can also select a date from the DateChooser
        by click the icon to the right of the widget.
        <P>The first example below demonstrates using a DateRangeItem in a seperate DynamicForm
        to filter a ListGrid.  Select start and end values for the range using one of the 
        methods described above and click the "Search" button to see the data filtered 
        according to the values in the "Nationhood" field.
        <P>The second example below demonstrates filtering grid data using a MiniDateRangeItem
        to filter data when a ListGrid is showing it's FilterEditor.  In
        this example, click the Date icon in the header for the Nationhood field to open a 
        popup DateRangeItemDialog.  In the dialog, select start and end values for the range, 
        as described above, and click Ok to close the Window.  Then click the Filter button in
        the top right of the grid to see the data filtered.  You can hover the mouse over the 
        Nationhood field-header to see the full date-range string.
        ]]></description></Example>
    <Example
        title="Expression filter"
        id="expressionFilter"
        jsURL="grids/filtering/expressionFilter.js"><tabs>
        <tab title="worldDS" url="grids/ds/worldSQLDS.ds.xml" canEdit="false" />
        </tabs>
        <descriptionHeight>140</descriptionHeight>
        <description><![CDATA[
        DynamicForms and FormItems are capable of parsing simple expressions entered as part of
        their values, when allowExpressions is true on either entity.  ListGrids use this
        facility, when showFilterEditor and allowFilterExpressions are true, to allow 
        expressions to be entered directly into the FormItems displayed in the filterEditor.
        <P>Below is a ListGrid with a FilterEditor and allowFilterExpressions: true.  Some 
        expression-based filter-criteria have been applied via initialCriteria: the list displays 
        countries with no 'i's in the country name, with a Capital that starts with a letter "A"
        through "F" and with a population less than 1 million or more than 100 million.
        <P>See the table on the right for the supported expression-symbols.  Note that 
        logical "and" and "or" expressions are treated as text in text-based fields and ignored.
        ]]></description></Example>
</children></ExampleFolder>

<!-- Grids > Sort -->
<ExampleFolder
    title="Sorting"
    isOpen="false"><description>
    SmartClient grids provide interactive sorting of standard and custom data types,
    with automatic client/server coordination.
</description><children>
    <Example
        title="Sort"
        id="sort"
        jsURL="grids/sorting/sort.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click on any column header to sort by that column. To reverse the sort direction,
        click on the same column header, or the top-right corner of the grid.
        </description></Example>
    <Example
        title="Disable sort"
        visibility="sdk"
        jsURL="grids/sorting/disableSort.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Sorting is disabled on the "Flag" column. Click on any other column header to sort
        on the corresponding column.
        </description></Example>
    <Example
        title="Sort arrows"
        visibility="sdk"
        jsURL="grids/sorting/sortArrow.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click on any column header to sort or reverse-sort by that column.
        This grid shows the sort-direction arrow in the top-right corner only.
        </description></Example>
    <Example
        title="Data-Aware Sort"
        id="dataTypes"
        jsURL="grids/sorting/dataTypes.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click on any column header to sort by that column.
        The "Nationhood", "Area", and "GDP (per capita)" columns are sorted as date, number, and
        calculated number values, respectively.
        </description></Example>
    <Example
        title="Multilevel Sort (UI)"
        id="multiLevelSortLG"
        jsURL="grids/sorting/multiLevelSortLG.js"><tabs>
        <tab title="supplyItem" url="supplyItem.ds.xml" canEdit="false" />
        </tabs>
        <descriptionHeight>150</descriptionHeight>
        <description><![CDATA[
        This grid is displayed pre-sorted on two fields: first by Category ascending and then
        by Item Name descending.  As well as the field's title, the header of each field included 
        in the sort configuration displays a sort-arrow indicating the direction of sort on that 
        field and, when multiple fields are sorted, a small numeral indicating this field's 
        position in the list of fields being sorted.  You can hold down SHIFT and 
        click an already sorted column-header to reverse it's direction, or an unsorted column-
        header to add that field to the list of fields being sorted.  Clicking a column header
        without holding down SHIFT clears the current sort configuration and initializes a new
        sort on the selected field.
        <P>SmartClient's SQL and Hibernate adapters support server-side multi-sorting and this
        is in evidence in this example.
        ]]></description></Example>
    <Example
        title="Multilevel Sort (Dialog)"
        id="multiLevelSortDialog"
        jsURL="grids/sorting/multiLevelSort.js"><tabs>
        <tab title="supplyItem" url="supplyItem.ds.xml" canEdit="false" />
        </tabs><description>
        Click the "Multilevel Sort" button to show a MultiSortDialog.  Select a set of sort
        properties and directions and click "Save" to see the grid resorted by those properties.
        </description></Example>
    <Example
        title="Adaptive Sort"
        id="adaptiveSort"
        jsURL="grids/sorting/adaptiveSort.js"><tabs>
            <tab title="supplyItem" url="supplyItem.ds.xml"/>
        </tabs><description><![CDATA[
        SmartClient combines large dataset handling with <b>adaptive</b> use of
        client-side sort.  Click any header now and server-side sort will be used for this
        large dataset.  Check "Limit to Electronics" to limit the dataset and sort again:
        when the dataset becomes small enough, SmartClient switches to client-side
        sorting automatically.  The label underneath the grid flashes briefly 
        every time SmartClient needs to visit the server.
        ]]></description></Example>
</children></ExampleFolder>

<!-- Grids > Editing -->
<ExampleFolder
    title="Editing"
    isOpen="false"><description><![CDATA[
    SmartClient grids provide inline editing of all data types, with automatic validation and
    client/server updates.<br><br>
    These examples are all bound to the same remote DataSource, so your
    changes are saved on SmartClient.com and will appear in all Grid Editing examples during this
    session. To end your SmartClient.com session and reset the example data on the server, simply
    close all instances of your web browser.
]]></description><children>
    <Example
        title="Edit by row"
        id="editByRow"
        jsURL="grids/editing/editRows.js"><tabs>
        <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        <b>Click</b> on any cell to start editing. Use <b>Tab</b>, <b>Shift-Tab</b>,
        <b>Up Arrow</b>, and <b>Down Arrow</b> to move between cells. Changes are saved
        automatically when you move to another row. Press <b>Enter</b> to save the current row
        and dismiss the editors, or <b>Esc</b> to discard changes for the current row and dismiss
        the editors.
        ]]></description></Example>
    <Example
        title="Edit by cell"
        id="editByCell"
        jsURL="grids/editing/editCells.js"><tabs>
        <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        <b>Click</b> on any cell to start editing. Use <b>Tab</b>, <b>Shift-Tab</b>,
        <b>Up Arrow</b>, and <b>Down Arrow</b> to move between cells. Press <b>Enter</b> to save
        the current row and dismiss the editors, or <b>Esc</b> to discard changes for the current
        cell and dismiss the editors.
        ]]></description></Example>
    <Example
        title="Enter new rows"
        id="enterNewRows"
        jsURL="grids/editing/enterRows.js"><tabs>
        <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        <b>Click</b> on any cell to start editing, then <b>Tab</b> or <b>Down Arrow</b> past the
        last row in the grid to create a new row. Alternatively, click the <b>Edit New</b> button
        to create a new data-entry row at the end of the grid.
        ]]></description></Example>
    <Example title="Autofit new rows" ref="autofitNewRecords"/>
    <Example
        title="Mass Update"
        id="massUpdate"
        jsURL="grids/editing/massUpdate.js"><tabs>
        <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        <b>Click</b> on any cell to start editing, then <b>Tab</b> or <b>Down Arrow</b> past the
        last row in the grid to create a new row. Alternatively, click the <b>Edit New</b> button
        to create a new data-entry row at the end of the grid. Unlike the other editing examples, 
        none of your changes are being automatically saved to the server.  Note how SmartClient
        highlights changed values, and new rows. Click the "Save" button to save all your 
        changes at once, or click the "Discard" button to discard all your changes (including 
        any new rows) and revert to the data as it was before you started editing.
        ]]></description></Example>
    <Example
        title="Modal editing"
        id="modalEditing"
        jsURL="grids/editing/modalEditing.js"><tabs>
        <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        <b>Double-click</b> on any cell to start editing. Click anywhere outside of the cell
        editors to save changes, or press the <b>Esc</b> key to discard changes.
        ]]></description></Example>
    <Example
        title="Disable editing"
        id="disableEditing"
        jsURL="grids/editing/disableEditing.js"><tabs>
        <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        <b>Click</b> on any cell to start editing. Use Tab/Arrow keys to move between cells,
        Enter/Esc keys to save or cancel. Editing is disabled for the "Country" and "G8" columns.
        ]]></description></Example>
    <Example
        title="Custom editors"
        id="customEditors"
        jsURL="grids/editing/customEditors.js"><tabs>
        <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        <b>Click</b> on any cell to start editing. The "Government", "Population", and "Nationhood"
        columns specify custom editors: a multiple-line textarea, a numeric spinner, and a compound
        date control.
        ]]></description></Example>
    <Example
        title="Data validation"
        id="dataValidation"
        jsURL="grids/editing/validation.js"><tabs>
        <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        <b>Click</b> on any cell to start editing. Delete the value in a "Country" cell, or type a
        non-numeric value in a "Population" cell, to see validation errors.
        ]]></description></Example>

        <Example title="Dependent Selects" id="databoundDependentSelects"
                jsURL="grids/editing/dependentSelects.js">
            <tabs>
                <tab name="supplyItem" dataSource="supplyItem"/>
                <tab name="supplyCategory" dataSource="supplyCategory"/>
            </tabs>
            <description>
                <![CDATA[
                <p />In the first example, <b>Double Click</b> on any row to start editing. Select a value 
                in the "Division" column to change the set of options available in the "Department" 
                column.
                <p />
                <p />In the second example, click the <b>Order New Item</b> button to add an editable row 
                to the grid.  Select a Category in the second column to change the set of options 
                available in the "Item" column.]]>
            </description></Example>

        
</children></ExampleFolder>

<!-- Grids > Frozen Columns -->
<ExampleFolder
    title="Frozen Columns"
    isOpen="false"><description><![CDATA[
    SmartClient supports rendering out grids with frozen fields.<br><br>
    Frozen fields are fields that do not scroll horizontally with the other fields, remaining
    visible on the screen while other fields may be scrolled out of view.
]]></description><children>
    <Example
        title="Simple Freeze"
        id="simpleFreeze"
        jsURL="grids/freezeFields/simpleFreeze.js"><tabs>
        <tab name="supplyItem" dataSource="supplyItem"/>
        </tabs><description><![CDATA[
        Setting <code>frozen:true</code> on a column definition establishes a
        frozen column.  Column resize and reorder work normally.
        ]]></description></Example>
    <Example
        title="Dynamic Freeze"
        id="dynamicFreeze"
        jsURL="grids/freezeFields/dynamicFreeze.js"><tabs>
        <tab name="supplyItem" dataSource="supplyItem"/>
        </tabs><description><![CDATA[
        Right click on any column header to show a menu that allows you to freeze
        that column.<br>
        Multiple columns may be frozen, and frozen columns may be
        reordered.<br>
        Right click on a frozen column to unfreeze it.
        ]]></description></Example>
    <Example
        title="Editing"
        id="canEditFreeze"
        jsURL="grids/freezeFields/freezeEditing.js"><tabs>
        <tab name="supplyItem" dataSource="supplyItem"/>
        </tabs><description><![CDATA[
        SmartClient's inline editing support works normally with frozen columns
        with no further configuration.
        ]]></description></Example>
  <Example
        title="Drag and Drop"
        jsURL="grids/freezeFields/freezeDragDrop.js"><tabs>
        <tab title="countryData" url="grids/data/splitCountryData.js"/>
        </tabs><description><![CDATA[
        SmartClient's drag and drop support works normally with frozen columns
        with no further configuration.  Drag countries within grids to reorder them, or between
        grids to move countries back and forth.
        ]]></description></Example>
        

</children></ExampleFolder>

<!-- Grids > Cell-Widgets -->
<ExampleFolder
    title="Cell Widgets"
    isOpen="false"><description><![CDATA[
    Examples of SmartClient's ability to embed arbitrary widgets in ListGrid cells.
    ]]></description><children>
    <Example
        title="Grid Cell Widgets"
        id="gridCellWidgets"
        jsURL="grids/cellWidgets/gridCellWidgets.js"><tabs>
        <tab title="countryData" url="grids/data/countryDataDetail.js"/>
        </tabs><description><![CDATA[
        This example illustrates embedding arbitrary widgets in ListGrid cells. Notice how 
        reordering the column with widgets works as any other column. SmartClient uses widget 
        pooling to maximize efficiency - however, for better performance consider using one or 
        more fields of type "icon".
        ]]></description></Example>

</children></ExampleFolder>

<!-- Grids > Expanding Rows -->
<ExampleFolder
    title="Expanding Rows"
    isOpen="false"><description><![CDATA[
    SmartClient grids support a special <code>expansionField</code>.<br><br>
    When grid.canExpandRecords is true, the expansionField is rendered out at the beginning of
    the field list.  When this field is clicked for a record, the record is expanded and a
    builtin component is embedded into the record's row, beneath it's field values.
    <br><br>
    A variety of components are supported by default, according to the value grid.expansionMode,
    and you can also override grid.getExpansionComponent() to add your own expansion behaviors.
]]></description><children>
    <Example
        title="Detail Field"
        id="expansionDetailField"
        jsURL="grids/expansion/expansionDetailField.js"><tabs>
        <tab title="countryData" url="grids/data/countryDataDetail.js"/>
        </tabs><description><![CDATA[
        This grid displays some fields from the Countries dataSource.  You can expand a 
        row by clicking the special <code>expansionField</code> to see the details of
        the selected country's background in the expanded section.
        ]]></description></Example>
    <Example
        title="Details"
        id="expansionDetails"
        jsURL="grids/expansion/expansionDetails.js"><tabs>
        <tab name="supplyItem" dataSource="supplyItem" canEdit="false"/>
        </tabs><description><![CDATA[ 
        This grid displays a limited number of fields from the supplyItem dataSource.  You can
        expand a row by clicking the special <code>expansionField</code> to see a DetailViewer
        embedded in the expanded portion of the record which displays the rest of the
        data from the dataSource that isn't already visible in the grid.
        ]]></description></Example>
    <Example
        title="Related Records"
        id="expansionRelatedRecords"
        jsURL="grids/expansion/expansionRelatedRecords.js"><tabs>
        <tab name="supplyCategory" dataSource="supplyCategory" canEdit="false"/>
        <tab name="supplyItem" dataSource="supplyItem" canEdit="false"/>
        </tabs><description><![CDATA[ 
        In this grid of Supply Categories, you can expand a row by clicking the special 
        <code>expansionField</code> to see a sub-grid containing the list of Supply Items 
        applicable to the selected Category.
        ]]></description></Example>
    <Example
        title="Limited Data"
        id="expansionLimitedWithDetails"
        jsURL="grids/expansion/expansionLimitedWithDetails.js"><tabs>
        <tab name="supplyItem" dataSource="supplyItemWithOps" canEdit="false" />
        </tabs><description><![CDATA[ 
        This grid displays a limited number of fields from the supplyItem dataSource.  Only the
        data values you can see have been returned from the server, via the 
        <i>operationBinding.outputs</i> feature.  When you click the special expansion field for
        a row, the system goes to the server to retrieve the entire record, creates a 
        DetailViewer to display that data and expands the row to show the DetailViewer.  See 
        the code in the overridden getExpansionComponent() method.
        <P>
        Note also the use of the <i>maxExpandedRecords</i> attribute to limit the total number 
        of simultaneously expanded records.
        ]]></description></Example>

</children></ExampleFolder>

<!-- Grids > Expanding Rows -->
<ExampleFolder
    title="Hover Components"
    isOpen="false"><description><![CDATA[
    Any SmartClient Canvas can display a <i>hover</i> label when a user pauses momentarily
    above it.  This is a builtin behavior for showing arbitrary HTML text, configured by
    returning a value from <i>Canvas.hoverHTML</i>.  In addition to this, the builtin Hover
    Label can be replaced with any other Canvas-based component by overriding and returning
    a component from <i>getHoverComponent()</i>.
    <P>
    This section covers some examples of this feature.
    <P>
    When <b>showHoverComponents</b> is true and the mouse hovers over a field, a builtin 
    component is created and used in place of the standard hover Label.
    <br><br>
    A variety of components are supported by default, according to the value grid.hoverMode,
    and you can also override grid.getHoverComponent() to add your own hover behaviors.
]]></description><children>
    <Example
        title="Related Records"
        id="hoverRelatedRecords"
        jsURL="grids/hover/hoverRelatedRecords.js"><tabs>
           <tab title="customerOrders" url="grids/data/customerOrders.js" canEdit="false" doEval="true"/>
           <tab title ="customerOrderMessages" url="grids/data/customerOrderMessages.js" canEdit="false" doEval="true"/>
           <tab title="orderDS" url="grids/ds/orderDS.ds.js" canEdit="false" doEval="true"/>
           <tab title="orderMessagesDS" url="grids/ds/orderMessagesDS.ds.js" canEdit="false" doEval="true"/>
        </tabs><description><![CDATA[ 
        In this grid of Customer Orders, you can hover over a row to see a list of messages
        attached to the order.  This gives you a quick preview of discussion about the order,
        without the need to leave the list of orders.
        <P>
        In a complete application, clicking the order would lead to a detail screen showing the
        full order details and the ability to add to the discussion.
        ]]></description></Example>
    <Example
        title="Details"
        id="hoverDetails"
        jsURL="grids/hover/hoverDetails.js"><tabs>
        <tab name="supplyItem" dataSource="supplyItemWithOps" canEdit="false" />
        </tabs><description><![CDATA[ 
        This grid displays a limited number of fields from the supplyItem dataSource.  Only the
        data values you can see have been returned from the server, via the 
        <i>operationBinding.outputs</i> feature.  When you hover over a row, the system goes to 
        the server to retrieve the entire record, creates a DetailViewer to display that data 
        and shows it as the hoverComponent.  See 
        the code in the overridden getCellHoverComponent() method.
        ]]></description></Example>
</children></ExampleFolder>

<!-- Grids > Grouping -->
<ExampleFolder
    title="Grouping"
    isopen="false"><description><![CDATA[
    List entries can be grouped according to field value.
    ]]></description><children>
    <Example
        title="Dynamic Grouping"
        id="dynamicGrouping"
        jsURL="grids/grouping/dynamicGrouping.js"><tabs>
        <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        Right click on any column header to show a menu that allows you to group by that 
        column. Right click and pick "ungroup" to go back to a flat listing.
        ]]></description></Example>
    <Example
        title="Grouped Editing"
        id="groupedEditing"
        jsURL="grids/grouping/groupedEditing.js"><tabs>
        <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        Inline editing works normally with grouped data. Try editing the field that records 
        are grouped by and notice that the record moves to its new group automatically.
        ]]></description></Example>
    <Example
        title="Custom Grouping"
        id="customGrouping"
        jsURL="grids/grouping/customGrouping.js"><tabs>
        <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        You can specify custom grouping behavior for a field. Group by the Nationhood and 
        Population fields to see examples of custom grouping.
        ]]></description></Example>
</children></ExampleFolder>

<!-- grid summary -->
<Example
        title="Grid Summaries"
        id="summaryGrid"
        jsURL="grids/summaries/gridSummary.js">
        <tabs>
        <tab title="OrderItem" url="grids/ds/orderItemLocalDS.ds.js" canEdit="false" /></tabs>
        
        <descriptionHeight>210</descriptionHeight>
        <description><![CDATA[
        ListGrids support displaying summaries of the current data set in various ways:
        <P>
        Fields from individual records can be summarized into a single field value. In this
        example the <code>"Total"</code> field displays a summary value calculated by
        multiplying the <code>"Quantity"</code> and <code>"Price"</code> fields.
        <P>
        Summaries can also be displayed for multiple records. This example shows a summary row
        at the end of each group in the grid as well as an overall summary row with information
        about every record in the grid. Note that in addition to standard summary functions
        such as <code>"sum"</code> to generate a total, or <code>"count"</code> to generate
        a count of records, completely custom functions may be used. This is demonstrated in
        the <code>"Category"</code> field where a custom function determines how many
        categories exist in this dataset. 
        <P>
        Click to edit and summaries are dynamically recalculated to reflect your changes.
        ]]></description>
    </Example>

<!-- Custom Columns (formula/summary) -->
<Example
    title="Custom Columns"
    id="customColumns"
    jsURL="grids/customColumns.js"><tabs>
    <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
    </tabs>
    <descriptionHeight>220</descriptionHeight>
    <description><![CDATA[
        <b>Formula and Summary fields</b> provide built-in wizards for end users to define 
        formula fields that can compute values using other fields, or summary fields that can 
        combine other fields with intervening / surrounding text. Available in all 
        DataBoundComponents and easy to persist as preferences.
        <P>
        The Formula and Summary Builders are accessible from the grid header context menu. They 
        can also be invoked programmatically as demonstrated by clicking the buttons in this 
        sample.
        <P>
        Launch the Formula Builder and enter the title of the new field, and the desired 
        formula. For example, enter <b>Population Density</b> for the field title and in the 
        formula field enter <b>A / B</b>. As indicated in the dialog, <b>A</b> represents the 
        Population field, and <b>B</b> represents the Area field. Notice that you can now sort on this 
        newly added <b>Population Density</b> field just like any other field. Click the help 
        icon to view the various supported inbuilt functions.
        <P>
        Next launch the Summary Builder and enter the title of the new field, and the Summary 
        formulation. For example, enter <b>County (Flag)</b> for the field name and enter 
        <b>#B (#A)</b> in the summary field.
        <P>
        Once some additional user-fields have been added, all you need to persist the column-layout
        for later restoration to another grid, is the ability to save a string.  Click the 
        button below to store the grid's state by calling <i>getFieldState()</i>, destroy the 
        grid and restore it's state to another grid using <i>setFieldState()</i>. 
        
    ]]></description></Example>

	<!-- Grids -> Hiliting  -->
<ExampleFolder
    title="Hiliting"
    isOpen="false"><description><![CDATA[
		The 'hiliting' system allows end users to visually define data highlighting rules, such 
		as using colors to pick out high values, or using multiple colors to indicate
		ranges of values.
		<P>
		Because 'hilites' can be easily stored and re-applied, it's easy to build an interface 
        that allows users to store their own private data highlighting rules, or even build a
		highlighted report to share with other users.		
	]]></description><children>

<Example
    title="User Defined"
    id="userDefinedHilites"
    jsURL="grids/hiliting/userDefinedHilites.js"><tabs>
    <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
    </tabs>
    <descriptionHeight>240</descriptionHeight>
    <description><![CDATA[
		DataBoundComponents allow end-users to create 'hilites' with rules based on the values 
        of data.  There are two sorts of hilites: simple hilites, which allow a single 
        criterion based on a single field to affect a single target field (the same one), and 
        Advanced hilites, which allow very complex criteria, based on multiple fields, to 
        affect multiple target fields.
		<P>
		Click the "Edit Hilites" button below to show the HiliteEditor interface.  To set up a 
        simple hilite, click on the "Area (km<sup>2</sup>)" record in the list to the left.  
        When the simple hilite rule appears on the right, select the "greater than" operation 
        from the drop-down box, type "5000000" into the value textBox, select a color from the 
        'Color' picker widget and click 'Save'.  You'll see that all "Area (km<sup>2</sup>)" 
        values in the grid that exceed 5000000 are now hilighted in your chosen color.
        <P>
		Now, add an Advanced criteria.  Again, click the "Edit Hilites" button and then click 
        the "Add Advanced Rule" button in the top left of the HiliteEditor - you'll now see the 
		AdvancedHiliteEditor window.  Add a new criterion that specifies <i>GDP ($M) greater 
        than 1000000</i>.  Click the green plus icon beneath the criterion and add a second one, 
        this time specifying <i>Area (km<sup>2</sup>) less than 500000</i>.  In the list below, 
        select both "GDP ($M)" and "Area (km<sup>2</sup>)" and select a background color.  
        Clicking 'Save' now will update the grid, showing both GDP and Area data in your 
        selected background color, when GDP is higher than 1 million and Area is less than
		500,000.
		<P>
        You can easily provide users with the ability to save and restore their hilite 
        information - all you need is the ability to save a string.  Click the 
        button below to see the grid's hilite state retrieved and serialized, by calling 
		<i>getHiliteState()</i>, the grid destroyed and it's hilite-state restored to another 
        grid via <i>setHiliteState()</i>. 
    ]]></description></Example>

<Example
    title="Pre-Defined"
    id="preDefinedHilites"
    jsURL="grids/hiliting/preDefinedHilites.js"><tabs>
    <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
    </tabs>
    <descriptionHeight>130</descriptionHeight>
    <description><![CDATA[
		This example demonstrates producing hilites in code.  The hilites applied to the grid 
        below match those suggested in the <i>User Defined</i> hilites example.  Additionaly, 
        the Advanced Hilite in this example also demonstrates using <i>Canvas.imgHTML()</i> 
        and the <i>htmlAfter</i> attribute of hilite-objects to append a warning icon to the 
        end of each field value, as part of the hilite.
		<P>
		Hilite-objects also support an <i>htmlBefore</i> attribute - you can use these before 
        and after properties to entend color-based hilites to format values, for instance, as 
        <b>bold</b> or <i>italic</i> text using HTML tags.
    ]]></description></Example>

   <Example
    title="Data-Driven"
    id="dataDrivenHilites"
    jsURL="grids/hiliting/dataDrivenHilites.js"><tabs>
    <tab title="countryDataHilites" url="grids/data/countryDataHilites.js" canEdit="false" doEval="true"/>
    <tab title="countryHilitesDS" url="grids/ds/countryHilitesDS.ds.js" canEdit="true" />
    </tabs>
    <descriptionHeight>80</descriptionHeight>
    <description><![CDATA[
		This example demonstrates hiliting in a data-driven fashion, where hilites contain no
        criteria, and instead the data itself is flagged by setting the 
        <i>DataBoundComponent.hiliteProperty</i> attribute on each record.  This method is 
        useful when some complex server-based calculation is used to decide which records to 
        hilite, and the client only needs to handle displaying them.
    ]]></description></Example>

   <Example
    title="Formula Hilites"
    id="formulaHilites"
    jsURL="grids/hiliting/formulaHilites.js"><tabs>
    <tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
    </tabs>
    <descriptionHeight>170</descriptionHeight>
    <description><![CDATA[
        Hiliting can be applied to any field in a DataBoundComponent, including custom formula
        and summary fields.
        <P>
        Launch the Formula Builder and enter the title of the new field, and the desired 
        formula. In this case, enter <b>Population Density</b> for the field title and in the 
        formula field enter <b>A / B</b>. As indicated in the dialog, <b>A</b> represents the 
        Population field, and <b>B</b> represents the Area field. Notice that you can now sort on this 
        newly added <b>Population Density</b> field just like any other field. Click the help 
        icon to view the various supported inbuilt functions.
        <P>
		Now, click the "Edit Hilites" button to show the HiliteEditor interface.  To set up a 
        simple hilite on the custom <b>Population Density</b> field, select it in the list to 
        the left.  When the simple hilite rule appears on the right, select the "greater than" 
        operation from the drop-down box, type "300" into the value textBox, select a color 
        from the 'Color' picker widget and click 'Save'.  You'll see that all the grid-values 
        in the <b>Population Density</b> field that exceed 300 are now hilighted in your 
        chosen color.
    ]]></description></Example>

	</children></ExampleFolder> 

<!-- Grids >  Tiling -->
<ExampleFolder
    title="Tiling"
    isOpen="false"><description>
    Using the TileGrid to display data in a tiled format.
</description><children>
    <Example
        title="Basic"
        id="tilingBasic"
        jsURL="grids/tiling/basic.js"><tabs>
        <tab title="animalData" url="grids/data/animalData.js"/>
        </tabs><description>
       SmartClient can display data in a "tiled" view.  Mouse over widgets to see rollovers, click to
       select (shift- and ctrl-click for multi-select).
        </description></Example>
    <Example
        title="Filter &amp; Sort"
        id="tilingFilter"
        jsURL="grids/tiling/filter.js"
        cssURL="grids/tiling/tileStyle.css"><tabs>
        <tab title="animalsDS" url="grids/ds/animalsSQLDS.ds.xml" canEdit="false"/>
        </tabs>
        <description>
        Tiled views can be filtered and sorted just like ListGrids.  Use the "Search" form to eliminate
        some tiles and watch remaining tiles animate to new positions.  Use the "Sort" form to change
        the sort direction.
        </description></Example>
    <Example
        title="Load on Demand"
        id="tilingLoadOnDemand"
        jsURL="grids/tiling/loadOnDemand.js"><description>
       Tiled views can load data from services via DataSources, just like other data-aware components.
       Enter a search term to search Yahoo Images and display available images as tiles.  
        </description></Example>
    <Example
        title="Editing"
        id="tilingEditing"
        jsURL="grids/tiling/editing.js"
        cssURL="grids/tiling/tileStyle.css"><tabs>
        <tab title="animalsDS" url="grids/ds/animalsSQLDS.ds.xml" canEdit="false"/>
        </tabs>
        <description>
       Tiled views can be connected to editors.  The TiledView automatically reacts to changes to the
       underlying dataset.  Change the life span of Gazelle to 2 to see it
       animate to the beginning of the list.
        </description></Example>
    <Example
        title="Custom Tiles"
        id="tilingCustomTiles"
        jsURL="grids/tiling/customTiles.js"
        cssURL="grids/tiling/tileStyle.css"><tabs>
        <tab title="animalsDS" url="grids/ds/animalsSQLDS.ds.xml" canEdit="false"/>
        </tabs>
        <description>
        You can customize the tiles in a TileGrid.  This example demonstrates adding a "Remove"
        button to each tile which, when clicked, executes a dataSource operation to remove the
        selected tile.
        </description></Example>
   
</children></ExampleFolder> 

<!-- Export -->
    <Example
        id="export"
        title="Export"
        requiresModules="SCServer"
        jsURL="grids/export.js"><tabs>
        <tab title="worldDSExport" url="grids/ds/worldSQLDSExport.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
            It's now easy to export data from a DataSource or from DataboundComponents, 
            such as <i>ListGrid</i>, <i>TreeGrid</i> and <i>TileGrid</i>.  In the example 
            below, choose an export format from the select-list, decide whether to 
            download the results or view them in a window using the checkbox and 
            click the Export button.  Because exporting to JSON is allowed only via 
            server-side custom code or via an OperationBinding (for security reasons), choosing
            <i>JSON</i> from the select-item issues the export using the operationId set up in
            the DataSource but still respects the "Show in Window" checkbox.  See the 
            <i>JS</i> and <i>worldDSExport</i> tabs below.
            <p>Try changing the filters and sort-order on the grid to see that the exported data 
            is filtered and sorted according to criteria applied to the grid.
        ]]></description></Example>

<!-- Grids > Data types-->
<ExampleFolder
    title="Data types"
    id="gridsDataTypes"
    isOpen="false"><description>
    Built-in display and editing behaviors for common data types, and how to customize them.
</description><children>
    <Example
        title="Text"
        jsURL="grids/dataTypes/text.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click on column headers to sort, or data values to edit.
        All fields in this grid are text fields.
        </description></Example>
    <Example
        title="Image"
        id="imageType"
        jsURL="grids/dataTypes/image.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        "Flag" is an image field.
        </description></Example>
    <Example
        title="Long Text"
        id="longText"
        jsURL="grids/dataTypes/longtext.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click on data values to edit.
        "Government" is a long text field with a popup editor.
        </description></Example>
    <Example
        title="Date"
        jsURL="grids/dataTypes/date.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click on column headers to sort, or data values to edit.
        "Nationhood" is a date field.
        </description></Example>        
    <Example
        title="Integer"
        jsURL="grids/dataTypes/integer.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click on column headers to sort, or data values to edit.
        "Population" is an integer field.
        </description></Example>
    <Example
        title="Decimal"
        jsURL="grids/dataTypes/decimal.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click on column headers to sort, or data values to edit.
        "GDP" is a decimal (aka float) field.
        </description></Example>
    <Example
        title="Boolean"
        jsURL="grids/dataTypes/boolean.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click on column headers to sort, or data values to edit.
        "G8" is a boolean (true/false) field.
        </description></Example>
    <Example
        title="Link (text)"
        jsURL="grids/dataTypes/linkText.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click on the values in the "Info" column to open external links.
        </description></Example>
    <Example
        title="Link (image)"
        id="linkImage"
        jsURL="grids/dataTypes/linkImage.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click on the book images in the "Info" column to open external links.
        </description></Example>
    <Example
        title="List"
        id="listType"
        jsURL="grids/dataTypes/list.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click on column headers to sort, or data values to edit.
        "Continent" is a list (aka valueMapped) field.
        </description></Example>
    <Example
        title="Calculated"
        id="calculatedCellValue"
        jsURL="grids/dataTypes/calculated.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click on column headers to sort, or data values to edit.
        "GDP (per capita)" is calculated from the "GDP" and "Population" fields.
        </description></Example>
</children></ExampleFolder>


<!-- Grids >  Data binding (combining with Data Providers for now)-->
<!-- Grids > Data providers -->
<!-- Techniques for loading data sets into a grid component from local or remote data sources. -->
<ExampleFolder
    id="gridsDataBinding"
    title="Data binding"
    isOpen="false"><description>
    How to bind grids to DataSources to share field (column) definitions with other components,
    and how to load data from local and remote data sources and services.    
</description><children>
    <Example
        title="ListGrid fields"
        id="listGridFields"
        jsURL="grids/dataBinding/fieldsGrid.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description><![CDATA[
        This <code>ListGrid</code> takes its field (column) settings from the "fields"
        property of the component definition only. This technique is appropriate for
        presentation-only grids that do not require data binding.
        ]]></description></Example>
    <Example
        title="DataSource fields"
        id="dataSourceFields"
        jsURL="grids/dataBinding/fieldsDS.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        <tab title="countryDS" url="grids/ds/countryMergeDS.ds.js"/>
        </tabs><description><![CDATA[
        This <code>ListGrid</code> takes its field (column) settings from the
        <code>countryDS</code> DataSource specified in the "dataSource" property of the
        component definition. This technique is appropriate for easy display of a shared
        data model with the default UI appearance and behaviors.
        ]]></description></Example>
    <Example
        title="Merged fields"
        id="mergedFields"
        jsURL="grids/dataBinding/fieldsMerged.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        <tab title="countryDS" url="grids/ds/countryMergeDS.ds.js"/>
        </tabs><description><![CDATA[
        This <code>ListGrid</code> merges field settings from both the component "fields"
        (for presentation attributes) and the <code>countryDS</code> DataSource (for
        data model attributes). This is the usual approach to customize the look and feel of a
        data-bound component.
        ]]></description></Example>
    <Example
        title="Inline data"
        id="inlineData"
        jsURL="grids/dataProviders/inlineData.js"><description><![CDATA[
        This <code>ListGrid</code> uses an inline data array in the component definition. This
        technique is appropriate for very small read-only data sets, typically with static data
        values.
        ]]></description></Example>
    <Example
        title="Local data"
        id="localData"
        jsURL="grids/dataProviders/localData.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description><![CDATA[
        This <code>ListGrid</code> loads data from a local data array (included in a separate
        JavaScript data file). This technique is appropriate for read-only data sets, typically
        with less than 500 records.
        ]]></description></Example>
    <Example
        title="Local DataSource"
        id="localDataSource"
        jsURL="grids/dataProviders/databound.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        <tab title="countryDS" url="grids/ds/countryLocalDS.ds.js"/>
        </tabs><description><![CDATA[
        This <code>ListGrid</code> binds to a client-only <code>DataSource</code> that loads data
        from a local data array. This technique is appropriate for client-only rapid prototyping
        when the production application will support add or update (write operations), switchable
        data providers (JSON, XML, WSDL, Java), arbitrarily large data sets (1000+ records), or
        a data model that is shared by multiple components.
        ]]></description></Example>
    <Example
        title="JSON DataSource"
        id="jsonDataSource"
        jsURL="grids/dataProviders/databound.js"><tabs>
        <tab title="countryDS" url="grids/ds/countryJSONDS.ds.xml"/>
        <tab title="countryData.json" url="grids/data/countryData.json" doEval="false" canEdit="false"/>
        </tabs><description><![CDATA[
        This <code>ListGrid</code> binds to a <code>DataSource</code> that loads data from a
        remote JSON data provider.  This approach of loading simple JSON data over HTTP can be
        used with PHP and other server technologies.
        ]]></description></Example>
    <Example
        title="XML DataSource"
        id="xmlDataSource"
        needXML="true"
        jsURL="grids/dataProviders/databound.js"><tabs>
        <tab title="countryDS" url="grids/ds/countryXMLDS.ds.xml"/>
        <tab title="countryData.xml" url="grids/data/countryData.xml" canEdit="false" doEval="false"/>
        </tabs><description><![CDATA[
        This <code>ListGrid</code> binds to a <code>DataSource</code> that loads data from a
        remote XML data provider.  This approach of loading simple XML data over HTTP can be
        used with PHP and other server technologies.
        ]]></description></Example>
    <Example
        title="WSDL DataSource"
        needXML="true"
        id="WSDLDataSource"
        jsURL="grids/dataProviders/WSDLBound.js"><tabs>
        <!-- Would be nice if we could just specify the WSDL url on a datasource that automatically
        loads the WSDL, configures its fields, and tells the component when it is ready. Currently
        WSDL binding requires different UI code, so it is not simply switchable with the other data
        providers (local, JS, XML, DMI, SmartClient). -->
        <tab title="countryDS" url="grids/ds/countryWSDLDS.ds.xml"/>
        <tab title="soapRequest.xml" url="grids/data/countrySoapRequest.xml" canEdit="false" doEval="false"/>
        <tab title="soapResponse.xml" url="grids/data/countrySoapResponse.xml" canEdit="false" doEval="false"/>
        <tab title="WSDL" url="grids/ds/SmartClientOperations.wsdl" canEdit="false" doEval="false"/>
        </tabs><description><![CDATA[
        This <code>ListGrid</code> binds to a <code>DataSource</code> that loads data via a
        WSDL service.  This example WSDL service supports all 4 basic operation types (fetch,
        add, update, remove) and can be implemented with any server technology.  Sample
        request/response SOAP messages for a "fetch" operation are shown.
        ]]></description></Example>
<!--
    <Example
        title="Java DMI DataSource"
        jsURL="grids/dataProviders/databound.js"><tabs>
        <tab title="countryDS" url="grids/ds/countryJavaDS.ds.xml"/>
        <tab title="countryData.java" url="grids/data/countryData.java" doEval="false"/>
        </tabs><description><![CDATA[
        This <code>ListGrid</code> binds to a <code>DataSource</code> that loads data from a
        remote data provider implemented as a Java class.
        ]]></description></Example>
-->
</children></ExampleFolder>


<!-- Grids >  Data operations -->
<ExampleFolder
    title="Data operations"
    isOpen="false"><description>
    Basic operations on datasets, both local and remote.
</description><children>
    <Example
        title="Local set"
        visibility="sdk"
        jsURL="grids/dataOperations/localSet.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click the buttons to populate the grid with records from a local data set.
        </description></Example>
    <Example
        title="Local add"
        visibility="sdk"
        jsURL="grids/dataOperations/localAdd.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click the buttons to add records to the top and bottom of the list.
        </description></Example>
    <Example
        title="Local remove"
        visibility="sdk"
        jsURL="grids/dataOperations/localRemove.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Click "Remove first" to remove the first record in the list. Click the other buttons to
        remove records based on your selection (click, Ctrl-click, or
        Shift-click in the list to select records).
        </description></Example>
    <Example
        title="Local update"
        visibility="sdk"
        jsURL="grids/dataOperations/localUpdate.js"><tabs>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description><![CDATA[
        Click to select any record in the list, then click one of the buttons to change
        the "Continent" value for that record. Also see the <b>Grids > Editing</b> examples
        for automatic update behavior.
        ]]></description></Example>
    <Example
        title="Databound fetch"
        id="databoundFetch"
        jsURL="grids/dataOperations/databoundFetch.js"><tabs>
        <tab title="worldDS" url="grids/ds/worldSQLDS.ds.xml" canEdit="false" />
        </tabs><description>
        Click the buttons to fetch (exact match) country records from the server.
        Click the "Fetch All" button to fetch the first "page" of 50 records, then scroll
        the grid to fetch new pages of data on demand.
        </description></Example>
    <Example
        title="Databound filter"
        id="databoundFilter"
        jsURL="grids/dataOperations/databoundFilter.js"><tabs>
        <tab title="worldDS" url="grids/ds/worldSQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        Click the buttons to filter (partial match) records from the server. Also see the
        <b>Grids &gt; Sort &amp; filter &gt; Filter</b> example for automatic databound Filter
        operations triggered by user input.
        ]]></description></Example>
    <Example
        title="Databound add"
        id="databoundAdd"
        jsURL="grids/dataOperations/databoundAdd.js"><tabs>
        <tab title="worldDS" url="grids/ds/worldSQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        Click the "Add new country" button to create a new country record on the server.
        Also see the <b>Grids &gt; Editing &gt; Enter new rows</b> example for automatic databound
        Add operations triggered by user input.
        ]]></description></Example>
    <Example
        title="Databound remove"
        id="databoundRemove"
        jsURL="grids/dataOperations/databoundRemove.js"><tabs>
        <tab title="worldDS" url="grids/ds/worldSQLDS.ds.xml" canEdit="false" />
        </tabs><description>
        Click "Remove first" to remove (delete) the first record in the list from the server.
        Click the other buttons to remove records based on your selection (click, Ctrl-click, or
        Shift-click in the list to select records).
        </description></Example>
    <Example
        title="Databound update"
        id="databoundUpdate"
        jsURL="grids/dataOperations/databoundUpdate.js"><tabs>
        <tab title="worldDS" url="grids/ds/worldSQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        Click to select any record in the list, then click one of the buttons to change
        the "Continent" value for that record on the server. Also see the <b>Grids &gt; Editing</b>
        examples for automatic databound Update operations triggered by user input.
        ]]></description></Example>
</children></ExampleFolder>
  
<!-- exists to make it more likely for sexier demos to be found on public website -->
<ExampleFolder title="Service Integration" ref="dataIntegration"
               visibility="none"/>

</children></ExampleFolder> <!-- closing parent folder: Grids -->


<ExampleFolder
    title="Trees"
    showSkinSwitcher="true"
    isOpen="false"
    icon="[ISO_DOCS_SKIN]/images/silkicons/chart_organisation.png"><description>
    High-performance interactive tree views
    &lt;BR&gt;
    &lt;BR&gt;
    Trees are based on grid views, and so share all of the appearance, interactivity and
    databinding features of grids, in addition to tree-specific features.
</description>
<children>

    <ExampleFolder title="Appearance" isOpen="false"><description>
        Trees can have dynamic titles, display multiple columns and show connector
        lines.
    </description><children>
        <Example title="Node Titles" id="nodeTitles" dataSource="employees"
            jsURL="trees/appearance/nodeTitles.js">
            <description>
            Formatter interfaces allow you to add custom tree titles.
            </description></Example>
        <Example title="Multiple Columns" dataSource="employees"
                 jsURL="trees/appearance/multipleColumns.js"><description>
            Trees can show multiple columns of data for each node.  Each column has the
            styling, formatting, and data type awareness features of columns in a normal
            grid.

            Try drag reordering columns, or sorting by the Salary field.
            </description></Example>
        <Example title="Connectors" id="connectors" jsURL="trees/appearance/connectors.js"
                 dataSource="employees"
                 cssURL="trees/appearance/connectors.css">
        <description>
            Trees can show skinnable connector lines. Toggle the checkbox to show or hide "full"
            connector lines.
        </description>
        <badSkins>BlackOps</badSkins>
        <badSkins>SilverWave</badSkins>
        <bestSkin>TreeFrog</bestSkin></Example>
    </children></ExampleFolder> 

    <ExampleFolder title="Dragging" isOpen="false"><description>
        Trees have built-in drag and drop behaviors and tree-specific events.
    </description><children>
        <Example id="treeDragReparent"
            title="Drag reparent" jsURL="trees/interaction/dragReparent.js">
            <tabs><tab name="employeeData" url="trees/employeeData.js"/></tabs>
            <description>
            Try dragging employees under new managers.  Note that a position indicator line
            appears during drag, allowing employees to be placed in a particular order.
            </description></Example>
        <Example title="Drag nodes" ref="dragTree"/>
        <Example title="Springloaded Folders" ref="treeDragReparent"><description>
            Try dragging employees under new managers.  Note that closed folders automatically
            open if you hover over them momentarily.
            </description></Example>
        <Example title="Drop Events" id="treeDropEvents" jsURL="trees/interaction/dropEvents.js">
            <tabs>
                <tab name="supplyCategory" dataSource="supplyCategory"/>
                <tab name="supplyItem" dataSource="supplyItem"/>
            </tabs>                
            <description>
            Click on any category on the left to show items from that category on the right.  
            Drag and drop items from the list on the right into new categories in the tree on
            the left.
            </description></Example>
    </children></ExampleFolder> 

    <Example title="Cascading Selection"
             id="cascadingSelection"
             jsURL="trees/cascadingSelection.js"><description>
        Tree selection can be automatically propagated up and down the tree. Select a
        parent or child node to see how other nodes are affected.
        </description></Example>

    <ExampleFolder id="treesDataBinding" title="Data binding" isOpen="false"><description>
        Trees can bind to DataSources and handle all the data formats that grids can, using
        additional properties to control tree structure, open state, and folderness.
    </description><children>
        <Example title="Parent Linking"
                 id="parentLinking"
                 jsURL="trees/dataBinding/parentLinking.js"><description>
            Tree data can be specified as a flat list of nodes that refer to each other by
            ID.  This format is also used for load on demand.
            </description></Example>
        <Example title="Children Arrays"
                 id="childrenArrays"
                 jsURL="trees/dataBinding/childrenArrays.js"><description>
            Tree data can be specified as a tree of nodes where each node lists its children.
            </description></Example>
        <Example title="Load XML (Parent Linked)" jsURL="trees/dataBinding/loadXMLParentLinked.js">
            <tabs>
              <tab title="employeesXMLData" url="trees/dataBinding/employeesDataParentLinked.xml" canEdit="false" doEval="false"/>
            </tabs>
            <description><![CDATA[
            Tree data can be loaded in XML or JSON format.  For a "parent-linked" Tree, the
            <code>primaryKey</code> and <code>foreignKey</code> declarations in the DataSource
            control how nodes are linked together to form the tree structure.
            ]]>
            </description></Example>
        <Example title="Load XML (Child Arrays)" id="treeLoadXML" needXML="true" 
                 jsURL="trees/dataBinding/loadXMLChildrenArrays.js">
            <tabs>
              <tab title="employeesXMLData" url="trees/dataBinding/employeesDataChildrenArrays.xml" canEdit="false" doEval="false"/>
            </tabs>
            <description><![CDATA[
            Tree data can be loaded in XML or JSON format.  For a "children arrays" Tree, one
            DataSource field is marked <code>childrenProperty:true</code>, and the children of
            a node are expected to appear under the same-named XML element or JSON property.
            ]]>
            </description></Example>
        <Example title="Load on Demand" jsURL="trees/dataBinding/loadOnDemand.js"
                 dataSource="employees"><description>
            Begin opening folders and note the prompt which briefly appears during server
            fetches.  Trees can load data one folder at a time.  When a folder is opened for the first
            time, the tree asks the server for the children of the node just opened by passing
            the unique id of the parent as search criteria.
            </description></Example>
        <Example title="Initial Data &amp; Load on Demand"
                 id="initialData"
                 jsURL="trees/dataBinding/initialDataLOD.js"
                 dataSource="employees"><description>
            Begin opening folders and note the load on demand behavior.
            
            Trees that use load on demand can optional specify an initial dataset set up front.  
            </description></Example>
<!--
        <Example title="Filtering" jsURL="trees/dataBinding/initialDataLOD.js"
                 dataSource="employees"><description>
            Trees datasets can be filtered just like list datasets.  The tree below shows only
            full time employees.
            </description></Example>
-->
    </children></ExampleFolder>

    <Example title="Sorting" jsURL="trees/sorting.js" dataSource="employees">
        <description>
        Trees sort per folder.  Click on the "Name" column header to sort alphabetically by
        folder name, or on the "Salary" column header to sort by Salary.
    </description></Example>

    <Example title="Editing" id="treesEditing" dataSource="employees"
             jsURL="trees/editing.js"><description>
        Click on employees in the tree to edit them, and drag and drop employees to rearrange them.
        Choose an employee via the menu to see that employee's direct reports in the ListGrid.  Changes
        made in the tree or ListGrid are automatically saved to the server and reflected in the other
        components.
    </description></Example>

    <Example title="Frozen Columns" id="freezeTree" dataSource="employees"
             jsURL="trees/freezeTree.js">
     <description><![CDATA[
     Setting <code>frozen:true</code> enables frozen columns for Trees.  Columns
     can be frozen and unfrozen by right-clicking on column headers.<br>
     Column resize, column reorder, drag and drop and load on demand all function normally.
     ]]></description></Example>

    <Example title="Miller Columns" id="millerColumns" dataSource="employees"
             jsURL="trees/millerColumns.js"><description><![CDATA[
        The <code>ColumnTree</code> provides an alternate navigation paradigm for Tree data,
        sometimes called "Miller Columns" and seen in Apple&trade; iTunes&trade;.
        The <code>ColumnTree</code> provides identical data binding and load on demand facilities to
        normal <code>TreeGrids</code>.
        ]]></description></Example>
    
</children></ExampleFolder> <!-- closing parent folder: Trees -->

<!-- Cubes -->
<ExampleFolder
    title="Cubes"
    id="cubeGrid"
    icon="[ISO_DOCS_SKIN]/images/cube_blue.png"
    isOpen="false"><description>
    Multidimensional "cube" data sets as used in BI, Analytics and OLAP applications.
    Load-on-demand, drill-down, roll-up, in-browser dataset pivoting, multiple frozen panes, 
    resizing and reorder of fields, tree dimensions, chart generation, editing and other
    features.
</description><children>
    <Example
        title="Basic Cube"
        id="basicCube"
        requiresModules="Analytics"
        jsURL="cubes/basicCube.js"><tabs>
        <tab title="productData" url="cubes/productData.js"/>
        </tabs><description><![CDATA[
        In this multi-dimensional dataset, each cell value has a series of attributes,
        called "facets", that appear as stacked headers labelling the cell value. 
        ]]></description></Example>
    <Example title="Analytics" ref="analytics" requiresModules="Analytics"/>
</children></ExampleFolder>

<!-- ComboBox & Family -->
<ExampleFolder
    title="ComboBox &amp; Family"
    id="comboBoxAndFamily"
    icon="[ISO_DOCS_SKIN]/images/cube_blue.png"
    isOpen="false"><description>
</description><children>
    <Example title="Data Binding" ref="listComboBox"/>
    <Example title="Related Records" ref="relatedRecords"/>
    <Example title="Format Related Value" id="formatRelatedValue" 
            jsURL="combobox/formatRelatedValue.js" dataSource="employees">
        <description><![CDATA[
        When using an optionDataSource to allow a user to select a record from
        a related DataSource, you can show a formatted value based on multiple 
        fields in the related record.
        ]]></description>
    </Example>
    <Example title="Dependent Selects" ref="formDependentSelects"/>
    <Example title="Dropdown Grid" id="dropdownGrid" 
            jsURL="combobox/dropDownGrid.js">
        <tabs>
            <tab title="supplyItem" url="supplyItem.ds.xml"/>
        </tabs>
        <description><![CDATA[
        The SelectItem displays multiple fields in a ListGrid.
        You can scroll to dynamically load more records.
        This pattern works with any DataSource.
        ]]></description>
    </Example>
    <Example title="Format Dropdown" id="formatDropdown" 
            jsURL="combobox/formatDropDown.js" dataSource="employees">
        <description><![CDATA[
        The dropdown list supports formatting APIs that can use multiple fields
        from related records.
        ]]></description>
    </Example>
    <Example title="Multi-Field Search" ref="filterRelated"/>
    <Example title="Multi-Select" id="multiSelect"
        jsURL="combobox/multiSelect.js">
        <description>Demonstration of SelectItems with multiple selections.</description>
    </Example>
    <Example title="Styled ComboBox" ref="comboBoxStyled"/>
</children></ExampleFolder>



<!-- Forms -->
<ExampleFolder title="Forms" isOpen="false" icon="[ISO_DOCS_SKIN]/images/silkicons/vcard_edit.png"><description>
    Form managers and input controls.
</description><children>

    <ExampleFolder title="Layout" isOpen="false" id="formsLayout" ><description>
        A specialized form layout manager allows your forms to grow into available space,
        hide sections, and span across tabs.
    </description><children>
        <Example title="Titles" jsURL="forms/layout/titles.js" id="formLayoutTitles"><description>
            Click on "Swap Titles" to change title orientation.
            
            Form layout automatically places titles next to fields.  Left-oriented titles take
            up a column so that labels line up.  Top oriented titles don't.
            </description></Example>
        <Example title="Spanning" id="columnSpanning" jsURL="forms/layout/spanning.js"><description>
            Drag resize the form from the right edge to see the effect of spanning.
            
            Specifying column widths and column spanning items allows for larger and smaller
            input areas.
            </description></Example>
        <Example title="Filling"
                 id="formLayoutFilling"
                 jsURL="forms/layout/filling.js"><description>
            Click on the "Short Message" and "Long Message" buttons to change the amount of
            space available to the form.
            
            SmartClient form layouts allow you to fill available space, even when
            available space cannot be known in advance because it is data-dependant.
            </description></Example>
        <Example title="Splitting"
                 id="formSplitting"
                 jsURL="forms/layout/valuesManager.js"
                 xmlURL="ValuesManager.xml"
                 showSkinSwitcher="true"><description>
            Click "Submit" to jump to a validation error in the "Stock" tab.
            
            Forms which are split for layout purposes can behave like a single logical form for
            validation and saves.
            &lt;BR&gt;&lt;BR&gt;JS and XML tabs show two alternative versions of source, only one is
                required.
            </description></Example>
        <Example title="Sections"
                 id="formSections"
                 jsURL="forms/layout/sectionItem.js"
                 xmlURL="SectionItem.xml"
                 showSkinSwitcher="true"><description>
            Click on "Stock" to reveal fields relating to stock on hand.
            &lt;BR&gt;&lt;BR&gt;JS and XML tabs show two alternative versions of source, only one is
                required.
            </description></Example>

        <Example ref="validationFieldBinding" title="Data Binding"/>
    </children></ExampleFolder>

    <ExampleFolder title="Field Dependencies" isOpen="false"><description>
        Common field dependencies within a form, such as fields that are only applicable to
        some users, can be handled by specifying simple expressions.
    </description><children>
        <Example title="Show &amp; Hide" jsURL="forms/fieldDependencies/showAndHide.js" id="formShowAndHide"><description>
            Select "On order" to reveal the "Shipping Date" field.
            </description></Example>
        <Example id="fieldEnableDisable" title="Enable &amp; Disable" 
         jsURL="forms/fieldDependencies/enableAndDisable.js"><description>
            Check "I accept the agreement" to enable the "Proceed" button.
            </description></Example>
        <Example title="Conditionally Required"
                 id="conditionallyRequired" jsURL="forms/fieldDependencies/conditionallyRequired.js"><description>
            Select "No" and click the "Validate" button - the reason field becomes required.
            </description></Example>
        <Example title="Match Value"
                 id="matchValue"
                 jsURL="forms/fieldDependencies/matchValue.js"><description>
            Try entering mismatched values for "Password" and "Password Again", then click
            "Create Account" to see a validation error.
            </description></Example>
        <Example title="Dependent Selects"
                 id="formDependentSelects"
                 jsURL="forms/fieldDependencies/dependentSelects.js">
            <tabs>
                <tab name="supplyItem" dataSource="supplyItem"/>
                <tab name="supplyCategory" dataSource="supplyCategory"/>
            </tabs>
            <description><![CDATA[
            <p />
            In the first example, select a "Division" to cause the "Department" select to be 
            populated with departments from that division.
            <p />
            The second example demonstrates two select items, both of which load data on the fly from
            a DataSource, where the "Category" drop-down controls the list of available items
            in the "Item" drop-down.  Try selecting a value in the "Category" drop-down list to change the set of options 
            available in the "Item" drop-down.]]>
            </description></Example>

    </children></ExampleFolder>

    
    <ExampleFolder title="Form Controls" isOpen="false"><description>
        The form has built-in editors and pickers for common types such as numbers and dates,
        as well as the ability to use the databinding framework to pick from lists and trees of
        related records.
    </description><children>
        <Example title="Text" id="textItem" jsURL="forms/dataTypes/text.js" xmlURL="TextItem.xml">
            <description>
                JS and XML tabs show two alternative versions of source, only one is
                required.
            </description></Example>
        <Example title="Text - Masked" id="maskedTextItem" descriptionHeight="350"
                 jsURL="forms/dataTypes/maskedTextItem.js"><description><![CDATA[
            <p>TextItems support a masked entry to restrict and format entry.</p>
            <p>Overview of available mask characters</p>
            <p><table class="normal">
            <tr>
                <th>Character</th>
                <th>Description</th>
            </tr>
            <tr>
                <td>0</td>
                <td>Digit (0 through 9) or plus [+] or minus [-] signs</td>
            </tr>
            <tr>
                <td>9</td>
                <td>Digit or space</td>
            </tr>
            <tr>
                <td>#</td>
                <td>Digit</td>
            </tr>
            <tr>
                <td>L</td>
                <td>Letter (A through Z)</td>
            </tr>
            <tr>
                <td>?</td>
                <td>Letter (A through Z) or space</td>
            </tr>
            <tr>
                <td>A</td>
                <td>Letter or digit</td>
            </tr>
            <tr>
                <td>a</td>
                <td>Letter or digit</td>
            </tr>
            <tr>
                <td>C</td>
                <td>Any character or space</td>
            </tr>
            <tr>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td>&lt;</td>
                <td>Causes all characters that follow to be converted to lowercase</td>
            </tr>
            <tr>
                <td>&gt;</td>
                <td>Causes all characters that follow to be converted to uppercase</td>
            </tr>
            </table></p>
            <p>Any character not matching one of the above mask characters or that is
            escaped with a backslash (\) is considered to be a literal.</p>
            <p>Custom mask characters can be defined by standard regular expression
            character set or range. For example, a hexadecimal color code mask could be:
            <UL>
                <LI>Color: \#>[0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F]</LI>
            </UL></p>
            ]]></description></Example>
        <Example title="TextArea" id="textAreaItem" jsURL="forms/dataTypes/textAreaItem.js" xmlURL="TextAreaItem.xml">
            <description>
                JS and XML tabs show two alternative versions of source, only one is
                required.
            </description></Example>
        <Example title="Date" id="dateItem" jsURL="forms/dataTypes/dateItem.js" xmlURL="DateItem.xml">
            <description>
            DateItems support direct or pickList-based input of dates, and have a built-in
            pop-up day picker.
            &lt;BR&gt;&lt;BR&gt;JS and XML tabs show two alternative versions of source, only one is
             required.
            </description></Example>
        <Example title="Time" id="timeItem" jsURL="forms/dataTypes/timeItem.js" xmlURL="TimeItem.xml">
            <description>
            TimeItem supports text-based input of Times.
            &lt;BR&gt;&lt;BR&gt;JS and XML tabs show two alternative versions of source, only one is
             required.
            </description></Example>

        <Example title="Number - Spinner"
                 id="spinnerItem"
                 jsURL="forms/dataTypes/numberSpinner.js"><description>
            Click the up and down buttons to change shoe size.  Click and hold to change shoe
            size quickly.  Note spinner stops at a maximum and minimum value.
            </description></Example>
        <Example title="Number - Slider"
                 id="sliderItem"
                 jsURL="forms/dataTypes/numberSlider.js"><description>
            Change the value by clicking and dragging the thumb, clicking on the track, or
            using the keyboard. 
            </description></Example>

        <Example title="Boolean - Checkbox"
                 id="checkboxItem"
                 jsURL="forms/dataTypes/checkboxItem.js"
                 xmlURL="CheckboxItem.xml">
            <description>
            JS and XML tabs show two alternative versions of source, only one is
             required.     
            </description></Example>

        <Example title="List - Select"
                 id="selectItem"
                 jsURL="forms/dataTypes/listSelect.js"><description>
            Note the icons and customized text styling.  Click to reveal the options and note
            the drop shadow.  
            
            The SmartClient SelectItem offers more powerful and consistent control over
            appearance and behavior than the HTML &amp;lt;SELECT&amp;gt; element.
            </description></Example>
        <Example id="listComboBox" title="List - Combo Box"
                 jsURL="forms/dataTypes/listComboBox.js" dataSource="supplyItem"><description>
            Start typing in either field to see a list of matching options.  The field
            labelled "Item Name" retrieves options dynamically from the SupplyItem
            DataSource
            </description></Example>
        <Example id="comboBoxStyled" title="Combo Box - Styled"
                 jsURL="forms/dataTypes/comboBoxStyled.js" dataSource="supplyItem"><description>
           Combo box rows can be styled via html to display data in almost any 
           way imaginable. Row hovers are also customized in this example.
        </description></Example>
        <Example id="relatedRecords" title="List - Related Records" showSkinSwitcher="true"
                 jsURL="forms/dataTypes/relatedRecords.js" dataSource="supplyItem"><description>
            Open the picker in either form to select the item you want to order from the
            "supplyItem" DataSource.  The picker on the left stores the "itemId" from the
            related "supplyItem" records.  The picker on the right stores the "SKU" while
            displaying multiple fields.  You can scroll to dynamically load more records.  
            This pattern works with any DataSource.  
            </description></Example>
            
        <Example id="filterRelated" title="List - Multi-Field Search" showSkinSwitcher="true"
                 jsURL="forms/dataTypes/filterPickList.js" dataSource="supplyItem" descriptionHeight="150"><description>
            Click on the SelectItem on the left to see the full set of data. You can enter filter
            criteria directly on the drop-down list in either field to filter the set of
            options down to a managable size.&lt;P&gt;
            Now move focus to the ComboBoxItem and start typing. The set of options displayed are
            automatically filtered against both fields as you type. Tab or Enter keypress will complete selection.
            </description></Example>

        <Example title="Color" id="colorItem" jsURL="forms/dataTypes/colorItem.js" xmlURL="ColorItem.xml"><description>
            ColorItems support direct input of HTML color values (in the form #RRGGBB), or 
            selection of colors via a ColorPicker widget.
            &lt;BR&gt;&lt;BR&gt;JS and XML tabs show two alternative versions of source, only one is
             required.
            </description></Example>
        
        <Example title="Tree"  jsURL="forms/dataTypes/pickTree.js" xmlURL="PickTree.xml" id="pickTree" showSkinSwitcher="true"
                 dataSource="supplyCategory"><description>
            Click on "Department" or "Category" below to show hierarchical menus.  The
            "Category" menu loads options dynamically from the SupplyCategory DataSource.
            &lt;BR&gt;&lt;BR&gt;JS and XML tabs show two alternative versions of source, only one is
             required.
            </description></Example>

        <Example title="List - Select Other" visibility="sdk" 
                 xmlURL="SelectOtherItem.xml"><description>
            Select "Other.." from the drop down to enter a custom value.
            &lt;BR&gt;&lt;BR&gt;This example source is written in XML. 
            SmartClient supports code written directly in JavaScript, or in this declaritive XML
            format.
            </description></Example>
        <Example ref="RichTextEditor" title="HTML"/> 
        <!--
        <Example id="fckEditor" title="fckEditor" jsURL="extending/fckEditorTest.js" requiresModules="Fckeditor">
            <description>
                Third party ajax components can be integrated into smartclient and used within
                smartclient components. In this example, the fckEditor component is integrated
                into DynamicForm, allowing the fckEditor to be a valid form field.
            </description>
            
        </Example>
	-->
	    <Example title="CanvasItem" jsURL="forms/dataTypes/canvasItem.js" dataSource="countryDS" id="canvasItem">
	        <description>
                A special type of form control called a CanvasItem allows any kind of SmartClient widget to
                participate in form layout and values management.
                &lt;P&gt;
                Drag resize the form - notice how the embedded ListGrid fills the available space.
                &lt;P&gt;
                The embedded ListGrid starts out showing the initial value provided to the form ("Germany").
                Click the button titled "Set Value: France" to provide a new value to the form, causing the
                CanvasItem to display this value.
                &lt;P&gt;
                Click on any country in the list - the form picks up the value and fires standard change
                events, causing new values to be displayed in a Label.
                &lt;P&gt;
                This CanvasItem provides functionality similar to an HTML &lt;select&gt;, however, because it's
                based on a ListGrid, any ListGrid behavior could be added: data paging, drag and drop, hovers,
                inline search, inline editing, grouping, etc.
	        </description>
	    </Example>
	    <Example title="CanvasItem - Nested Editor"
	        jsURL="forms/dataTypes/nestedEditing.js"
	        id="nestedEditor">
	        <description>
                This example shows a reusable CanvasItem that edits nested data structures.
                &lt;P&gt;
                Here, a Hibernate entity representing an Order contains OrderItems - in the
                Record for
                an Order, value of the field "items" in an Array of Records representing OrderItems.
                &lt;P&gt;
                The CanvasItem embeds an editable ListGrid to provide an editing interaction for the
                OrderItems right in the midst of the form.  It can be used with any DataSource that
                has nested records.
	        </description>
	        <tabs>
                <tab title="masterDetail_orderHB" dataSource="masterDetail_orderHB" canEdit="false"/>
                <tab name="masterDetail_orderItem" dataSource="masterDetail_orderItemHB" canEdit="false" />
            </tabs>
	    </Example>
    </children></ExampleFolder>

    <ExampleFolder title="Validation" isOpen="false" ref="validation"/>

    <ExampleFolder title="Details" isOpen="false"><description>
        Hovers and hints explain the form to the user.  Icons provide an easy extension point
        for help, custom pickers and other extensions.  KeyPress filtering allows character
        casing to be forced on entry or invalid keystrokes to be ignored.
    </description><children>
        <Example title="Icons" id="formIcons" jsURL="forms/layout/icons.js"><description>
            Click on the help icon below to see a description for severity levels.  Form items
            can show an arbitrary number of icons to do whatever you need.
            </description></Example>
        <Example title="Hovers" jsURL="forms/details/hovers.js" id="itemHoverHTML"><description>
            Hover anywhere over the field to see what the current value means.  Change the
            value or disable the field to see different hovers.  Note that the hovers contain
            HTML formatting.  
            </description></Example>
        <Example title="Hints" id="formHints" jsURL="forms/layout/hints.js"><description>
            Hints provide guidance to the user filling out the form.  In this case, the MM/YYYY
            hint tells the user the expected format for the free-form date field. Note both
            trailing and in-field styles are shown.
            </description></Example>
        <Example title="KeyPress Filters" id="formFilters" 
                 jsURL="forms/details/filters.js"><description>
            KeyPress filters help prevent the user from entering invalid characters.
            Additionally, character casing can be forced to either upper or lowercase.
            </description></Example>
    </children></ExampleFolder>

</children></ExampleFolder>

<!-- Calendars -->
<ExampleFolder title="Calendars" isOpen="false" showSkinSwitcher="true" icon="[ISO_DOCS_SKIN]/images/silkicons/cal.png">
<description>Customizable calendars that display events in day, week, and month views.</description>
<children>
    <Example id="simpleCalendar" title="Simple Calendar" jsURL="calendar/simpleCalendar.js" 
        cssURL="calendar/calendar.css" requiresModules="Calendar">
        <tabs>
            <tab title="eventData" url="calendar/calendarData.js"/>
        </tabs>
        <description>
            This calendar is bound to an array of event data. Drag events to alter their start times, and
            resize events to alter their durations. Click and drag in an empty cell to create new events,
            or click on an existing event to edit it. Notice how the red event can't be edited; This was 
            specified within the event data itself (see the 'eventData' tab below).
        </description>
    </Example>
    <Example id="databoundCalendar" title="Databound Calendar" jsURL="calendar/databoundCalendar.js" 
        cssURL="calendar/calendar.css" requiresModules="Calendar">
        <tabs>
            <tab title="eventData" url="calendar/calendarData.js"/>
        </tabs>
        <description>
            This calendar is bound to a dataSource. Drag events to alter their start times, and
            resize events to alter their durations. Click and drag in an empty cell to create new events,
            or click on an existing event to edit it. Notice how the red event can't be edited; This was 
            specified within the event data itself (see the 'eventData' tab below).
        </description>
    </Example>
    <Example id="compactCalendar" title="Compact Calendar" jsURL="calendar/compactCalendar.js" 
         requiresModules="Calendar">
        <tabs>
            <tab title="eventData" url="calendar/calendarData.js"/>
        </tabs>
        <description>
            Hover over the days with the check icon in them to see the events for those days.
            Use the 'next' and 'previous' arrows to change months.
        </description>
    </Example>
    <Example id="workdayCalendar" title="Workday Calendar" jsURL="calendar/workdayCalendar.js" 
        cssURL="calendar/calendar.css" requiresModules="Calendar">
        <tabs>
            <tab title="eventData" url="calendar/calendarData.js"/>
        </tabs>
        <description>
            The calendar can focus in on workday hours, giving a clearer view of events that occur
            durring the work day. The boundaries of the workday itself can also be customized.
        </description>
    </Example>
    <Example id="customCalendar" title="Custom Event Editing" jsURL="calendar/customEventEditing.js" 
        cssURL="calendar/calendar.css" requiresModules="Calendar">
        <tabs>
            <tab title="eventData" url="calendar/calendarData.js"/>
        </tabs>
        <description>
            Click in an empty cell or in an event to see custom fields in the quick event editor and in 
            the full event editor. Notice how the red event can't be edited; This was 
            specified within the event data itself (see the 'eventData' tab below).
        </description>
    </Example>
    <Example id="eventAutoArrange" title="Event Auto-Arranging" jsURL="calendar/eventAutoArrange.js" 
        cssURL="calendar/calendar.css" requiresModules="Calendar">
        <tabs>
            <tab title="eventOverlapData" url="calendar/calendarOverlapData.js"/>
        </tabs>
        <description>
            The calendar can automatically arrange events that share time so that each is always
            fully visible at its proper location.  Drag one event onto or away from another to 
            see the effect.
        </description>
    </Example>
    <Example id="eventOverlapping" title="Event Overlapping" jsURL="calendar/eventOverlapping.js" 
        cssURL="calendar/calendar.css" requiresModules="Calendar">
        <tabs>
            <tab title="eventOverlapData" url="calendar/calendarOverlapData.js"/>
        </tabs>
        <description>
            When eventAutoArrange is true, you can have the Calendar overlap concurrent 
            events slightly.  The zorder is from left to right and the overlap-size is a 
            percentage of event-width (see the "JS" tab).  If two events start at exactly the 
            same time, the default behavior is to reject the overlap to avoid the first event's 
            close button from being hidden by the second event (see the "JS" tab).  You can see
            this by dropping one event onto the start-time of another below.
        </description>
    </Example>
    </children>
</ExampleFolder>

<!-- Layout -->
<ExampleFolder title="Layout" isOpen="false" icon="[ISO_DOCS_SKIN]/images/silkicons/application_side_list.png"><description>
    Liquid layout managers and user interface containers.
</description><children>
    <Example title="Filling" jsURL="forms/layout/filling.js"><description>
        Click on the "Short Message" and "Long Message" buttons to change the amount of
        space available to the form.
        
        Layouts automatically react to resizes and re-apply the layout policy.
        </description></Example>
    <Example title="Nesting"
             id="layoutNesting"
             jsURL="layout/nesting.js"
             showSkinSwitcher="true"><description>
        Use the resize bars to reallocate space between the 3 panes.
        
        Layouts can be nested to create standard application views.  Resize bars are built-in.
        </description></Example>
    <Example title="User Sizing" id="userSizing" jsURL="layout/userSizing.js"><description>
        Resize the outer frame to watch "Member 1" and "Member 2" split the space.  Now resize
        either member and resize the outer frame again.
        
        Layouts track sizes which have been set by user action and respect the user's settings.
        </description></Example>
    <Example title="Center Align" id="layoutCenterAlign" jsURL="layout/centerAlign.js">
        <descriptionHeight>160</descriptionHeight>
        <description>
          <![CDATA[
            <p>
              To center components within layouts, set <code>layout.align</code> to center along the
              <i>length</i> axis (vertical axis for a <code>VLayout</code>, horizontal axis for an 
              <code>HLayout</code>).
            </p><p>
              To center along the <i>breadth</i> axis (horizontal axis for an <code>VLayout</code>, 
              vertical axis for an <code>HLayout</code>), set <code>member.layoutAlign</code> on each 
              member that should be centered, or set <code>layout.defaultLayoutAlign</code> to center 
              all members.
            </p><p>
              Combine both settings to center along both axes.
            </p><p>
              You can also use LayoutSpacers to center components.  This is particularly useful if you
              have a layout where you want to center something in the <i>remaining space</i> after other
              components have taken the space they require.
            </p>
          ]]>
        </description>
    </Example>
	<Example
        title="Snap To"
        id="snapTo"
        jsURL="layout/snapto.js">
		<description>
		<![CDATA[
        <p>
        Snap-to positioning can be used to place components along a specific edge or corners of a 
		container, or centered in the container. <code>snapEdge</code> allows you to attach a 
		corner or edge of a component to a corner or edge of another component, and 
		<code>snapOffsetLeft/Top</code> allows you to place components at a specific pixel or 
		percentage offset relative to a snap position. 
		</p><p>
		Drag resize the containers below to see a variety of snap-to positioning behaviors. 
		</p>
		]]>
        </description>
	</Example>
	 <Example
        title="Snap-to-grid Dragging"
        id="dragSnapTo"
        showSkinSwitcher="true"
        jsURL="dragdrop/dragSnapTo.js"><description>
        Drag the box around the grid. It will snap into alignment according to the values you 
        set in the radio buttons below. Snap-to-grid dragging can be enabled separately for 
        moving and resizing; toggle the checkboxes to see this working.
        </description>
		</Example>
    <ExampleFolder title="Form Layout" ref="formsLayout" icon="[ISO_DOCS_SKIN]/images/silkicons/vcard_edit.png"/>

    <ExampleFolder title="Windows" isOpen="false" showSkinSwitcher="true" icon="[ISO_DOCS_SKIN]/images/silkicons/application_cascade.png">
    <description>
        Windows for dialogs, wizards, tools and free-form application layouts.
    </description><children>
        <Example title="Auto Size" 
                 id="windowAutosize"
                 jsURL="layout/window/autoSize.js"><description>
            Windows can autoSize to content or can dictate the content's size.
            </description></Example>
        <Example title="Modality" ref="modality"/>
        <Example title="Dragging" jsURL="layout/window/dragging.js"><description>
            Grab the window by its title bar to move it around.  Resize it by the right or
            bottom edge.
            </description></Example>
        <Example title="Minimize" ref="windowMinimize"/>
        <Example title="Header Controls"
                 id="windowHeaderControls"
                 jsURL="layout/window/controls.js"><description>
            Header controls can be reordered and custom controls added.
            </description></Example>
        <Example title="Footer"
                 id="windowFooter"
                 jsURL="layout/window/footer.js"><description>
            Windows support a footer with a visible resizer and updateable status bar.
            </description></Example>
    </children></ExampleFolder>

    <ExampleFolder title="Tabs" isOpen="false" showSkinSwitcher="true" icon="[ISO_DOCS_SKIN]/images/silkicons/tab.png">
    <description>
        Tabs for sectioning applications and forms.
    </description><children>
        <Example title="Orientation"
                 id="tabsOrientation"
                 jsURL="layout/tabs/orientation.js"><description>
            Tabs can be horizontally or vertically oriented.  To select tabs, click on them, or
            on click the "Select Blue" and "Select Green" buttons.
            </description></Example>
        <Example title="Align" id="tabsAlign" jsURL="layout/tabs/align.js"><description>
            Tabs can be left or right aligned (for horizontal tabs) or top or bottom aligned
            (for vertical tabs)
            </description></Example>
        <Example title="Add and Remove"
                 id="tabsAddAndRemove"
                 jsURL="layout/tabs/addAndRemove.js"><description>
            Click on "Add Tab" and "Remove Tab" to add and remove tabs.   When you add too many
            tabs to display at once, a tab scrolling interface will appear.
            </description></Example>
        <Example title="Closeable Tabs"
                 id="closeableTabs"
                 jsURL="layout/tabs/closeableTabs.js"><description>
            Click on the red close icons to close tabs.  Tabbed views can have any mixture of
            closeable and permanent tabs.
            </description></Example>
        <Example title="Title Change"
                 id="titleChange"
                 jsURL="layout/tabs/titleChange.js"><description>
            Titles can be changed on the fly.  Type in your name to see the "Preferences" tab
            change its title to include your name.  Note that the tab automatically sizes to
            accommodate the longer title - automatic sizing also happens at initialization.
            </description></Example>
        <Example title="User-Editable Titles"
                 id="userEditableTitles"
                 jsURL="layout/tabs/userEditableTitles.js"><description><![CDATA[
            Optionally, titles can be directly edited in place by your application's end users.
            This TabSet specifies <code>canEditTabTitles</code> - double-click a tab title to 
            edit it.  Individual tabs can override the TabSet behavior; in this example, the 
            "Can't change me" tab has <code>canEditTitle</code> set to false.  Your code can
            cancel the user changes - try editing the "123-Yellow" tab to a title that doesn't 
            begin with "123-"
            ]]></description></Example>
        <Example title="Selection and Deselection Handling"
                 id="selectionEvents"
                 jsURL="layout/tabs/selectionEvents.js"><description>
            Developers can apply custom event handler logic to fire when the user selects tabs.
            The preferences pane in this example has a tabSelected handler which will create
            its pane lazily the first time the tab is selected, and a tabDeselected handler
            which returns false to stop the user changing tabs if the form item is unchecked.
            </description></Example>
        <Example title="View Loading" id="viewLoading"
                 needXHR="true" jsURL="advanced/viewLoading.js"><description>
            Click on "Tab2" to load a grid view on the fly.
            
            Declarative view loading allows extremely large applications to be split into
            separately loadable chunks, and creates an easy integration path for applications
            with server-driven application flow.
            </description>
            <tabs><tab title="loadedView" url="advanced/loadedView.js" doEval="false" canEdit="false"/></tabs>
        </Example>
    </children></ExampleFolder>
            

    <ExampleFolder title="Sections" isOpen="false" showSkinSwitcher="true" icon="[ISO_DOCS_SKIN]/images/silkicons/application_tile_vertical.png">
    <description>
        Sections (also called Accordions) label sections of the application
        and allow users to hide or resize sections.
    </description><children>
        <Example title="Expand / Collapse"
                 id="sectionsExpandCollapse"
                 jsURL="layout/sections/expandCollapse.js"><description>
            Click on any section header showing an arrow to expand and collapse it (the "Green 
            Cube" section is marked not collapsible).  Click on the "Expand Blue" and 
            "Collapse Blue" buttons to expand and collapse sections externally.
            </description></Example>
        <Example title="Resize Sections"
                 id="resizeSections"
                 jsURL="layout/sections/resizeSections.js"><description>
            Drag the "Help 2" header to resize sections, or press "Resize Help 1" to resize to
            fixed height.  The "Blue Pawn" section is marked not resizeable.
            </description></Example>
        <Example title="Custom Controls"
                  id="sectionControls"
                  jsURL="layout/sections/sectionControls.js"><description>
            Custom controls may appear on section headers.
            </description></Example>
        <Example title="Add and Remove"
                  id="sectionsAddAndRemove"
                  jsURL="layout/sections/addAndRemove.js"><description>
            Press the "Add Section" and "Remove Section" buttons to add or remove sections.
            </description></Example>
        <Example title="Show and Hide"
                 id="sectionsShowAndHide"
                 jsURL="layout/sections/showAndHide.js"><description>
            Press the "Show Section" and "Hide Section" buttons to reveal or hide the Yellow
            Section.  Showing and hiding sections lets you reuse a SectionStack for slightly
            different purposes, hiding or revealing relevant sections.
            </description></Example>
    </children></ExampleFolder>

</children></ExampleFolder>


<!-- Data Binding -->
<ExampleFolder title="Data Binding" isOpen="false" icon="[ISO_DOCS_SKIN]/images/silkicons/disconnect.png"><description>
    Data binding allows multiple components to share a central definition of an object (called
    a DataSource), so that all components can consistently retrieve, display, edit, validate
    and save objects of that type.
</description><children>

    <!-- Could link to Grid and Form data types, but would be deepest hierarchy anywhere, and
         only two items
    <ExampleFolder title="Data types" isOpen="false"><description>
    </description><children>
    </children></ExampleFolder>
    -->

    <ExampleFolder id="lists" title="Lists" showSkinSwitcher="true" isOpen="false" ref="gridsDataBinding"/>
    <ExampleFolder id="trees" title="Trees" showSkinSwitcher="true" isOpen="false" ref="treesDataBinding"/>

    <!-- TODO: default and custom field binding examples, similar to grids
    <ExampleFolder title="Forms" isOpen="false">
    <description>
    </description><children>
    </children></ExampleFolder>
    -->

    <ExampleFolder id="operations" title="Operations" showSkinSwitcher="true" isOpen="false"><description>
    DataBound Components understand a core set of operations called "Fetch", "Add", "Update"
    and "Remove" (also known as CRUD operations).  These operations can be programmatically
    initiated or automatically initiated in response to user action.
    In either case the integration model and APIs are the same.
    </description><children>
        <Example title="Fetch" id="fetchOperation" dataSource="supplyItem" 
                 xmlURL="databind/operations/fetch.xml" jsURL="databind/operations/fetch.js">
            <description>
            Rows are fetched automatically as the user drags the scrollbar.  Drag the scrollbar
            quickly to the bottom to fetch a range near the end (a prompt will appear during
            server fetch).  Scroll slowly back up to fill in the middle.
            </description></Example>
        <Example title="Add" id="addOperation" dataSource="supplyItem" 
                 xmlURL="databind/operations/add.xml">
            <description>
            Use the form to create a new stock item.  Create an item in the currently shown
            category to see it appear in the filtered listing automatically.  Create an item in
            any other category and note that it is filtered out.
            </description></Example>
        <Example title="Update" id="updateOperation" dataSource="supplyItem"
                 xmlURL="databind/operations/update.xml">
            <description>
            Select an item and use the form to change its price.  The list updates
            automatically.  Now change the item's category and note that it is removed
            automatically from the list.
            </description></Example>
        <Example title="Remove" id="removeOperation" dataSource="supplyItem"
                 xmlURL="databind/operations/remove.xml">
            <description>
            Click the "Remove" button to remove the selected item.
            </description></Example>
    
    </children></ExampleFolder>

    <!--
    <ExampleFolder title="Transformations" isOpen="false"><description>
    </description><children>
    </children></ExampleFolder>
    -->

    <ExampleFolder id="validation" title="Validation" isOpen="false"><description>
        Typical validation needs are covered by validators built-in to the SmartClient
        framework.  Validators can be combined into custom type definitions which are reusable
        across all components.
    </description><children>

    <!-- Note: This folder is a duplicate of one elsewhere in the file (scan for "serverValidation").
         Any changes made here should also be made in the copy.  The details are duplicated 
         rather than aliased because the ExampleViewer doesn't cope correctly with an aliased 
         folder nested within another aliased folder  -->

        <ExampleFolder id="serverValidationCopy" title="Server-based" isOpen="false" icon="[ISO_DOCS_SKIN]/images/silkicons/server_lightning.png"><description>
            The SmartClient Server provides powerful support for server-based validation.
        </description><children>

        <Example id="singleSourceValidation" title="Single Source" requiresModules="SCServer"
                 dataSource="supplyItem"
    	         jsURL="dataIntegration/java/serverValidation.js">
            <description>
            Validation rules are automatically enforced on both the client- and server-side based on
            a single, shared declaration.  Press "Save" to see errors from client-side
            validation.  Press "Clear Errors" then "Disable Validation" then "Save" again to see the
            same errors caught by the SmartClient server.
            </description></Example>
    
        <Example id="uniqueCheckValidation" title="Unique Check" requiresModules="SCServer"
                 dataSource="queuing_userHB"
    	         jsURL="dataIntegration/java/uniqueCheckValidation.js">
            <description><![CDATA[
            Enter the email address "kamirov@server.com" in the email field and press Tab. Do so with
            any other email address as well.
            <P/>
            The resulting validation error is based upon the server-side isUnique validator that
            checks to see if there is already a record in the DataSource and if so fails validation. 
            ]]></description></Example>

        <Example id="velocityValidation" title="Velocity Expression" requiresModules="SCServer"
                 dataSource="velocity_orderForm"
    	         jsURL="dataIntegration/java/velocityValidation.js">
            <tabs>
                <tab title="StockItem" dataSource="StockItem" canEdit="false"/>
            </tabs>
            <description><![CDATA[
            Use the "Item Id" ComboBox to select an item,  enter a very large quantity (999999)
            and press the "Submit Order" button.
            <P/>
            The resulting validation error is based upon server-side condition specified in
            the validator using a Velocity expression. It checks a related DataSource (StockItem)
            to see if there is sufficient quantity in stock to fulfill the order.
            ]]></description></Example>
    
        <Example id="dmiValidation" title="DMI Validation" requiresModules="SCServer"
                 dataSource="validationDMI_orderForm"
    	         jsURL="dataIntegration/java/validationDMI.js">
            <tabs>
                <tab title="StockItem" dataSource="StockItem" canEdit="false"/>
                <tab title="ValidatorDMI.java" 
                     url="serverExamples/validation/ValidatorDMI.java"
                     canEdit="false" doEval="false"/>
            </tabs>
            <descriptionHeight>150</descriptionHeight>
            <description><![CDATA[
            Use the "Item Id" ComboBox to select an item,  enter a very large quantity (999999)
            and press the "Submit Order" button.
            <P/>
            The resulting validation error is based upon server-side logic in ValidatorDMI.java
            that checks a related DataSource (StockItem) to see if there is sufficient quantity in
            stock to fulfill the order.  Hover over the error icon to see the error message and
            note that it includes an indication of the stock level: error messages are Velocity 
            templates, and DMI validators can easily populate variable values, as 
            ValidatorDMI.java shows
            <P/>
            Validators can use SmartClient DMI to call any server-side method to check the validity
            of data, including methods on Java beans looked up via Spring.
            ]]></description></Example>
    
        <Example id="hasRelatedValidation" title="Related Records" requiresModules="SCServer"
                 dataSource="complaint"
    	     jsURL="dataIntegration/java/hasRelatedValidation.js">
            <tabs>
                <tab title="masterDetail_orderHB" dataSource="masterDetail_orderHB" canEdit="false"/>
            </tabs>
            <description><![CDATA[
            Enter a complaint for a received shipment using its tracking number. The tracking
            number must reference an existing tracking number so try with an existing number
            (4110884 or 9631143) and with a random number (like 1234).
            <P/>
            The relatedRecord validator can be used to validate that an ID entered by
            a user actually exists.  This is useful in situations where using a comboBox for record
            lookup is inappropriate (the user should not be able to select among all valid tracking
            numbers, or among other types of IDs, such as license keys or driver's license numbers)
            or in situations such as batch upload of many records.
            <P/>
            The relatedRecord validator can also be used with a ComboBox as the UI in order to
            enforce that related records are checked <b>before</b> a request reaches business logic
            where it would be convenient to assume the ID is already validated, or as a means of
            enforcing referential integrity in systems that don't have built-in enforcement.
            ]]></description></Example>
    
        <Example id="blockingErrors" title="Blocking Errors" requiresModules="SCServer"
                 dataSource="complaint"
    	     jsURL="dataIntegration/java/blockingErrors.js">
            <tabs>
                <tab title="masterDetail_orderHB" dataSource="masterDetail_orderHB" canEdit="false"/>
            </tabs>
            <description><![CDATA[
            Enter a complaint for a received shipment using its tracking number. The tracking
            number must reference an existing tracking number so try with an existing number
            (4110884 or 9631143) and with a random number (like 1234). Note that when a
            non-existing value is entered, focus is not allowed to move forward.
            <P/>
            The relatedRecord validator can be used to validate that an ID entered by
            a user actually exists.  This is useful in situations where using a comboBox for record
            lookup is inappropriate (the user should not be able to select among all valid tracking
            numbers, or among other types of IDs, such as license keys or driver's license numbers)
            or in situations such as batch upload of many records.
            <P/>
            The relatedRecord validator can also be used with a ComboBox as the UI in order to
            enforce that related records are checked <b>before</b> a request reaches business logic
            where it would be convenient to assume the ID is already validated, or as a means of
            enforcing referential integrity in systems that don't have built-in enforcement.
            ]]></description></Example>
    
        </children></ExampleFolder>


        <Example title="Type" id="validationType" jsURL="databind/validation/type.js" 
                 dataSource="databind/validation/type.ds.xml">
            <description>
            Type a non-numeric value into the field and press "Validate" to receive a
            validation error.
            
            Declaring field type implies automatic validation anywhere a value is edited.
            </description></Example>
        <Example title="Built-ins"
                 id="validationBuiltins"
                 jsURL="databind/validation/builtins.js"
                 dataSource="databind/validation/builtins.ds.xml">
            <description>
            Type a number greater than 20 or less than 1 and press "Validate" to receive a
            validation error.
            
            SmartClient implements the XML Schema set of validators on both client and server
            </description></Example>
        <Example title="Regular Expression"
                 id="regularExpression"
                 jsURL="databind/validation/regularExpression.js"
                 dataSource="databind/validation/regularExpression.ds.xml">
            <description>
            Enter a bad email address (eg just "mike") and press "Validate" to receive a
            validation error.
            
            The regular expression validator allows simple custom field types, with automatic
            enforcement on client on server.
            </description></Example>
        <Example title="Value Transform"
                 id="valueTransform"
                 jsURL="databind/validation/valueTransform.js"
                 dataSource="databind/validation/valueTransform.ds.xml">
            <description>
            Enter a 10 digit US phone number with any typical punctuation press "Validate" to see it
            transformed to a canonical format.
            </description></Example>
        <Example title="Custom Types" id="customSimpleType" 
                 jsURL="databind/validation/customTypes.js"
                 dataSource="databind/validation/customTypes.ds.xml">
            <description>
            Enter a bad zip code (eg just "123") and press "Validate" to receive a
            validation error.
            
            Custom types can be declared based on built-in validators and re-used in multiple
            DataSources
            </description></Example>
        <Example id="validationFieldBinding"
                 title="Customized Binding"
                 jsURL="databind/forms/customBinding.js"
                 dataSource="databind/forms/users.ds.xml">
            <description>
            Click "Validate" to see validation errors triggered by rules both in this form and
            in the DataSource.
            
            Screen-specific fields and validation logic, such as the duplicate password entry
            box, can be added to a particular form while still sharing schema information that
            applies to all views.
            </description>
        </Example>
    </children></ExampleFolder>

    <!-- Note: This folder is a duplicate of one elsewhere in the file (scan for "dataDragging").
         Any changes made here should also be made in the copy.  The details are duplicated 
         rather than aliased because the ExampleViewer doesn't cope correctly with an aliased 
         folder nested within another aliased folder  -->

    <ExampleFolder id="dataDragging" title="Dragging" isOpen="false"><description>
        Databound components have built-in dragging behaviors that operate on persistent
        datasets.
    </description><children>
        <Example title="Tree Reparent" ref="treeReparent" jsURL="databind/drag/treeReparent.js"
                 dataSource="employees"><description>
            Dragging employees between managers in this tree automatically saves the new
            relationship to a DataSource, without writing any code.  Make changes, then 
            reload the page: your changes persist.
            </description></Example>
        <Example title="Recategorize (Tree)" ref="treeRecategorize" 
                 jsURL="databind/drag/treeRecategorize.js"
                 dataSource="supplyCategory"><tabs>
                <tab title="supplyItem" url="supplyItem.ds.xml"/>
            </tabs><description>
            Dragging items from the list and dropping them on categories in the tree automatically
            re-categorizes the item, without any code needed.  Make changes, then 
            reload the page: your changes persist.  This behavior is (optionally) automatic where
            SmartClient can establish a relationship via foreign key between the DataSources
            two components are bound to.
            </description></Example>
        <Example title="Recategorize (List)" ref="listRecategorize" 
                 jsURL="databind/drag/listRecategorize.js"
                 dataSource="supplyItem"><description>
            The two lists are showing items in different categories.  Drag items from one list to
            another to automatically recategorize the items without writing any code.  Make
            changes, then reload the page; your changes persist.
            </description></Example>
        <Example title="Recategorize (Tile)" ref="recategorizeTiles" />
        <Example
            title="Copy"
            ref="databoundDragCopy" 
            showSkinSwitcher="true"
            dataSource="employees"
            jsURL="databind/drag/listCopy.js"><tabs>
            <tab title="teamMembers" url="teamMembers.ds.xml"/>
            </tabs><description><![CDATA[
            Drag employee records into the Project Team Members list.  SmartClient recognizes that the 
            two dataSources are linked by a foreign key relationship, and automatically uses that 
            relationship to populate values in the record that is added when you drop. SmartClient
            also populates fields based on current criteria and maps explicit titleFields as 
            necessary.<p>
            In this example, note that SmartClient is automatically populating all three
            of the fields in the teamMembers dataSource, even though none of those fields is present 
            in the employees dataSource we are dragging from.  Change the "Team for Project" select 
            box, then try dragging employees across; note that the Project Code column is being 
            correctly populated for the dropped records.
            ]]></description></Example>

    </children></ExampleFolder>

    <Example title="Adaptive Filter" ref="adaptiveFilter"/>
    <Example title="Adaptive Sort" ref="adaptiveSort"/>
    <Example ref="relatedRecords" title="Related Records"><description>
        Open the picker in either form to select the item you want to order from the
        "supplyItem" DataSource.  The picker on the left stores the "itemId" from the
        related "supplyItem" records.  The picker on the right stores the "SKU" while
        displaying multiple fields.  You can scroll to dynamically load more records.  
        This pattern works with any DataSource.  
    </description></Example>


</children></ExampleFolder>

<ExampleFolder id="dataIntegration" title="Data Integration" isOpen="false" icon="[ISO_DOCS_SKIN]/images/silkicons/database_table.png">
<description>
    SmartClient supports declarative, XPath-based binding of visual components to web services
    that return XML or JSON responses.  SmartClient understands XML Schema and can bind
    components directly to WSDL web services.  
</description><children>
    <ExampleFolder id="xmlDataIntegration" title="XML" isOpen="false"><description>
        SmartClient can declaratively bind to standard formats like WSDL or RSS, homebrew
        formats, or simple flat files.  
    </description><children>
        <!-- explicitly set showSkinSwitcher on examples that are used in multiple places -->
        <Example id="rssFeed" title="RSS Feed" needXML="true" showSkinSwitcher="true"
		         jsURL="dataIntegration/xml/rssFeed.js">
            <description>
            DataSources can bind directly to simple XML documents where field values appear as
            attributes or subelements.
            </description></Example>

        <Example title="XPath Binding" id="xpathBinding" jsURL="dataIntegration/xml/xpathBinding.js"
            showSkinSwitcher="true" needXML="true">
		    <tabs><tab title="contactsData.xml" canEdit="false" doEval="false"
			           url="dataIntegration/xml/contactsData.xml"/></tabs>
            <description>
            DataSources can extract field values from complex XML documents via XPath
            expressions.  Note how the address fields, which are represented in the contacts
            data as a subelement, appear as columns in the grid. This approach of loading
            simple XML data over HTTP can be used with PHP and other server technologies.
            </description></Example>
<!--
        <Example title="Yahoo! Web Services"
                 id="xmlYahooWebServices"
                 jsURL="dataIntegration/xml/yahooWebServices.js" 
         needXML="true" showSkinSwitcher="true">
            <description>
            XPath binding allows declarative integration with web services.  Note how the
            height and width for the thumbnail images have been declaratively extracted from
            the "Thumbnail" subobject.
            </description></Example>
-->
        <!-- explicitly disable the skin switcher on this one - it's not showing anything that
             dramatically changes with a different skin -->
        <Example id="wsdlOperation" title="WSDL Web Services" needXML="true"
            showSkinSwitcher="false"
		         jsURL="dataIntegration/xml/wsdlWebServiceOperations.js">
            <description>
            SmartClient can load WSDL service definitions and call web service operations
            with automatic JSON&lt;-&gt;XML translation.
            
            SOAP encoding rules, namespacing, and element ordering are handled automatically
            for your inputs and outputs. 
            </description></Example>

        <Example id="wsdlBinding" title="Weather SOAP Search" needXML="true"
            showSkinSwitcher="true" jsURL="dataIntegration/xml/weatherForecastSearch.js">
            <description>
            Enter a zip code  in the "Zip" field to retrieve a weather forecast. 
            
            DataSources can bind directly to the structure of WSDL messages.
            </description></Example>

        <Example id="xmlEditSave" title="Edit and Save"
            jsURL="dataIntegration/xml/operationBinding_dataURL.js"><tabs>
        <tab title="country_fetch.xml" url="dataIntegration/xml/responses/country_fetch.xml" 
            doEval="false" canEdit="false"/>
        <tab title="country_add.xml" url="dataIntegration/xml/responses/country_add.xml" 
            doEval="false" canEdit="false"/>
        <tab title="country_update.xml" url="dataIntegration/xml/responses/country_update.xml" 
            doEval="false"  canEdit="false"/>
        <tab title="country_remove.xml" url="dataIntegration/xml/responses/country_remove.xml" 
            doEval="false"  canEdit="false"/>
        </tabs><description><![CDATA[
        Demonstrates <b>Add</b>, <b>Update</b> and <b>Remove</b> operations with a server that
        returns simple XML responses, an integration strategy popular with PHP, Ruby and Perl
        backends.
        <br>
        Each operation is directed to a different XML file containing a sample response for
        that operationType.  The server returns the data-as-saved to allow the grid to update
        its cache.
        ]]></description></Example>
        
        <Example id="restEditSave" title="RestDataSource - Edit and Save"
            jsURL="dataIntegration/xml/restDS_operationBinding.js"><tabs>
        <tab title="country_fetch.xml" url="dataIntegration/xml/responses/country_fetch_rest.xml" 
            doEval="false" canEdit="false"/>
        <tab title="country_add.xml" url="dataIntegration/xml/responses/country_add_rest.xml" 
            doEval="false" canEdit="false"/>
        <tab title="country_update.xml" url="dataIntegration/xml/responses/country_update_rest.xml" 
            doEval="false"  canEdit="false"/>
        <tab title="country_remove.xml" url="dataIntegration/xml/responses/country_remove_rest.xml" 
            doEval="false"  canEdit="false"/>
        </tabs><description><![CDATA[
        The RestDataSource provides a simple protocol based on XML or JSON over HTTP.  This
        protocol can be implemented with any server technology (PHP, Ruby, ..) and 
        includes all the features of SmartClient's databinding layer (data paging, server
        validation errors, cache sync, etc).<br>
        In this example, each DataSource operation is directed to a different XML file
        containing a sample response for that operationType.  The server returns the
        data-as-saved to allow the grid to update its cache.
        ]]></description></Example>

        <!-- explicitly disable the skin switcher on this one - it's not showing anything that
             dramatically changes with a different skin -->
        <Example title="Server Validation Errors" id="xmlServerValidationErrors" needXML="true"
            showSkinSwitcher="false"
                 jsURL="dataIntegration/xml/serverValidationErrors/serverValidationErrors.js">
            <tabs>
                <tab title="serverResponse.xml" canEdit="false" doEval="false"
                     url="dataIntegration/xml/serverValidationErrors/serverResponse.xml"/>
            </tabs>
            <description>
            Click "Save" to see validation errors derived from an XML response.
            
            Validation errors expressed in application-specific XML formats can be 
            communicated to visual components by implementing
            &lt;code&gt;DataSource.transformResponse()&lt;/code&gt;.  The resulting validation
            errors will be displayed and tracked by forms and editabled grids.
            </description></Example>

        <Example title="XML Schema Import" id="xmlSchemaImport" needXML="true"
                 showSkinSwitcher="true" url="dataIntegration/xml/xmlSchemaImport.js">
            <tabs>
                <tab title="supplyItem.xsd" canEdit="false" doEval="false"
                     url="dataIntegration/xml/supplyItem.xsd"/>
            </tabs>
            <description>
            Click "Load Schema" to load a version of the &lt;code&gt;supplyItem&lt;/code&gt;
            DataSource expressed in XML Schema format, and bind the Grid and Form to it.  Note
            that the form and grid choose appropriate editors according to declared XML Schema
            types.  Click "Validate" to see validation errors from automatically imported
            validators.
            </description></Example>
        <Example title="Schema Chaining" id="schemaChaining" needXML="true"
                 showSkinSwitcher="true" url="dataIntegration/xml/schemaChaining.js">
            <tabs>
                <tab title="supplyItem.xsd" canEdit="false" doEval="false"
                     url="dataIntegration/xml/supplyItem.xsd"/>
            </tabs>
            <description>
            Click "Load Schema" to load a &lt;code&gt;supplyItem&lt;/code&gt; DataSource from
            XML Schema format, then extend that schema with SmartClient-specific presentation
            attributes, and bind the Grid and Form to it.  Note that the internal "itemId"
            field has been hidden from the user, some fields have been retitled, and default
            editors overridden.
            </description></Example>
        <Example title="SmartClient WSDL" showSkinSwitcher="true" needXML="true" ref="WSDLDataSource"/>
    </children></ExampleFolder>

    <ExampleFolder title="JSON" isOpen="false"><description>
        SmartClient brings declarative XPath binding and typed schema (even XML Schema) to the
        simple and convenient JSON format.
    </description><children>

        <Example title="Simple JSON"
            showSkinSwitcher="true"
            id="simpleJSON"
            jsURL="dataIntegration/json/simpleJSON.js">
            <tabs>
                <tab title="countries_small.js" canEdit="false" doEval="false"
                     url="dataIntegration/json/countries_small.js"/>
            </tabs>
           
            <description>
            DataSources can bind directly to JSON data where records appear as an Array of
            JavaScript Objects with field values as properties.  This approach of loading
            simple JSON data over HTTP can be used with PHP and other server technologies.
            </description></Example>

        <Example title="JSON XPath Binding"
                 id="jsonXPath"
                 jsURL="dataIntegration/json/xpathBinding.js"
                 showSkinSwitcher="true">
		    <tabs><tab title="contactsData.js" canEdit="false" doEval="false"
			           url="dataIntegration/json/contactsData.js"/></tabs>
            <description>
            DataSources can extract field values from complex JSON structures via XPath
            expressions.  Note how the address fields, which are represented in the contacts
            data as a subobject, appear as columns in the grid.
            </description></Example>
<!--
        <Example title="Yahoo! Web Services" id="jsonYahooWebServices"
            showSkinSwitcher="true" jsURL="dataIntegration/json/yahooWebServices.js">
            <description>
            Enter a search term in the Query input field to see images from Yahoo Image
            Search.&lt;BR&gt;
            XPath binding allows declarative integration with web services.  Note how the
            height and width for the thumbnail images have been declaratively extracted from
            the "Thumbnail" subobject.
            </description></Example>
    
        <Example title="Cross-Site JSON" jsURL="dataIntegration/json/yahooWebServices.js"
            showSkinSwitcher="true">
            <description>
            Using the "scriptInclude" protocol, SmartClient applications can contact compatible
            JSON web services without the need for any intervening server.
            </description></Example>
-->
        <Example title="Server Validation Errors" id="jsonServerValidationErrors"
            showSkinSwitcher="false"
                 jsURL="dataIntegration/json/serverValidationErrors/serverValidationErrors.js">
            <tabs>
                <tab title="serverResponse.js" canEdit="false" doEval="false"
                     url="dataIntegration/json/serverValidationErrors/serverResponse.js"/>
            </tabs>
            <description>
            Click "Save" to see validation errors derived from a JSON response.&lt;BR&gt;
            
            Validation errors expressed in application-specific JSON formats can be 
            communicated to the SmartClient system by implementing
            &lt;code&gt;DataSource.transformResponse()&lt;/code&gt;.  The resulting validation
            errors will be displayed and tracked by forms and editabled grids.
            </description></Example>
    
    
    </children></ExampleFolder>

</children></ExampleFolder>

<ExampleFolder title="Server examples" isOpen="false" id="serverExamples" 
               icon="[ISO_DOCS_SKIN]/images/silkicons/server_lightning.png">
<description><![CDATA[
    The SmartClient Server framework is a collection of .jar files and optional servlets that works with
    any J2EE or J2SE container and is easily integrated into existing applications.  Its major
    features include:<ul>
    <li><b>Simplified server integration:</b> A pre-built network protocol for browser-server
        communication, which handles data paging, transactions/batch operations, server-side
        sort, automatic cache updates, validation and other error handling, optimistic
        concurrency (aka long transactions) and binary file uploads.<P></li>
    <li><b>SQL, JPA & Hibernate Connectors:</b> Secure, flexible, transactional support for all
        CRUD operations, either directly via JDBC or via Hibernate or JPA beans.<P></li>
    <li><b>Rapid integration with Java Beans:</b> Robust, complete, bi-directional translation
        between Java and Javascript objects for rapid integration with any Java beans-based
        persistence system, such as Spring services or custom ORM implementations.  Send and
        receive complex structures including Java Enums and Java Generics without the need to
        write mapping or validation code.  Declaratively trim and rearrange data so that only
        selected data is sent to the client <b>without</b> the need to create and populate
        redundant DTOs (data transfer objects).<P></li>
    <li><b>Server enforcement of Validators:</b> A single file specificies validation rules
        which are enforced both client and server side<P></li>
    <li><b>Declarative Security:</b> Easily attach role- or capability-based security rules to
        data operations, with server-side enforcement plus automatic client-side effects such as
        hiding fields or showing fields as read-only based on the user role.<P></li>
    <li><b>Export:</b> Export any dataset to CSV or true Excel spreadsheets, including data
        highlights and formatting rules<br></li>
    <li><b>High speed data delivery / data compression:</b> automatically uses the fastest 
        possible mechanism for delivering data to the browser<br></li>
    </ul>
    The SmartClient Server framework is an optional, commercially-licensed package.  See the 
    <a href=http://www.smartclient.com/product/index.jsp>products page</a> for details.
    ]]>
</description><children>
    <!-- Note: This folder is a duplicate of one elsewhere in the file (scan for "serverValidation").
         Any changes made here should also be made in the copy.  The details are duplicated 
         rather than aliased because the ExampleViewer doesn't cope correctly with an aliased 
         folder nested within another aliased folder  -->

    <ExampleFolder id="serverValidation" title="Validation" isOpen="false" icon="[ISO_DOCS_SKIN]/images/silkicons/server_lightning.png"><description>
        The SmartClient Server provides powerful support for server-based validation.
    </description><children>
    <Example id="singleSourceValidation" title="Single Source" requiresModules="SCServer"
             dataSource="supplyItem"
	         jsURL="dataIntegration/java/serverValidation.js">
        <description>
        Validation rules are automatically enforced on both the client- and server-side based on
        a single, shared declaration.  Press "Save" to see errors from client-side
        validation.  Press "Clear Errors" then "Disable Validation" then "Save" again to see the
        same errors caught by the SmartClient server.
        </description></Example>

    <Example id="dmiValidation" title="DMI Validation" requiresModules="SCServer"
             dataSource="validationDMI_orderForm"
	         jsURL="dataIntegration/java/validationDMI.js">
        <tabs>
            <tab title="StockItem" dataSource="StockItem" canEdit="false"/>
            <tab title="ValidatorDMI.java" 
                 url="serverExamples/validation/ValidatorDMI.java"
                 canEdit="false" doEval="false"/>
        </tabs>
        <description><![CDATA[
        Use the "Item Id" ComboBox to select an item,  enter a very large quantity (999999)
        and press the "Submit Order" button.
        <P/>
        The resulting validation error is based upon server-side logic in ValidatorDMI.java
        that checks a related DataSource (StockItem) to see if there is sufficient quantity in
        stock to fulfill the order.
        <P/>
        Validators can use SmartClient DMI to call any server-side method to check the validity
        of data, including methods on Java beans looked up via Spring.
        ]]></description></Example>

    <Example id="velocityValidation" title="Velocity Expression" requiresModules="SCServer"
             dataSource="velocity_orderForm"
	         jsURL="dataIntegration/java/velocityValidation.js">
        <tabs>
            <tab title="StockItem" dataSource="StockItem" canEdit="false"/>
        </tabs>
        <description><![CDATA[
        Use the "Item Id" ComboBox to select an item,  enter a very large quantity (999999)
        and press the "Submit Order" button.
        <P/>
        The resulting validation error is based upon server-side condition specified in
        the validator using a Velocity expression. It checks a related DataSource (StockItem)
        to see if there is sufficient quantity in stock to fulfill the order.
        ]]></description></Example>

    <Example id="uniqueCheckValidation" title="Unique Check" requiresModules="SCServer"
             dataSource="queuing_userHB"
	         jsURL="dataIntegration/java/uniqueCheckValidation.js">
        <description><![CDATA[
        Enter the email address "kamirov@server.com" in the email field and press Tab. Do so with
        any other email address as well.
        <P/>
        The resulting validation error is based upon the server-side isUnique validator that
        checks to see if there is already a record in the DataSource and if so fails validation. 
        ]]></description></Example>

    <Example id="hasRelatedValidation" title="Related Records" requiresModules="SCServer"
             dataSource="complaint"
	     jsURL="dataIntegration/java/hasRelatedValidation.js">
        <tabs>
            <tab title="masterDetail_orderHB" dataSource="masterDetail_orderHB" canEdit="false"/>
        </tabs>
        <description><![CDATA[
        Enter a complaint for a received shipment using its tracking number. The tracking
        number must reference an existing tracking number so try with an existing number
        (4110884 or 9631143) and with a random number (like 1234).
        <P/>
        The relatedRecord validator can be used to validate that an ID entered by
        a user actually exists.  This is useful in situations where using a comboBox for record
        lookup is inappropriate (the user should not be able to select among all valid tracking
        numbers, or among other types of IDs, such as license keys or driver's license numbers)
        or in situations such as batch upload of many records.
        <P/>
        The relatedRecord validator can also be used with a ComboBox as the UI in order to
        enforce that related records are checked <b>before</b> a request reaches business logic
        where it would be convenient to assume the ID is already validated, or as a means of
        enforcing referential integrity in systems that don't have built-in enforcement.
        ]]></description></Example>

        <Example id="blockingErrors" title="Blocking Errors" requiresModules="SCServer"
                 dataSource="complaint"
    	     jsURL="dataIntegration/java/blockingErrors.js">
            <tabs>
                <tab title="masterDetail_orderHB" dataSource="masterDetail_orderHB" canEdit="false"/>
            </tabs>
            <description><![CDATA[
            Enter a complaint for a received shipment using its tracking number. The tracking
            number must reference an existing tracking number so try with an existing number
            (4110884 or 9631143) and with a random number (like 1234). Note that when a
            non-existing value is entered, focus is not allowed to move forward.
            <P/>
            The relatedRecord validator can be used to validate that an ID entered by
            a user actually exists.  This is useful in situations where using a comboBox for record
            lookup is inappropriate (the user should not be able to select among all valid tracking
            numbers, or among other types of IDs, such as license keys or driver's license numbers)
            or in situations such as batch upload of many records.
            <P/>
            The relatedRecord validator can also be used with a ComboBox as the UI in order to
            enforce that related records are checked <b>before</b> a request reaches business logic
            where it would be convenient to assume the ID is already validated, or as a means of
            enforcing referential integrity in systems that don't have built-in enforcement.
            ]]></description></Example>
    
    </children></ExampleFolder>


    <ExampleFolder title="SQL" isOpen="false" icon="[ISO_DOCS_SKIN]/images/silkicons/database_lightning.png"><description>
        The SmartClient Server provides powerful built-in support for codeless connection to
        mainstream SQL databases.
    </description><children>
        <Example
            id="sqlWizard"
            jsURL="serverExamples/sql/vb_Database.js" requiresModules="SCServer"
            title="Database Wizard"
            icon="[ISO_DOCS_SKIN]/images/silkicons/database_gear.png"
            showSkinSwitcher="false"
            showSource="false"
            ><description><![CDATA[
            SmartClient's Visual Builder tool provides an extremely easy and completely codeless 
            way to create DataSources for instantly connecting to existing database tables.  Just
            click the "New" button, select "Existing SQL Table", and the Database Browser will
            show you your tables, column details and the actual data.  Select a table, and 
            Visual Builder will create a fully-functioning DataSource that can perform
            all four CRUD operations on that table, including - if you have the Power Edition or 
            Enterprise Edition - complex searches enabled by SmartClient Advanced Criteria system.
            ]]></description></Example>
        <Example
            id="sqlConnector"
            title="Basic Connector"
            icon="[ISO_DOCS_SKIN]/images/silkicons/database_gear.png"
            jsURL="serverExamples/sql/basicConnector.js" requiresModules="SCServer"
            ><tabs>
            <tab title="worldDS" url="grids/ds/worldSQLDS.ds.xml" canEdit="false"/>
            </tabs>
            <descriptionHeight>220</descriptionHeight>
            <description><![CDATA[
            The basic SQL Connector gives you the ability to immediately connect SmartClient components to
            SQL databases without writing any code.  
            <P>
            You can either use the SQL Wizard in Visual Builder to generate a DataSource descriptor
            (.ds.xml file) from an existing SQL table, or use the Admin Console to generate a SQL table
            from a DataSource descriptor you write.  Either way, you get the immediate ability to perform
            all 4 basic SQL operations (select, insert, update, delete) from any of SmartClient's
            data-aware components.
            <P>
            The grid below is connected to a SQL DataSource and has settings enabled to allow this grid to
            perform all 4 operations.  Type in the input boxes above each column to do query by example.
            Note that data paging is automatically enabled - just scroll to load data on demand.  Click on
            a red X to delete a record.  Click on a record to edit it and click "Add New" to add a new record.
            <P>
            It's easy to add business logic that takes place before and after SQL operations to enforce
            security or add additional data validation rules.
            <P>
            Even if your primary data storage approach is non-SQL or if you choose to use JPA or other ORM
            systems for most objects, the SQL connector is still valuable for initial prototypes and for
            lightweight storage when a full ORM approach would be overkill.
            ]]></description></Example>
        <Example
            title="Server Advanced Filtering (SQL)" requiresModules="SCServer,serverCriteria"
            ref="filterBuilderBracket"
            icon="[ISO_DOCS_SKIN]/images/iconexperience/funnel.png">
            <descriptionHeight>150</descriptionHeight>
            <description><![CDATA[
            Use the FilterBuilder to construct queries of arbitrary complexity.  The FilterBuilder,
            and the underlying AdvancedCriteria system, support building queries with subclauses
            nested to any depth. Add clauses to your query with the "+" icon; add nested subclauses 
            with the "+()" button. Click "Filter" to see the result in the ListGrid.
            <P>
            Note that this example is backed by a "sql" dataSource; the SmartClient Server is 
            automatically generating the SQL queries required to implement the filters that the 
            FilterBuilder can assemble.  This works adaptively and seamlessly with client-side 
            Advanced Filtering: the generated SQL query will yield exactly the same resultset 
            as the client-side filtering.  This means SmartClient is able to switch to client-side
            filtering when its cache is full, giving a more responsive, more scalable application.
            ]]></description>
        </Example>
        <Example
            title="Large Value Map" requiresModules="SCServer,customSQL"
            id="largeValueMapSQL"
            icon="[ISO_DOCS_SKIN]/images/silkicons/table_relationship.png"
            jsURL="serverExamples/sql/largeValueMap/largeValueMap.js"><tabs>
            <tab name="orderItem" dataSource="largeValueMap_orderItem" canEdit="false" />
            <tab dataSource="supplyItem" canEdit="false" />
            </tabs>
            <descriptionHeight>180</descriptionHeight>
            <description><![CDATA[
            This example shows the simple use of custom SQL clauses to provide a DataSource that
            joins multiple tables while retaining SmartClient's automatic paging and filtering
            behavior.  When trying this example, remember that this is <b>automatic</b> 
            dataset-handling behavior that works without any coding, even though the data is being 
            provided by a custom SQL query.<p>
            
            The list contains order items; each order item holds an itemID, which is being used
            to join to the supplyItem table and obtain the itemName.  Note that you can filter on
            the itemName - either select a full item name or just enter a partial value in the 
            combo box.  Pagination is also active - try quickly dragging the scrollbar down, and
            you'll see SmartClient contacting the server for more records.<p>
           
             Editing is also enabled in this example.  Try filtering to a small sample of items,
             then edit one of them by double-clicking it and choose a different item.  Note how 
             that order item is immediately filtered out of the list: SmartClient's intelligent 
             cache sync also automatically handles custom SQL statements.
            ]]></description>
        </Example>
        <Example
            title="User-Specific Data" requiresModules="SCServer,customSQL"
            id="userSpecificData"
            icon="[ISO_DOCS_SKIN]/images/silkicons/user_orange.png"
            jsURL="serverExamples/sql/userSpecificData/userSpecificData.js"><tabs>
            <tab name="cartItem" dataSource="cartItem" canEdit="false" />
            <tab title="supplyItem" url="supplyItem.ds.xml" canEdit="false"/>
            <tab title="CartDMI.java" url="serverExamples/sql/userSpecificData/CartDMI.java" canEdit="false" doEval="false"/>
            </tabs>
            <descriptionHeight>200</descriptionHeight>
            <description><![CDATA[
            This example shows the use of some simple user-written server code in conjunction with
            SmartClient databound dragging features and the SmartClient SQL DataSource to implement
            a simple, but secure, shopping cart example.
            <p>
            Via DMI (Direct Method Invocation), the <code>cartItem</code> DataSource declares
            that all DataSource operations should go through a custom Java method
            <code>CartDMI.enforceUserAccess()</code> <b>before</b> proceeding to read or write
            the database.  &nbsp;&nbsp<code>CartDMI.enforceUserAccess()</code> adds the current sessionId to the
            DSRequest, so that the user can only read and write his own shopping cart.
            <P>
            Drag items from the left-hand grid to the right-hand grid.  You can edit the quantity
            in the right-hand grid, and you can delete records.  You can verify that the example
            is protecting each user's data from others by running the example in two different
            browsers (eg one Firefox and one IE) - this creates distinct sessions with separate
            carts.
            ]]></description>
        </Example>
        <Example
            title="Dynamic Reporting" requiresModules="SCServer,customSQL"
            id="dynamicReporting"
            icon="[ISO_DOCS_SKIN]/images/silkicons/table_multiple.png"
            jsURL="serverExamples/sql/dynamicReporting/dynamicReporting.js"><tabs>
            <tab name="orderItem" dataSource="dynamicReporting_orderItem" canEdit="false" />
            </tabs>
            <descriptionHeight>210</descriptionHeight>
            <description><![CDATA[
            This example shows the use of custom SQL clauses to build a fairly complex query, including
            both standard and bespoke WHERE conditions and the use of aggregate functions and a 
            GROUP BY.  It is important to note that we can do this whilst still keeping the normal 
            benefits of SmartClient DataSources, such as automatic dataset paging and arbitrary
            filtering and sorting.  Also note that this example, though it makes heavy use of custom
            SQL clauses, doesn't make use of any database-specific syntax or functions, so it is 
            portable across different database products.<p>
            
            The list contains a summary of orders in a given date range, summarized by item - each
            item appears just once in the list, alongside the total quantity of that item ordered 
            in the given date range.  Change the date range to be more restrictive (all the rows
            in the sample database have dates in February 2009) and click "Filter", and you will see
            the quantities change, and items disappear from the list.  You can also use the 
            filter editor at the top of the grid to arbitrarily filter the records, or click
            the column headings to sort.<p>
            
            Scroll the grid quickly to the bottom, and you will see a brief notification as 
            SmartClient contacts the server - pagination is still working, despite the unusual
            and complex query.
            ]]></description>
        </Example>
        <Example title="Transactions" ref="autoTransactions" />
    </children></ExampleFolder>
    <ExampleFolder title="Hibernate / Beans" isOpen="false" icon="[ISO_DOCS_SKIN]/images/silkicons/server_lightning.png"><description>
        The SmartClient Server's built-in support for Hibernate
    </description><children>
<!-- 

        <Example
            id="hibernateWizard"
            jsURL="serverExamples/hibernate/vb_Hibernate.js" requiresModules="SCServer"
            title="Hibernate Wizard"
            icon="[ISO_DOCS_SKIN]/images/iconexperience/coffeebean_view.png"
            showSkinSwitcher="false"
            showSource="false"
            ><description><![CDATA[
            SmartClient's Visual Builder tool provides an extremely easy and completely codeless 
            way to create DataSources for instantly connecting to existing Hibernate mapped 
            entitites.  Just click the "New" button, select "Hibernate Bean", and the Hibernate 
            Browser will show your mapped entities, properties and even the data in the actual 
            table to which the entity is mapped.  Select an entity, and 
            Visual Builder will create a fully-functioning DataSource that can perform
            all four CRUD operations via Hibernate on that entity, including - if you have the
            Power Edition or Enterprise Edition - complex searches enabled by SmartClient's 
            Advanced Criteria system.
            ]]></description></Example>
-->
        <Example
            id="hibernateAutoDerivation"
            jsURL="serverExamples/hibernate/autoDerivation/hibernateAutoDerivation.js" requiresModules="SCServer"
            title="Auto Derivation"
            icon="[ISO_DOCS_SKIN]/images/iconexperience/coffeebean.png"
            showSkinSwitcher="false"
            dataSource="supplyItemHBAutoDerive" 
            ><tabs>
            <tab title="SupplyItemHB.java"
                 url="serverExamples/hibernate/autoDerivation/SupplyItemHB.java"
                 canEdit="false" doEval="false"/>
            </tabs><description><![CDATA[
            If you have pre-existing Hibernate beans, SmartClient can automatically derive fully functional
            DataSources given just the Java classname of the Hibernate Bean.  The grid below is connected
            to a Hibernate-managed bean via the simple declarations in supplyItemHBAutoDerive.ds.xml - no other
            configuration or Java code is required beyond the bean itself and Hibernate mapping, which are
            samples intended to represent a pre-existing Hibernate bean.
            <p/>
            To search, use the controls above the grid's header. Note that data paging is automatically
            enabled - just scroll down to load data on demand. Click on the red icon next to each record to
            delete it. Click on a record to edit it and click "Add New" to add a new record.  Note that the
            editing controls are type sensitive: a date picker appears for the "Next Shipment" field, and
            the "Units" field shows a picklist because its Java type is an Enum.
            <p/>
            You can use DMI to add business logic that takes place before and after Hibernate operations to
            enforce security or add additional data validation rules.
            ]]></description></Example>
        <Example
            id="hibernateConnector"
            title="Beanless Mode"
            icon="[ISO_DOCS_SKIN]/images/iconexperience/coffeebean.png"
            jsURL="serverExamples/hibernate/hibernateConnector.js" requiresModules="SCServer"
            ><tabs>
            <tab title="worldHB" dataSource="worldHB" canEdit="false"/>
            </tabs>
            <descriptionHeight>220</descriptionHeight>
            <description><![CDATA[
            Beanless mode allows you to use Hibernate for persistence without writing any Java code at all.
            Declare the properties of your object in your DataSource descriptor (.ds.xml file), and
            SmartClient will generate the Hibernate configuration automatically.  You can use the Admin
            Console to generate the underlying SQL table as well, so the only file you create is the
            .ds.xml file.
            <P>
            As with the previous example, the grid below provides the ability to search, edit, and delete
            records.
            <P>
            Beanless mode helps you avoid writing boilerplate Java code (several classes full of getter
            and setter methods that do nothing) for simple entities.  Even in beanless mode, you can still
            use DMI to add Java business logic that takes place before and after Hibernate operations; the
            Hibernate data is represented as a Java Map. 
            <P>
            You can also use a mixture of beanless mode and normal Hibernate beans, even in the same
            transaction.
            ]]></description></Example>
        <Example
            title="Advanced Filtering" requiresModules="SCServer,serverCriteria"
            id="advancedFilterHibernate"
            icon="[ISO_DOCS_SKIN]/images/iconexperience/funnel.png"
            jsURL="serverExamples/hibernate/advancedFilter/advancedFilterHibernate.js">
            <tabs>
            <tab name="supplyItemHB" dataSource="supplyItemHB" canEdit="false" />
            </tabs>
            <descriptionHeight>150</descriptionHeight>
            <description><![CDATA[
            Use the FilterBuilder to construct queries of arbitrary complexity.  The FilterBuilder,
            and the underlying AdvancedCriteria system, support building queries with subclauses
            nested to any depth. Add clauses to your query with the "+" icon; add nested subclauses 
            with the "+()" button. Click "Filter" to see the result in the ListGrid.
            <p>
            Note that this example is backed by a "hibernate" dataSource; the SmartClient Server is 
            automatically generating the Hibernate Criteria Queries (including database-specific SQL
            where necessary) to implement the filters that the FilterBuilder 
            can assemble.    This works adaptively and seamlessly with client-side 
            Advanced Filtering: the generated Criteria query will yield exactly the same resultset 
            as the client-side filtering.  This means SmartClient is able to switch to client-side
            filtering when its cache is full, giving a more responsive, more scalable application.
            ]]></description>
        </Example>
        <Example
            id="hbRelationManyToOneSimple"
            title="Many-to-One Relation"
            requiresModules="SCServer"
            jsURL="serverExamples/hibernate/relations/hbRelationManyToOneSimple.js">
        >
            <tabs>
                <tab
                    name="cityManyToOneSimpleHB"
                    dataSource="cityManyToOneSimpleHB"
                />
                <tab
                    name="countryManyToOneSimpleHB"
                    dataSource="countryManyToOneSimpleHB"
                />
                <tab
                    title="CityManyToOneSimple.java"
                    canEdit="false"
                    doEval="false"
                    url="serverExamples/hibernate/relations/CityManyToOneSimple.java"
                />
                <tab
                    title="CountryManyToOneSimple.java"
                    canEdit="false"
                    doEval="false"
                    url="serverExamples/hibernate/relations/CountryManyToOneSimple.java"
                />
            </tabs>
            <descriptionHeight>200</descriptionHeight>
            <description><![CDATA[
                SmartClient handles Hibernate Many-to-One relations transparently, such as Cities which belong
                to Countries.  Just declare a foreignKey field on the City DataSource to indicate you
                want to use the related Hibernate bean Country.
                <P>
                The grid below shows Cities, but the Country name is automatically shown even though the
                countryName is stored in the related Hibernate bean Country.  Any fields from any number of
                related beans can be automatically loaded this way.
                <P>
                Click to edit and change the Country of a City.  The list of Countries is automatically
                loaded from the related Hibernate bean, along with their IDs (not shown).  
                <P>
                Changing the Country of a City sends the ID of the new Country back to the server, and
                SmartClient automatically makes all the required Hibernate calls to persist the change - no
                server-side code needs to be written beyond the Hibernate beans themselves and their
                annotations.
            ]]></description>
        </Example>
        <Example
            id="hbRelationOneToMany"
            title="One-to-Many Relation"
            requiresModules="SCServer"
            jsURL="serverExamples/hibernate/relations/hbRelationOneToMany.js">
        >
            <tabs>
                <tab
                    name="cityOneToManyHB"
                    dataSource="cityOneToManyHB"
                />
                <tab
                    name="countryOneToManyHB"
                    dataSource="countryOneToManyHB"
                />
                <tab
                    title="CityOneToMany.java"
                    canEdit="false"
                    doEval="false"
                    url="serverExamples/hibernate/relations/CityOneToMany.java"
                />
                <tab
                    title="CountryOneToMany.java"
                    canEdit="false"
                    doEval="false"
                    url="serverExamples/hibernate/relations/CountryOneToMany.java"
                />
            </tabs>
            <descriptionHeight>150</descriptionHeight>
            <description><![CDATA[
                SmartClient handles Hibernate One-to-Many relations transparently, such as a Country which has
                multiple Cities.  Just declare a collection field (multiple:true) on the Country
                DataSource to indicate you want to load its list of Cities.
                <P>
                Click on a Country below - its list of Cities is revealed without a new trip to the
                server.  Cities can be now edited in the lower grid.  
                <P>
                When data is saved, all changes to the Country and its Cities are sent in one save
                request, and SmartClient automatically makes all the required Hibernate calls to persist the
                changes - no server-side code needs to be written beyond the Hibernate beans themselves and
                their annotations.
            ]]></description>
        </Example>
        <Example
            title="Master-Detail (Batch Load and Save)" requiresModules="SCServer"
            icon="[ISO_DOCS_SKIN]/images/silkicons/table_multiple.png"
            id="masterDetail"
            jsURL="serverExamples/hibernate/masterDetail/masterDetail.js"><tabs>
            <tab name="masterDetail_order" dataSource="masterDetail_orderHB" canEdit="false" />
            <tab name="masterDetail_orderItem" dataSource="masterDetail_orderItemHB" canEdit="false" />
            <tab title="Order.java" 
                 url="serverExamples/hibernate/masterDetail/Order.java" 
                 canEdit="false" doEval="false"/>
            <tab title="Order.hbm.xml" 
                 url="serverExamples/hibernate/masterDetail/Order.hbm.xml" 
                 canEdit="false" doEval="false"/>
            <tab title="OrderItem.java" 
                 url="serverExamples/hibernate/masterDetail/OrderItem.java" 
                 canEdit="false" doEval="false"/>
            <tab title="OrderItem.hbm.xml" 
                 url="serverExamples/hibernate/masterDetail/OrderItem.hbm.xml" 
                 canEdit="false" doEval="false"/>
            </tabs>
            <descriptionHeight>150</descriptionHeight>
            <description><![CDATA[
            This example shows a simple way to implement an updatable parent-child relationship
            with SmartClient, the SmartClient Server and Hibernate.  As you can see from from the 
            various source tabs, <code>Order</code> and <code>OrderItem</code> are related via 
            a unidirectional Set collection in Hibernate.
            The order dataSource also declares its <code>items</code> field as being
            of type <code>masterDetail_orderItemHB</code>, which tells SmartClient to use that 
            dataSource as schema when processing the detail lines.  With this configuration in
            place, creating a UI capable of updating across this parent-child association becomes
            extremely easy - only two lines of SmartClient code, beyond the creation and layout 
            of the visual components themselves, is required.
            <p>
            Click a record in the top grid to see the order's details and the associated detail 
            lines in the form and grid below.
            You can edit the order information using this screen (both header and detail - 
            double-click the grid to edit the details); when you click Save, SmartClient will 
            submit the master and detail information together, and Hibernate will save all 
            changes as a single operation.
            ]]></description>
        </Example>
        <!-- This example is not feature-complete yet, so hiding it for now
        <Example
            title="Object-Oriented Server Approach with Hibernate" requiresModules="SCServer"
            id="largeValueMapHibernate"
            jsURL="serverExamples/hibernate/largeValueMap/largeValueMapHibernate.js"><tabs>
            <tab name="largeValueMap_orderItemHB" dataSource="largeValueMap_orderItemHB" canEdit="false" />
            <tab title="OrderItem.java" 
                 url="serverExamples/hibernate/largeValueMap/OrderItem.java" 
                 canEdit="false" doEval="false"/>
            <tab title="OrderItem.hbm.xml" 
                 url="serverExamples/hibernate/largeValueMap/OrderItem.hbm.xml" 
                 canEdit="false" doEval="false"/>
            <tab title="ValMapSupplyItem.java" 
                 url="serverExamples/hibernate/largeValueMap/ValMapSupplyItem.java" 
                 canEdit="false" doEval="false"/>
            <tab title="ValMapSupplyItem.hbm.xml" 
                 url="serverExamples/hibernate/largeValueMap/ValMapSupplyItem.hbm.xml" 
                 canEdit="false" doEval="false"/>
            </tabs>
            <descriptionHeight>150</descriptionHeight>
            <description><![CDATA[
            This example shows the use of Javabeans and Hibernate.  The OrderItem bean has a 
            Hibernate mapping file, which contains an association to the ValMapSupplyItem bean.
            When we request OrderItem objects (via an ordinary DataSource request from the client),
            Hibernate automatically obtains the associated SupplyItem objects.  In the DataSource,
            we refer to properties of the SupplyItem object with a <code>valueXPath</code> - this
            is how we are telling the ListGrid to contain the item name.<p>
            This is a simple example, but the SmartClient Server knows how to apply an XPath to 
            a server-side object graph of arbitrary complexity.
            ]]></description>
        </Example>
        -->
        <Example id="flattenedBeans" title="Data Selection" requiresModules="SCServer"
                 dataSource="flattenedBeans_flatUserHB"
                 icon="[ISO_DOCS_SKIN]/images/iconexperience/branch.png"
		         jsURL="serverExamples/hibernate/flattenedBeans/flattenedBeans.js">
            <tabs><tab title="FlatUser.java" canEdit="false" doEval="false"
                       url="serverExamples/hibernate/flattenedBeans/FlatUser.java"/>
                  <tab title="FlatUser.hbm.xml" canEdit="false" doEval="false"
                       url="serverExamples/hibernate/flattenedBeans/FlatUser.hbm.xml"/>
                  <tab title="Address.java" canEdit="false" doEval="false"
                       url="serverExamples/hibernate/flattenedBeans/Address.java"/>
                  <tab title="Address.hbm.xml" canEdit="false" doEval="false"
                       url="serverExamples/hibernate/flattenedBeans/Address.hbm.xml"/>
            </tabs>
            <descriptionHeight>150</descriptionHeight>
            <description><![CDATA[
            This example shows the SmartClient Server's support for flattening and reconstructing
            hierarchical data, by use of XPaths.  The ListGrid below shows each user's address,
            city and state as if those fields were part of the user's data.  In fact, this address
            information is held in a separate Address bean; this information is extracted from 
            the separate bean at fetch time by the SmartClient Server, based purely on the XPath
            declarations of those fields in the dataSource.
            <p>
            More interestingly, the SmartClient Server is also able to reconstruct the hierarchical
            data from the flattened version, again transparently by use of the XPath.  This means
            that you can update the flattened fields in this example - for example, changing a
            user's city - and your changes will be correctly persisted.
            <p>
            Note also that the User bean has a <code>password</code> attribute which is being 
            completely excluded from this example.  When you specify <code>dropExtraFields</code>
            on a DataSource, as we are doing here, SmartClient Server returns just those fields 
            defined in the DataSource.  So, as in this example, you can use existing schema
            whilst easily retaining tight control over what gets delivered to the client.  This 
            includes related entities as well as simple attributes.
            <p>
            Click a record in the grid to see the order's details in the form.  Edit the user
            details and click "Save Changes".  Using the declared XPaths, the SmartClient Server 
            will populate any changed flattened field back into its correct place in the hierarchy,
            allowing the data provider (Hibernate, in this case) to persist the change.
            ]]></description></Example>
        <Example id="hibernateProduction" title="Spring with Beans" requiresModules="SCServer"
                 dataSource="supplyItemSpringDMI"
		         jsURL="dataIntegration/java/hibernateProduction.js">
            <tabs><tab title="Spring applicationContext.xml" canEdit="false" doEval="false"
                       url="dataIntegration/java/applicationContext.xml"/>
                  <tab title="SupplyItemDao.java" canEdit="false" doEval="false"
                       url="dataIntegration/java/SupplyItemDao.java"/>
                  <tab title="SupplyItem.hbml.xml" canEdit="false" doEval="false"
                       url="dataIntegration/java/SupplyItem.hbm.xml"/>
                  <tab title="SupplyItem.java" canEdit="false" doEval="false"
                       url="dataIntegration/java/SupplyItem.java"/>
            </tabs>
            <description><![CDATA[
            This example demonstrates how SmartClient can be used to call pre-existing Spring
            business logic, and provides a general sample of integrating with beans-based
            persistence systems.  <b>NOTE: if you want to use Hibernate in a new application,
            use the built-in HibernateDataSource connector, not this code.</b>  The sample code
            shown here has <b>less features</b> than the built-in connector (which supports
            advanced search, multi-level sort, automatic transactions, and other features).
            <P>
            In this sample, Hibernate's <code>Criteria</code> object can be created
            from SmartClient's <code>DSRequest</code> in order to fulfill the
            "fetch" operation, with data paging enabled.  Hibernate-managed beans can be
            populated with inbound, validated data with a single method call.
            ]]></description></Example>
        <Example id="javaBeans" title="Java Beans" requiresModules="SCServer"
                 dataSource="supplyItemDMI"
                 showDataSource="false"
                 icon="[ISO_DOCS_SKIN]/images/iconexperience/coffeebean.png"
		         jsURL="dataIntegration/java/javaBeans.js">
            <tabs><tab title="SupplyItemFetch.java" canEdit="false" doEval="false"
                       url="dataIntegration/java/SupplyItemFetch.java"/>
                  <tab title="SupplyItem.java" canEdit="false" doEval="false"
                       url="dataIntegration/java/SupplyItem.java"/>
            </tabs>
            <description>
            SmartClient DataSource operations can be fulfilled by returning Java Beans (aka EJBs 
            or POJOs) from your existing business logic.  When you call SmartClient's 
            &lt;code&gt;DSResponse.setData()&lt;/code&gt; API, your Java objects are automatically translated 
            to JavaScript, transmitted to the browser, and provided to the requesting component.
            See the sample implementation of the "fetch" operation in SupplyItemFetch.java
            </description></Example>
        <Example id="DMI" title="DMI" requiresModules="SCServer"
                 dataSource="supplyItemDMI"
                 icon="[ISO_DOCS_SKIN]/images/iconexperience/code_java.png"
		         jsURL="dataIntegration/java/dmi.js">
            <tabs><tab title="SupplyItemDMI.java" canEdit="false" doEval="false"
                       url="dataIntegration/java/SupplyItemDMI.java"/>
                  <tab title="SupplyItem.java" canEdit="false" doEval="false"
                       url="dataIntegration/java/SupplyItem.java"/>
            </tabs>
            <description>
            Direct Method Invocation (DMI) allows you to map DataSource operations directly 
            to Java methods via XML configuration in a DataSource descriptor (.ds.xml file).
            The arguments of your Java methods are automatically populated from the inbound 
            request.  See the sample implementation in SupplyItemDMI.java
            </description></Example>
        <Example
            id="autoTransactionsHB"
            jsURL="serverExamples/hibernate/autoTransactions/autoTransactions.js" 
            requiresModules="SCServer, transactions"
            title="Auto Transactions"
            icon="[ISO_DOCS_SKIN]/images/silkicons/database_gear.png"
            showSkinSwitcher="false"
            showSource="true"
            dataSource="supplyItemHB"
            >
            <description><![CDATA[
            SmartClient Hibernate DataSources participate fully in automatic transaction 
            management (Power and Enterprise Editions only).<p>
            Drag multiple records from the left-hand grid to the right.  SmartClient will 
            send the updates to the server in a single queue; SmartClient Server will 
            automatically treat that queue as a single database transaction.  This is the
            default behavior, and requires no code or config to enable it; if you require
            it, however, very flexible, fine-grained control over transactions is possible,
            through configuration, code or a combination of the two.
            ]]></description>
        </Example>
        <Example id="uploadHB" title="Upload" requiresModules="SCServer"
		jsURL="serverExamples/hibernate/upload/upload.js"><tabs>
		<tab name="mediaLibraryHB" dataSource="mediaLibraryHB" canEdit="false" />
		</tabs>
		    <descriptionHeight>160</descriptionHeight>
		<description><![CDATA[
		This example uses a DynamicForm bound to a DataSource with a field of type "imageFile" to
		enable files to be uploaded and both a <b>ListGrid</b> and <b>TileGrid</b> to display 
		the existing records, via a shared ResultSet.
		<P>
		Enter a Title and select a local image-file to upload and click 'Save' to upload the file.
		Note that the file-size is limited to 50k via the DataSourceField property 
		<i>maxFileSize</i> (see the mediaLibrary tab below).
		<P>
		"imageFile" fields can either display a download/save icon-pair and title, or can render
		the image directly inline.  Use the buttons below to switch between the TileGrid and 
		ListGrid views to see each of these behaviors.  Note that both components can render
		either UI for "imageFile" fields and will do so automatically, according to the value of 
		field.<i>showFileInline</i>.
		]]>
		</description></Example>
    
     </children></ExampleFolder>
    <ExampleFolder title="JPA" isOpen="false" icon="[ISO_DOCS_SKIN]/images/silkicons/server_lightning.png"><description><![CDATA[
        The SmartClient Server's built-in support for JPA/JPA2 allows you to easily use your JPA annotated entities
        in SmartClient's client-side widgets.<p/>
        In server.properties file you can specify entity manager factory acquisition and transaction management mode
        by setting "jpa.emfProvider" property to one of:<ul>
            <li>com.isomorphic.jpa.EMFProviderLMT - for Locally Managed Transactions (LMT)</li>
            <li>com.isomorphic.jpa.EMFProviderNoTransactions - no transactions support</li>
            <li>com.isomorphic.jpa.EMFProviderCMT - for Container Managed Transactions (CMT)</li>
            <li>your own implementation of com.isomorphic.jpa.EMFProviderInterface</li></ul>
        For LMT provider you have to specify "jpa.persistenceUnitName" property specifying PU name.<br/>
        For CMT provider you have to specify "jpa.cmt.entityManager" and "jpa.cmt.transaction" properties
        specifying appropriate resource reference names declared in /WEB-INF/web.xml.<p/>
        When creating DataSource descriptors specify properties:<ul>
            <li>"serverConstructor" to:<ul>
                <li>com.isomorphic.jpa.JPADataSource - for JPA 1.0 implementation</li>
                <li>com.isomorphic.jpa.GAEJPADataSource - for JPA 1.0 implementation for Google Application Engine</li>
                <li>com.isomorphic.jpa.JPA2DataSource - for JPA 2.0 implementation which uses Criteria API</li></ul></li>
            <li>"beanClassName" to fully qualified entity class name</li></ul>
    ]]></description><children>
        <Example
            id="jpaConnector"
            title="Auto Derivation"
            requiresModules="SCServer"
            dataSource="supplyItemJPAAutoDerive"
            jsURL="serverExamples/jpa/jpaConnector.js">
        >
            <tabs>
                <tab
                    title="SupplyItemHB.java"
                    canEdit="false"
                    doEval="false"
                    url="serverExamples/jpa/SupplyItemHB.java"
                />
                <tab
                    title="persistence.xml"
                    canEdit="false"
                    doEval="false"
                    url="serverExamples/jpa/persistence1.xml"
                />
            </tabs>
            <descriptionHeight>150</descriptionHeight>
            <description><![CDATA[
                If you have pre-existing JPA entities, SmartClient can automatically derive fully functional
                DataSources given just the Java classname of the mapped JPA entity.  The grid below is connected
                to a JPA-managed entity via the simple declarations in supplyItemJPAAutoDerive.ds.xml - no other
                configuration or Java code is required beyond the entity itself with JPA mapping, which are
                samples intended to represent a pre-existing JPA entity.
                <p/>
                To search, use the controls above the grid's header. Note that data paging is automatically
                enabled - just scroll down to load data on demand. Click on the red icon next to each record to
                delete it. Click on a record to edit it and click "Add New" to add a new record.  Note that the
                editing controls are type sensitive: a date picker appears for the "Next Shipment" field, and
                the "Units" field shows a picklist because its Java type is an Enum.
                <p/>
                You can use DMI to add business logic that takes place before and after JPA operations to
                enforce security or add additional data validation rules.
            ]]></description>
        </Example>
        <Example
            id="jpa2Connector"
            title="Advanced Filtering"
            requiresModules="SCServer,serverCriteria"
            dataSource="worldJPA2"
            jsURL="serverExamples/jpa/jpa2Connector.js">
        >
            <tabs>
                <tab
                    title="World.java"
                    canEdit="false"
                    doEval="false"
                    url="serverExamples/jpa/World.java"
                />
                <tab
                    title="persistence.xml"
                    canEdit="false"
                    doEval="false"
                    url="serverExamples/jpa/persistence2.xml"
                />
            </tabs>
            <descriptionHeight>150</descriptionHeight>
            <description><![CDATA[
                Use the FilterBuilder to construct queries of arbitrary complexity.  The FilterBuilder,
                and the underlying AdvancedCriteria system, support building queries with subclauses
                nested to any depth. Add clauses to your query with the "+" icon; add nested subclauses
                with the "+()" button. Click "Filter" to see the result in the ListGrid.
                <p/>
                Note that this example is backed by a JPA 2.0 dataSource; the SmartClient Server is 
                automatically generating the JPA Criteria Queries to implement the filters that
                the FilterBuilder can assemble. This works adaptively and seamlessly with client-side 
                Advanced Filtering: the generated Criteria query will yield exactly the same resultset 
                as the client-side filtering.  This means SmartClient is able to switch to client-side
                filtering when its cache is full, giving a more responsive, more scalable application.
                <p/>
                When using JPA 2 make sure you have correctly specified its version in persistence.xml.
            ]]></description>
        </Example>
        <Example
            id="jpaRelationManyToOneSimple"
            title="Many-to-One Relation"
            requiresModules="SCServer"
            jsURL="serverExamples/jpa/relations/jpaRelationManyToOneSimple.js">
        >
            <tabs>
                <tab
                    name="cityManyToOneSimpleJPA"
                    dataSource="cityManyToOneSimpleJPA"
                />
                <tab
                    name="countryManyToOneSimpleJPA"
                    dataSource="countryManyToOneSimpleJPA"
                />
                <tab
                    title="CityManyToOneSimple.java"
                    canEdit="false"
                    doEval="false"
                    url="serverExamples/jpa/relations/CityManyToOneSimple.java"
                />
                <tab
                    title="CountryManyToOneSimple.java"
                    canEdit="false"
                    doEval="false"
                    url="serverExamples/jpa/relations/CountryManyToOneSimple.java"
                />
                <tab
                    title="persistence.xml"
                    canEdit="false"
                    doEval="false"
                    url="serverExamples/jpa/relations/persistenceManyToOneSimple.xml"
                />
            </tabs>
            <descriptionHeight>200</descriptionHeight>
            <description><![CDATA[
                SmartClient handles JPA Many-to-One relations transparently, such as Cities which belong
                to Countries.  Just declare a foreignKey field on the City DataSource to indicate you
                want to use the related JPA entity Country.
                <P>
                The grid below shows Cities, but the Country name is automatically shown even though the
                countryName is stored in the related JPA entity Country.  Any fields from any number of
                related entities can be automatically loaded this way.
                <P>
                Click to edit and change the Country of a City.  The list of Countries is automatically
                loaded from the related JPA entity, along with their IDs (not shown).  
                <P>
                Changing the Country of a City sends the ID of the new Country back to the server, and
                SmartClient automatically makes all the required JPA calls to persist the change - no
                server-side code needs to be written beyond the JPA beans themselves and their
                annotations.
            ]]></description>
        </Example>
        <Example
            id="jpaRelationOneToMany"
            title="One-to-Many Relation"
            requiresModules="SCServer"
            jsURL="serverExamples/jpa/relations/jpaRelationOneToMany.js">
        >
            <tabs>
                <tab
                    name="cityOneToManyJPA"
                    dataSource="cityOneToManyJPA"
                />
                <tab
                    name="countryOneToManyJPA"
                    dataSource="countryOneToManyJPA"
                />
                <tab
                    title="CityOneToMany.java"
                    canEdit="false"
                    doEval="false"
                    url="serverExamples/jpa/relations/CityOneToMany.java"
                />
                <tab
                    title="CountryOneToMany.java"
                    canEdit="false"
                    doEval="false"
                    url="serverExamples/jpa/relations/CountryOneToMany.java"
                />

                <tab
                    title="persistence.xml"
                    canEdit="false"
                    doEval="false"
                    url="serverExamples/jpa/relations/persistenceOneToMany.xml"
                />
            </tabs>
            <descriptionHeight>150</descriptionHeight>
            <description><![CDATA[
                SmartClient handles JPA One-to-Many relations transparently, such as a Country which has
                multiple Cities.  Just declare a collection field (multiple:true) on the Country
                DataSource to indicate you want to load its list of Cities.
                <P>
                Click on a Country below - its list of Cities is revealed without a new trip to the
                server.  Cities can be now edited in the lower grid.  
                <P>
                When data is saved, all changes to the Country and its Cities are sent in one save
                request, and SmartClient automatically makes all the required JPA calls to persist the
                changes - no server-side code needs to be written beyond the JPA beans themselves and
                their annotations.
            ]]></description>
        </Example>
    </children></ExampleFolder>
     <ExampleFolder id="transactionsFolder" title="Transactions" isOpen="false" icon="[ISO_DOCS_SKIN]/images/silkicons/server_lightning.png"><description><![CDATA[
            SmartClient provides robust support for transactional applications.
            <P>
            <b>Queuing</b> allows you to easily combine operations together into a single
            transaction, for more efficient data loading and transactional saves.
            <P>
            <b>Automatic Transaction Management</b> support in the SmartClient Server, with 
            specific implementations for the built-in SQL and Hibernate DataSources, allows 
            for queued requests to be committed or rolled back as a single database transaction.
            This feature is only available in Power and Enterprise editions.
            <P>
            <b>Transaction Chaining</b> allows you to declaratively handle data dependencies
            between operations submitted together in a queue.  This feature is only available
            in Power and Enterprise editions.
     ]]></description><children>
        <Example
            title="Simple Queuing" requiresModules="SCServer"
            id="queuing"
            jsURL="serverExamples/hibernate/queuing/queuing.js"><tabs>
            <tab name="queuing_user" dataSource="queuing_userHB" canEdit="false" />
            <tab name="queuing_order" dataSource="queuing_order" canEdit="false" />
            <tab title="User.java" 
                 url="serverExamples/hibernate/queuing/User.java" 
                 canEdit="false" doEval="false"/>
            <tab title="User.hbm.xml" 
                 url="serverExamples/hibernate/queuing/User.hbm.xml" 
                 canEdit="false" doEval="false"/>
            </tabs>
            <descriptionHeight>150</descriptionHeight>
            <description><![CDATA[
            Queuing allows any set of DataSource operations to be combined into a single HTTP
            request, without requiring any special code to be written to transport the combined
            inputs and outputs.
            <p>
            Click the "Find Orders" button and the example will load both the selected user's
            details and all the orders associated with that user, as a single request.
            Queuing works transparently to the components involved, so for example, scrolling down
            in the orders grid causes data paging to be activated, exactly as though the grid had
            done a fetch that was not combined into a queue.  
            <P>
            Since queuing is transparent to components, a screen full of various components
            which need to load data from different sources can participate in a queue without
            any special component-specific code, and with no need to rework how data is
            transferred if new components are added - each component can be treated as though
            it were standalone.
            <P>
            Server-side, queuing allows you to focus on simple, secure, reusable data
            operations and other services, which can then be accessed in arbitrary combinations
            according to the data loading and saving requirements of particular screens, with
            no need to write brittle, screen-specific server code.
            <P>
            Queuing works even when the operations are on different data providers (as in this 
            case, where the user details are coming from Hibernate and the order details are coming
            from the SmartClient Server SQL provider).
            ]]></description>
        </Example>
        <Example
            id="autoTransactions"
            jsURL="serverExamples/transactions/autoTransactions/autoTransactions.js" 
            requiresModules="SCServer, transactions"
            title="Automatic Transaction Management"
            icon="[ISO_DOCS_SKIN]/images/silkicons/database_gear.png"
            showSkinSwitcher="false"
            showSource="true"
            dataSource="supplyItem"
            >
            <description><![CDATA[
            Drag multiple records from the left-hand grid to the right.  SmartClient will 
            send the updates to the server in a single queue; SmartClient Server will 
            automatically treat that queue as a single database transaction.  This is the
            default behavior, and requires no code or config to enable it; if you require
            it, however, very flexible, fine-grained control over transactions is possible,
            through configuration, code or a combination of the two.
            ]]></description>
        </Example>
        <Example
            title="Master/Detail Add" requiresModules="SCServer, chaining"
            id="queuedAdd"
            icon="[ISO_DOCS_SKIN]/images/silkicons/table_row_insert.png"
            jsURL="serverExamples/sql/queuedAdd/queuedMasterDetailAdd.js"><tabs>
            <tab name="order" dataSource="queuedAdd_order" canEdit="false" />
            <tab name="orderItem" dataSource="queuedAdd_orderItem" canEdit="false" />
            <tab name="supplyItem" dataSource="supplyItem" canEdit="false" />
            <tab name="supplyCategory" dataSource="supplyCategory" canEdit="false" />
            </tabs>
            <descriptionHeight>150</descriptionHeight>
            <description><![CDATA[
            This example makes use of the SmartClient server's support for setting DSRequest 
            properties dynamically at runtime, based on responses to requests earlier in the 
            same queue.<p>
            Edit the order header details, then add one or more lines.  When you click "Save 
            Order", SmartClient will send multiple DataSource requests to the server - one to
            save the order header, and one each for however many lines you enter - but it will combine
            them into a single HTTP request, so that a transactional commit is possible. Since
            this sample is backed by SmartClient SQLDataSources, the queue is 
            automatically assembled into a single transaction (in Power Edition and above).<p>
            New orders are given an automatically generated sequence value as a primary
            key, and the orderItems need this value in order to establish a relationship with
            their order.<P>
            As a result of the <code>&lt;values&gt;</code> tag in the <code>queuedAdd_orderItem</code>
            DataSource definition, the server will set the "orderID" property on each order
            item to the unique sequence value assigned to the order header when it was
            saved.<P>
            This entire interaction is accomplished by simply re-using the capability of the
            DataSource to add new records, without the need to write any server-side
            code.  SQL DataSources are shown, but this interaction works with any DataSource
            that can support CRUD operations, including custom DataSources and even a mix of
            DataSources that use different storage systems.<P>
            The <code>&lt;values&gt;</code> tag (and the similar 
            property <code>&lt;criteria&gt;</code> tag) are specified using the Velocity
            Template Language, so the support is very flexible.<P>
            ]]></description>
        </Example>
        <Example title="Mass Update" ref="massUpdate" 
            icon="[ISO_DOCS_SKIN]/images/silkicons/arrow_out.png">
        <descriptionHeight>120</descriptionHeight>
        <description><![CDATA[
        <b>Click</b> on any cell to start editing, then <b>Tab</b> or <b>Down Arrow</b> past the
        last row in the grid to create a new row. Alternatively, click the <b>Edit New</b> button
        to create a new data-entry row at the end of the grid.  When you click the "Save" button
        all your changes - changed rows and new ones - are sent to the server in a queue, as a 
        single HTTP request.<p>
        Because all your changes arrive on the server at once, committing them as a single 
        transaction becomes possible; if you are using the built-in SQL or Hibernate dataSources,
        and have Power edition or above, automatic transactional commit is the default.  And 
        because SmartClient's queuing support is completely inobtrusive and requires no extra 
        code on either client or server, as soon as you have an operation that can update a 
        single record, you automatically have an operation that can participate in SmartClient
        queued updates and automatic transactional commits.
        ]]></description>
        </Example>
        <Example title="Multi-Row Drag &amp; Save" ref="databoundDragCopy" 
            icon="[ISO_DOCS_SKIN]/images/silkicons/table_go.png"> 
        <descriptionHeight>160</descriptionHeight>
        <description><![CDATA[
        Drag employee records into the Project Team Members list.  SmartClient recognizes that the 
        two dataSources are linked by a foreign key relationship, and automatically uses that 
        relationship to populate values in the records that are added when you drop. SmartClient 
        also populates fields based on current criteria and maps explicit titleFields as necessary.<p>
        Multi-row selection is enabled on the Employees grid, so you can select multiple employees 
        and drag them to the Teams grid in one go.  Because the grids are databound, this drag and 
        drop action will send data operations to the server automatically, using SmartClient 
        queuing to ensure all the updates arrive on the server together and, since this example
        is backed by a SmartClient SQLDataSource, are committed together in a single database 
        transaction (in Power edition and above).<p>
        All of this just works, there is no coding needed to enable it.
        ]]> </description>
        </Example> 
        <Example
            id="rollback"
            jsURL="serverExamples/transactions/rollback/rollback.js" 
            requiresModules="SCServer, transactions"
            title="Rollback"
            icon="[ISO_DOCS_SKIN]/images/silkicons/arrow_undo.png"
            showSkinSwitcher="false"
            showSource="true"
            descriptionHeight="140"
            >
            <tabs>
              <tab name="rbCountryTransactions" dataSource="rbCountryTransactions" canEdit="false" />
              <tab name="worldDS" dataSource="worldDS" canEdit="false" />
            </tabs>
            <description><![CDATA[
            SmartClient Server detects when a DSRequest that is part of a transaction fails,
            and automatically rolls the transaction back.<p>
            Change several records in the grid, then click "Save".  The underlying DataSource 
            specifies a "hasRelatedRecord" validation on the country name, looking up against 
            all the countries of the world; if you change a country's name to something 
            non-existent, that validation will fail and the entire transaction will be rolled
            back.  All of your changes will remain pending (the changed values will still be 
            shown in blue), and if you refresh the page you can verify that the data is 
            unchanged on the server.<p>
            If you correct the validation error and click "Save" again, the transaction will 
            be committed and your changes will be persisted.
            ]]></description>
        </Example>
        <Example
            id="jdbcOperations"
            jsURL="serverExamples/transactions/jdbcOperations/jdbcOperations.js" 
            requiresModules="SCServer, transactions"
            title="Transactional User Operations"
            icon="[ISO_DOCS_SKIN]/images/silkicons/user_go.png"
            showSkinSwitcher="false"
            showSource="true"
            descriptionHeight="150"
            >
            <tabs>
              <tab name="countryTransactions" dataSource="countryTransactions" canEdit="false" />
              <tab name="lastUpdated" dataSource="lastUpdated" canEdit="false" />
              <tab name="JDBCOperations.java" 
                   url="serverExamples/transactions/jdbcOperations/JDBCOperations.java" 
                   canEdit="false" doEval="false" />
            </tabs>
            <description><![CDATA[
            User-written operations - in this example, hand-crafted JDBC updates - can be 
            included in SmartClient automatic transactions, and will be committed or rolled 
            back alongside the normal SmartClient operations.<p>
            Edit rows in the grid, then click "Good Save".  Your changes will be 
            persisted to the database as part of a queue that also includes a user-written 
            JDBC update to a "lastChanged" table; the DMI method has been written to use 
            the SmartClient transaction (see the <code>JS</code> and 
            <code>JDBCOperations.java</code> tabs).  The example will then fetch the current 
            value from the lastUpdated table and display it in the blue label; you will see 
            that it has been updated.<p>
            Now make further changes and click "Bad Save".  This causes a deliberately 
            broken version of the user-written JDBC update to be run, resulting in a SQL error
            and a rolled-back transaction (and an error dialog referring to an unknown column).  
            Note that your changes have not been saved (they
            are still presented in blue, to show that they are pending) and the "last updated"
            label has not changed; the entire transaction, both SmartClient requests and 
            user-written query, has been rolled back.  If you now click "Good Save", your pending
            changes will be persisted and the "last updated" label will change to reflect this.
            ]]></description>
        </Example>
        <!-- Example - *** WORK IN PROGRESS! ***
            id="userTransactions"
            jsURL="serverExamples/transactions/userTransactions/userTransactions.js" 
            requiresModules="SCServer"
            title="User-Created Transactions"
            icon="[ISO_DOCS_SKIN]/images/silkicons/database_gear.png"
            showSkinSwitcher="false"
            showSource="true"
            descriptionHeight="120"
            >
            <tabs>
              <tab name="countryTransactions" dataSource="countryTransactions" canEdit="false" />
              <tab name="lastUpdated" dataSource="lastUpdated" canEdit="false" />
              <tab name="userTransactionsServerSide.jsp" 
                   url="serverExamples/transactions/userTransactions/userTransactionsServerSide.jsp" 
                   canEdit="false" doEval="false" />
            </tabs>
            <description><![CDATA[
            Edit rows in the grid, then click "Good Save".  Your changes will be 
            persisted to the database as part of a transaction that also includes a user-
            written JDBC update to a "lastChanged" table (see the 
            <code>userTransactionsServerSide.jsp</code> tab).  The example will then fetch
            the current value from the lastUpdated table and display it in the blue label;
            you will see that it has been updated.<p>
            Now make further changes and click "Bad Save".  This causes a deliberately 
            broken version of the user-written JDBC update to be run, resulting in a SQL error
            and a rolled-back transaction.  Note that your changes have not been saved (they
            are still presented in blue, to show that they are pending) and the "last updated"
            label has not changed; the entire transaction, both SmartClient requests and 
            user-written query, has been rolled back.  If you now click "Good Save", your pending
            changes will be persisted and the "last updated" label will change to reflect this.
            ]]></description>
        </Example -->
    </children></ExampleFolder>
    <ExampleFolder title="Custom DataSources" isOpen="false" 
                   icon="[ISO_DOCS_SKIN]/images/silkicons/server_lightning.png"><description>
        Examples showing how to leverage the SmartClient Server to create partially or completely
        customized DataSource implementations.
    </description><children>
        <Example
            id="javabeanWizard"
            jsURL="serverExamples/other/vb_Javabean.js" requiresModules="SCServer"
            title="Javabean Wizard"
            icon="[ISO_DOCS_SKIN]/images/iconexperience/coffeebean.png"
            showSkinSwitcher="false"
            showSource="false"
            ><description><![CDATA[
            SmartClient's Visual Builder tool provides an extremely easy and completely codeless 
            way to create DataSources based on your existing Javabeans and POJOs.  Click
            the "New" button, select "JavaBean", and enter the name of an existing Javabean 
            class.  Visual Builder will create a DataSource descriptor that is almost complete -
            just connect it up to your custom DataSource implementation with the 
            <code>serverConstructor</code> property and it's ready to go.
            ]]></description></Example>
        <Example
            title="Simple (Hardcoded)" requiresModules="SCServer"
            id="customDataSource"
            icon="[ISO_DOCS_SKIN]/images/silkicons/table_row_insert.png"
            jsURL="serverExamples/other/customDataSource/customDataSource.js"><tabs>
            <tab name="user" dataSource="customDataSource_user" canEdit="false" />
            <tab title="UserDataSource.java" 
                 url="serverExamples/other/customDataSource/UserDataSource.java" 
                 canEdit="false" doEval="false"/>
            </tabs>
            <descriptionHeight>150</descriptionHeight>
            <description><![CDATA[
            This example shows an entirely custom DataSource.  It is created by extending 
            <code>BasicDataSource</code> and implementing the four core CRUD methods.  In this 
            case, we maintain a static List of Maps that is initialized with hard-coded data
            every time the server starts; but of course, this code could do <i>anything</i>. This 
            approach allows completely custom data operations to be simply plugged in to the
            SmartClient Server framework.<p>
            Note also that this code deals directly with Java <code>Map</code>s and 
            <code>List</code>s, without worrying about format conversions - even custom code 
            leverages the SmartClient Server's automatic and transparent translation of request
            data, from JSON to Java and back to JSON.
            ]]></description>
        </Example>
        <Example
            title="ORM DataSource" requiresModules="SCServer"
            id="ormDataSource"
            icon="[ISO_DOCS_SKIN]/images/iconexperience/objects_exchange.png"
            jsURL="serverExamples/other/ormDataSource/ormDataSource.js"><tabs>
            <tab name="ormDataSource_country" dataSource="ormDataSource_country" canEdit="false" />
            <tab title="ORMDataSource.java" 
                 url="serverExamples/other/ormDataSource/ORMDataSource.java" 
                 canEdit="false" doEval="false"/>
            <tab title="Country.java" 
                 url="serverExamples/other/ormDataSource/Country.java" 
                 canEdit="false" doEval="false"/>
            <tab title="Country.hbm.xml" 
                 url="serverExamples/other/ormDataSource/Country.hbm.xml" 
                 canEdit="false" doEval="false"/>
            </tabs>
            <descriptionHeight>220</descriptionHeight>
            <description><![CDATA[
            This example shows an entirely custom DataSource that connects SmartClient Server to
            Hibernate. It is very simple implementation created by extending <code>BasicDataSource</code>
            and implementing the four core CRUD methods. In this case, single DataSource
            implementation handles single Hibernate entity. Features like data pagination, server-side sorting
            and filtering are not implemented here.<p>
            Creating an equivalent adapter for Toplink or Ibatis or some other ORM solution would
            be a fairly simple matter of replacing the Hibernate-specific code in this example
            with the equivalent specifics from the other ORM system.
            <p>
            As with the other custom DataSource examples, note how the <code>ORMDataSource.java</code> 
            code deals entirely in native Java objects - even entirely custom DataSources benefit
            from SmartClient Server's robust and comprehensive Javascript<->Java translation.
            ]]></description>
        </Example>
        <Example
            title="Reusable ORM DataSource" requiresModules="SCServer"
            id="reusableORMDataSource"
            icon="[ISO_DOCS_SKIN]/images/iconexperience/objects_exchange.png"
            jsURL="serverExamples/other/reusableORMDataSource/reusableORMDataSource.js"><tabs>
            <tab name="reusableORMDataSource_supplyItem" dataSource="reusableORMDataSource_supplyItem" canEdit="false" />
            <tab name="reusableORMDataSource_country" dataSource="reusableORMDataSource_country" canEdit="false" />
            <tab title="ReusableORMDataSource.java"
                 url="serverExamples/other/reusableORMDataSource/ReusableORMDataSource.java"
                 canEdit="false" doEval="false"/>
            <tab title="SupplyItemHB.java"
                 url="serverExamples/other/reusableORMDataSource/SupplyItemHB.java"
                 canEdit="false" doEval="false"/>
            <tab title="Country.java"
                 url="serverExamples/other/reusableORMDataSource/Country.java"
                 canEdit="false" doEval="false"/>
            <tab title="Country.hbm.xml"
                 url="serverExamples/other/reusableORMDataSource/Country.hbm.xml"
                 canEdit="false" doEval="false"/>
            </tabs>
            <descriptionHeight>220</descriptionHeight>
            <description><![CDATA[
            This example shows an entirely custom DataSource that connects SmartClient Server to
            Hibernate (note that this is just an example of the principles involved - SmartClient
            Server's built-in Hibernate support is considerably more sophisticated than the
            simple adapter shown here).  It is created by extending <code>BasicDataSource</code>
            and implementing the four core CRUD methods.  In this case, we connect DataSource
            requests to Hibernate <code>Criteria</code> queries and the <code>saveOrUpdate</code>
            method.<p>
            This implementation, though simple, is fully functional and could be used unchanged
            in a real application.  It supports all four CRUD operations, plus data pagination,
            server-side sorting and filtering, client cache synchronization, and of course it
            is actually persisting the data to a real database. In this case, single DataSource
            implementation handles two different entities using reflrection.
            Note that it is simplified version of built-in connector which handles AdvancedCriteria
            filtering.<p>
            As with the other custom DataSource examples, note how the <code>ORMDataSource.java</code>
            code deals entirely in native Java objects - even entirely custom DataSources benefit
            from SmartClient Server's robust and comprehensive Javascript<->Java translation.
            ]]></description>
        </Example>
		
		<Example
            title="Editable Server-Side DataSource"
            id="editableServerSideDataSource"
            jsURL="serverExamples/other/editableServerSideDataSource/editableServerSideDataSource.js"
            requiresModules="SCServer"
            dataSource="dynamicDSFields">
            <tabs>
                <tab title="DynamicDSFields.data.xml"
                     url="serverExamples/other/editableServerSideDataSource/dynamicDSFields.data.xml"
                     canEdit="false" doEval="false"/>
                <tab title="GeneratorSetup.java"
	                 url="serverExamples/other/editableServerSideDataSource/GeneratorSetup.java"
                     canEdit="false" doEval="false"/>
            </tabs>
            <descriptionHeight>100</descriptionHeight>
            <description><![CDATA[
           	This example demonstrates a DataSource whose definition is stored in a SQL database rather
		    than in a static .ds.xml file.  You can edit the fields of the DataSource in the grid
		    below, then press "Reload" to see a DynamicForm bound to the modified DataSource.
		    <P>
		    You can use this pattern to allow your end users to dynamically change the definition of
		    DataSources in your application - for example, add new fields, or add additional validators
		    to existing fields.
            ]]></description>
        </Example>
    </children></ExampleFolder>

    <ExampleFolder
    showSkinSwitcher="true"
    title="Export"
    isOpen="false"
    icon="[ISO_DOCS_SKIN]/images/silkicons/arrow_out.png"><description>
    Exporting Data from DataSources and DataBoundComponents.
    </description><children>

    <Example title="Excel Export" ref="export" 
        icon="[ISO_DOCS_SKIN]/images/silkicons/arrow_out.png"/>

    <Example
        id="formattedExport"
        title="Formatted Export"
        requiresModules="SCServer"
        icon="[ISO_DOCS_SKIN]/images/silkicons/arrow_out.png"
        descriptionHeight="100"
        jsURL="grids/formattedExport.js"><tabs>
        <tab title="worldDSExport" url="grids/ds/worldSQLDSExport.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
            You can export the client-side data from a DataBoundComponent.  That is, the data 
            as seen in a component, including the effects of client-side formatters.
            <p>In the example below, choose an export format from the select-list, decide 
            whether to download the results or view them in a window using the checkbox and 
            click the Export button.  
            <p>Data is exported according to the filters and sort-order on the grid and includes
            the formatted values and field-titles as seen in the grid.
        ]]></description></Example>
        
    <Example
        id="customExport"
        title="Custom Export"
        requiresModules="SCServer"
        icon="[ISO_DOCS_SKIN]/images/silkicons/arrow_out.png"
        jsURL="serverExamples/sql/customExport/customExport.js"><tabs>
        <tab title="CustomExportDMI.java" 
             url="serverExamples/sql/customExport/CustomExportDMI.java"
             canEdit="false" doEval="false"/>
        <tab title="worldDSExportCustom" 
                url="serverExamples/sql/customExport/worldDSExportCustom.ds.xml" 
                canEdit="false" />

        </tabs><description><![CDATA[
            You can produce a <i>formatted</i> export using DMI and affecting data server-side.
            This example shows a normal export via a DMI in an operationBinding, where the DMI
            enhances the exported data, formatting the <i>Independence</i> date field and 
            adding a calculated field <i>gdppercapita</i> at the server-side.
            <p>Choose an Export-Format from the select-list, decide 
            whether to download the results or view them in a window using the checkbox and 
            click the Export button.  In this case, exporting to all formats is achieved via
            operationBindings that specify the server DMI and, in the case of exports to JSON,
            also the <i>exportAs</i> flag.  See the <i>JS</i> and <i>worldDSExportCustom</i> 
            tabs below.
        ]]></description></Example>

    <Example
        id="customExportCustomResponse"
        title="Custom Export (Custom Response)"
        requiresModules="SCServer"
        icon="[ISO_DOCS_SKIN]/images/silkicons/arrow_out.png"
        jsURL="serverExamples/sql/customExport/customExportCustomResponse.js"><tabs>
        <tab title="CustomExportCustomResponseDMI.java" 
             url="serverExamples/sql/customExport/CustomExportCustomResponseDMI.java"
             canEdit="false" doEval="false"/>
        <tab title="supplyItemExport.ds.xml" 
                url="serverExamples/sql/customExport/supplyItemExport.ds.xml" 
                canEdit="false" />

        </tabs><description><![CDATA[
            You can export entirely custom data via a DMI.  Click the button to issue a call
            to dataSource.exportData() with an operationId that specifies a server DMI.  In
            this example, the DMI method ignores all the regular export parameters, calls
            doCustomResponse() and writes directly into the response output stream.
        ]]></description></Example>

        </children>
    </ExampleFolder>
        
    <ExampleFolder showSkinSwitcher="true" title="Real-Time Messaging" isOpen="false">
	    <description>
	     RTM module provides low-latency, high data volume streaming
         capabilities for latency-sensitive applications such as trading desks and operations
         centers.
	    </description>
    	<children>
		    <Example id="portfolioGrid" title="Portfolio Grid" requiresModules="RealtimeMessaging"
		        jsURL="serverExamples/other/rtm/stockQuotes.js" dataSource="stockQuotes" showDataSource="true" >
		        <tabs>
		            <tab title="stockQuotesData" url="serverExamples/other/rtm/stockQuotes.data.xml" canEdit="false" doEval="false"/>
		        </tabs>
			    <descriptionHeight>100</descriptionHeight>
		        <description><![CDATA[
		        The grid below is receiving simulated, real-time updates of stock data via the Real Time Messaging
		        (RTM) module.  The RTM module provides low-latency, high data volume streaming
		        capabilities for latency-sensitive applications such as trading desks and operations
		        centers.
		        <P>
		        Randomly generated updates will stream from the server for 90 seconds - click 'Generate
		        Data' to restart streaming.  
		        <P>
		        The RTM module can connect to Java Message Service (JMS) channels without writing any
		        code, or can be connected to custom messaging solutions with a simple adapter.
		        ]]>
		        </description>
		    </Example>
		        
			<Example id="stockQuotesChart" title="Stock Chart" requiresModules="Drawing,Analytics,RealtimeMessaging"
		        jsURL="serverExamples/other/rtm/stockQuotesChart.js" dataSource="stockQuotes" showDataSource="true" >
		        <tabs>
		            <tab title="stockQuotesData" url="serverExamples/other/rtm/stockQuotes.data.xml" canEdit="false" doEval="false"/>
		        </tabs>
			    <descriptionHeight>100</descriptionHeight>
		        <description><![CDATA[
		        The chart below is receiving simulated, real-time updates to stock values via the Real
		        Time Messaging (RTM) module.  The RTM module provides low-latency, high data
		        volume streaming capabilities for latency-sensitive applications such as
		        trading desks and operations centers.
		        <P>
		        Randomly generated updates will stream from the server for 90 seconds - click 'Generate
		        More Updates' to restart streaming.  
                <P>
                Right click on the chart to switch the type of visualization.
		        ]]>
		        </description>
		    </Example>
        </children>
    </ExampleFolder>
    
    <Example id="upload" title="Upload" requiresModules="SCServer"
        jsURL="serverExamples/sql/upload/upload.js"><tabs>
        <tab name="mediaLibrary" dataSource="mediaLibrary" canEdit="false" />
        </tabs>
	    <descriptionHeight>160</descriptionHeight>
        <description><![CDATA[
        This example uses a DynamicForm bound to a DataSource with a field of type "imageFile" to
        enable files to be uploaded and both a <b>ListGrid</b> and <b>TileGrid</b> to display 
        the existing records, via a shared ResultSet.
        <P>
        Enter a Title and select a local image-file to upload and click 'Save' to upload the file.
        Note that the file-size is limited to 50k via the DataSourceField property 
        <i>maxFileSize</i> (see the mediaLibrary tab below).
        <P>
        "imageFile" fields can either display a download/save icon-pair and title, or can render
        the image directly inline.  Use the buttons below to switch between the TileGrid and 
        ListGrid views to see each of these behaviors.  Note that both components can render
        either UI for "imageFile" fields and will do so automatically, according to the value of 
        field.<i>showFileInline</i>.
        ]]>
        </description></Example>

    <Example id="batchUpload" title="Batch Upload" requiresModules="SCServer, batchUploader"
             dataSource="supplyItemHB"
             icon="[ISO_DOCS_SKIN]/images/iconexperience/server_from_client.png"
             jsURL="serverExamples/other/batchUpload/batchUploadExample.js">
        <descriptionHeight>100</descriptionHeight>
        <description><![CDATA[
        This example shows the BatchUploader in action.  The BatchUploader encapsulates the 
        end-to-end process of importing flat data into a DataSource, including validation of
        the import data, all without any client- or server-side code required.
        <P>
        Follow the instructions in the example.  Note that the download link is provided to 
        give you some suitable example data to try with the BatchUploader - you would not
        normally download this, of course.
        ]]></description></Example>

    <Example title="HTTP Proxy" ref="rssFeed" requiresModules="SCServer">
            <descriptionHeight>150</descriptionHeight>
        <description><![CDATA[
            The SmartClient Server includes an HTTP Proxy servlet which allows you to contact REST and
            WSDL web services as though they were hosted by your web server, avoiding the "same origin
            policy" restriction which normally prevents web applications from accessing remote
            services.
            <P>
            The proxy is used automatically whenever you attempt to contact a URL on another host - no
            special code is needed.  In this example, a DataSource is configured to download the
            Slashdot RSS feed, with no server-side code or proxy configuration required.
            <P>
            Configuration files allow you to restrict proxying to specific
            services you wish to allow users to contact through your application.
        ]]></description>
    </Example>
    
</children></ExampleFolder>

<!-- Charts -->
<ExampleFolder title="Charting" requiresModules="Drawing,PluginBridges,Analytics" isOpen="false" icon="[ISO_DOCS_SKIN]/images/silkicons/chart_bar.png">
<description><![CDATA[
    SmartClient supports advanced charting components that work in all supported browsers,
    including mobile browsers, without requiring plugins and without writing browser-specific
    code.
    <P>
    SmartClient charting components are data-aware, and allow end users to switch both the type
    of chart and the placement of data on the fly.
]]></description><children>
    <Example title="Simple Chart" id="simpleChart" jsURL="charts/simpleChart.js" requiresModules="Drawing,PluginBridges,Analytics">
        <description><![CDATA[
            <p>Charts can be created with inline Javascript data.</p>

            <p>Use the "Chart Type" selector below to see same data rendered by multiple different chart types.
            You can also right-click on the chart to change the way data is visualized.</p>
        ]]></description>
    </Example>
    <Example title="Multi-Series Chart"
             id="multiSeriesChart"
             jsURL="charts/multiSeriesChart.js"
             requiresModules="Drawing,PluginBridges,Analytics">
        <tabs>
            <tab url="charts/multiSeriesData.js" title="Data" />
        </tabs>
        <description><![CDATA[
            <p>Multi-series charts can be viewed with "stacked" data (to show totals) or "unstacked" to compare
            values from each series. The "Area" chart type defaults to using stacked data, while the "Line" chart
            type defaults to unstacked. You can use the default setting, or explicitly specify whether to stack data.</p>
            <p>Use the "Chart Type" selector to see same data rendered by multiple different chart types.
            You can also right-click on the chart to change the way data is visualized.</p>
        ]]></description>
    </Example>
    <Example title="Grid Charting" id="gridCharting" jsURL="charts/gridChart.js" requiresModules="Drawing,PluginBridges,Analytics">
        <description>
        Data loaded into a ListGrid can be charted with a single API call.
        &lt;P&gt;
        Use the "Chart Type" selector below to see same data rendered by multiple different
        chart types.  You can also right-click on the chart to change the way data is
        visualized.
        &lt;P&gt;
        Edit the data in the grid to have the chart regenerated automatically.
        </description>
    </Example>
    <Example title="Dynamic Data"
             id="dynamicDataCharting"
             jsURL="charts/dynamicData.js"
             dataSource="productRevenue"
             requiresModules="Drawing,PluginBridges,Analytics">
        <descriptionHeight>140</descriptionHeight>
        <description><![CDATA[
            <p>Charts can be created directly from a DataSource without a ListGrid.</p>
            <p>Use the "Time Period" menu to change the criteria passed to the DataSource.</p>
            <p>Use the "Chart Type" selector below to see same data rendered by multiple different chart types.
            You can also right-click on the chart to change the way data is visualized.</p>
        ]]></description>
    </Example>
    <Example title="CubeGrid Charting" ref="analytics" requiresModules="Drawing,PluginBridges,Analytics">
       <description>
       This example shows binding to a multi-dimensional dataset, where each cell value has a
       series of attributes, called "facets", that appear as headers labelling the cell value.
       Drag facets onto the grid to expand the cube model.&lt;BR&gt;
       Right click on any cell and pick "Chart" to chart values by any two facets.
       </description>
    </Example>
    <Example title="Log Scaling" jsURL="charts/logScaling.js" requiresModules="Drawing,PluginBridges,Analytics">
        <tabs>
            <tab title="Data" url="charts/sp500.js" />
        </tabs>
        <description><![CDATA[
            Charts can use logarithmic scaling, which shows equal percentage changes as the same
            difference in height.  This is useful for data that spans a very large range.
        ]]></description>
    </Example>
    <Example title="Interactive Data Points"
             jsURL="charts/dataPoints.js"
             requiresModules="Drawing,PluginBridges,Analytics">
        <tabs>
            <tab title="Data" url="charts/animalData.js" />
        </tabs>
        <description><![CDATA[
            <p>The data points in a chart can be interactive. Hover over a data point to see additional information,
            and click to edit.</p>
        ]]></description>
    </Example>
</children></ExampleFolder>

<ExampleFolder title="Drag &amp; Drop" isOpen="false" ref="dragDropExamples"/>


<!-- Control -->
<ExampleFolder title="Control" isOpen="false" icon="[ISO_DOCS_SKIN]/images/silkicons/brick.png">
<description>
    Navigation and action controls.
</description><children>
    <ExampleFolder title="Buttons" isOpen="false" icon="[ISO_DOCS_SKIN]/images/silkicons/brick.png"><description>
    SmartClient buttons are visually appealing, easily skinned, and easy to use.
    </description><children>
        <Example title="Appearance"
                 id="buttonAppearance"
                 jsURL="actions/buttons/appearance.js"
                 showSkinSwitcher="true">
            <description>
            Buttons come in three basic types: CSS buttons, single-image buttons, and 
            multiple-image stretch buttons.  All share a basic set of capabilities.
        </description></Example>
        <Example title="States" id="buttonStates" jsURL="actions/buttons/states.js"
                 css="actions/buttons/states.css"><description>
            Move the mouse over the buttons, and click and hold to see buttons in different
            states.  Click "Disable All" to put all buttons in the disabled state.
            
            Edit the CSS style definitions to change the appearance of various states.
        </description></Example>
        <Example title="Icons" id="buttonIcons" jsURL="actions/buttons/icons.js"><description>
            Click and hold on the "Save" button to see the icon change as the button goes
            down.  Note that the binoculars icon does not change when the button goes down.
            Click "Disable Save" to see the icon change to reflect disabled state.
            
            Button icons can be left or right oriented, and can optionally react to any the
            state of the button.
        </description></Example>
        <Example title="Auto Fit"
                 id="buttonAutoFit"
                 jsURL="actions/buttons/autoFit.js"><description>
            Buttons can automatically size to accommodate the title and icon, and resize
            automatically when the title is changed, notifying components around them they have
            changed size.
        </description></Example>
        <Example title="Radio / Toggle Behavior"
                 id="buttonRadioToggle"
                 jsURL="actions/buttons/radioCheckbox.js"><description>
            Click on the buttons for Bold, Italic, and Underline and note that they stick in a
            down state.  Click on the buttons for left, center and right justify and note that
            they are mutually exclusive.
        </description></Example>

    </children></ExampleFolder>

    <ExampleFolder title="Menus" isOpen="false" showSkinSwitcher="true" icon="[ISO_DOCS_SKIN]/images/silkicons/application_osx.png">
    <description>
    Dynamic, appealing menus that can bind directly to data.
    </description><children>
        <Example id="fullMenu" title="Appearance" jsURL="actions/menus/appearance.js"><description>
            Click "File" to see a typical File menu with icons, submenus, checks,
            separators, disabled items, and keyboard shortcut hints.  Note the beveled edge and
            drop shadow.
            </description></Example>
        <Example title="Dynamic Items"
                 id="menuDynamicItems"
                 jsURL="actions/menus/dynamicItems.js"><description>
            Open the "File" menu to see the "New file in.." item initially disabled.  Select a
            project and note that the menu item has become enabled, changed title and changed
            icon.  Pick "Project Listing" to show and hide the project list, and note the item
            checks and unchecks itself.
            </description></Example>
        <Example title="Submenus" ref="fullMenu"><description>
            Click "File" and navigate over "Recent Documents" or "Export as..." to see
            submenus.
            </description></Example>
        <Example id="menuColumns" title="Custom Columns" jsURL="actions/menus/columns.js"><description>
            Open the menu to see a standard column showing item titles, and an additional
            column showing an option to close menu items. Clicking in the second column will
            remove the item from the menu.
            </description></Example>
            
        <Example title="Tree Binding" id="treeBinding" jsURL="actions/menus/treeBinding.js"
                 dataSource="supplyCategory"><description>
            Click on "Department" or "Category" below to show hierarchical menus.  The
            "Category" menu loads options dynamically from the SupplyCategory DataSource.
            </description></Example>
    </children></ExampleFolder>

    <Example id="toolstrip" title="ToolStrips" jsURL="actions/toolStrips.js"><description>
        Click the icons at left to see "radio"-style selection.  Click the drop-down to see
        font options.
        </description>       
        <bestSkin>Enterprise</bestSkin>
        <badSkins>BlackOps</badSkins>
        <badSkins>SilverWave</badSkins>        
    </Example>
    <Example id="toolstripVertical" title="ToolStrips (Vertical)" jsURL="actions/toolStripVertical.js"><description>
        Toolstrips can also be vertically aligned.
        </description>
        <bestSkin>Enterprise</bestSkin>
        <badSkins>BlackOps</badSkins>
        <badSkins>SilverWave</badSkins>     
    </Example>
    <Example title="Dialogs"
             id="dialogs"
             jsURL="actions/dialogs.js"
             showSkinSwitcher="true"><description>
        Click "Confirm", "Ask" or "Ask For Value" to show three of the pre-built, skinnable 
        SmartClient Dialogs for common interactions.  
        </description></Example>
    <Example title="Login Dialog"
             id="loginDialog"
             jsURL="actions/loginDialog.js"
             showSkinSwitcher="true"><description>
        Click "Login" to show SmartClient's built-in user login dialog.  Try entering both good
        and bad credentials - user "barney", password "rubble" is a valid user.
        </description></Example>
    <!-- At present slider media matches cross skins so don't show the skin-switcher on this one -->
    <Example title="Slider" id="slider" xmlURL="actions/slider.js"><description>
        Move either Slider to update the other.  You can change the value by clicking and
        dragging the thumb, clicking on the track, or using the keyboard (once you've focused
        on one of the sliders)
        </description></Example>
    <Example title="ColorPicker"
             id="colorPicker"
             jsURL="actions/colorPicker.js"
             showSkinSwitcher="true"><description>
        Use the radio buttons to set which mode the ColorPicker initially appears in, and the 
        window position policy.  Click "Pick a Color" and select a color from either the simple
        or complex picker - the "Selected color" label changes to reflect your selection.  The 
        ColorPicker also supports selecting semi-transparent colors - this is more easily seen
        in a skin that shows a background image (eg BlackOps).
        </description></Example>
</children></ExampleFolder>




<!-- PARENT FOLDER: Basics -->
<ExampleFolder
    title="Basics"
    isOpen="false"
    icon="[ISO_DOCS_SKIN]/images/silkicons/overlays.png"><description>
    Basic capabilities shared by all SmartClient visual components.
</description><children>


<!-- Basics > Components -->
<ExampleFolder
    title="Components" 
    isOpen="false"><description>
    Basic capabilities shared by all SmartClient visual components.
</description><children>
    <Example
        id="create"
        title="Create"
        jsURL="basics/create.js"><description>
        Click the button to create new cube objects.
        </description></Example>
    <Example
        id="autodraw"
        title="Draw"
        jsURL="basics/draw.js"><description>
        Click the button to draw another Label component. The first Label is configured
        to draw automatically.
        </description></Example>
    <Example
        id="showAndHide"
        title="Show &amp; Hide"
        jsURL="basics/show.js"><description>
        Click the buttons to show or hide the message.
        </description></Example>
    <Example
        id="move"
        title="Move"
        jsURL="basics/move.js"><description>
        Click and hold the arrow to move the van. Click on the solid circle to return to
        the starting position.
        </description></Example>
    <Example
        id="resize"
        title="Resize"
        jsURL="basics/resize.js"><description>
        Click the buttons to expand or collapse the text box.
        </description></Example>
    <Example
        id="layer"
        title="Layer"
        jsURL="basics/layer.js"><description>
        Click the buttons to move the draggable box above or below the other boxes.
        </description></Example>
    <Example
        title="Stack"
        jsURL="basics/stack.js"><description><![CDATA[
        <code>HStack</code> and <code>VStack</code> containers manage the stacked positions
        of multiple member components.
        ]]></description></Example>
    <Example
        title="Layout"
        jsURL="basics/layout.js"><description><![CDATA[
        <code>HLayout</code> and <code>VLayout</code> containers manage the stacked positions and
        sizes of multiple member components. Resize the browser window to reflow these layouts.
        ]]></description></Example>
    <Example
        id="inlineComponents"
        title="Inline components"
        iframe="true"
        url="inlineComponents/inlineComponents.html"
        doEval="false"
        ><tabs>
        <tab title="cssLayout.css" url="inlineComponents/cssLayout.css"/>
        </tabs><description><![CDATA[
        SmartClient GUI components are assembled from the same standard HTML and CSS as
        plain old web pages. So you can add SmartClient controls above, below, inline,
        and inside your existing web page elements.
        ]]></description></Example>
</children></ExampleFolder>

<!-- Basics > HTML -->
<ExampleFolder
    title="HTML" 
    isOpen="false"><description>
    Mixing SmartClient components with HTML pages, chunks, and elements.
</description><children>
    <Example title="Inline Components" ref="inlineComponents"/>
    <Example title="Back Button"><description>
        SmartClient supports browser history management.  Click your browser's Back button to go
        to a previous example, and click forward to return to this example.  You can even
        navigate off the SmartClient site and navigate back.  SmartClient's History module
        allows you to pick which application events create history entries.
        </description></Example>
    <Example
        id="htmlFlow"
        title="HTMLFlow"
        jsURL="html/htmlFlow.js" xmlURL="html/htmlFlow.xml"><description><![CDATA[
        The <code>HTMLFlow</code> component displays a chunk of standard HTML in a free-form,
        flowable region.
        ]]></description></Example>
    <Example
        id="htmlPane"
        title="HTMLPane"
        jsURL="html/htmlPane.js" xmlURL="html/htmlPane.xml"><description><![CDATA[
        The <code>HTMLPane</code> component displays a chunk or page of standard HTML in a
        sizeable, scrollable pane.
        ]]></description></Example>
    <Example
        id="label"
        title="Label"
        jsURL="html/htmlLabel.js" xmlURL="html/htmlLabel.xml"><description><![CDATA[
        The <code>Label</code> component adds alignment, text wrapping, and icon support for
        small chunks of standard HTML.
        ]]></description></Example>
    <Example id="RichTextEditor" title="Editing HTML" jsURL="html/richTextEditor.js"    
       xmlURL="html/richTextEditor.xml" requiresModules="RichTextEditor">
       <description>RichTextEditor supports editing of HTML with a configurable set of
       styling controls</description></Example>
    <Example
        id="img"
        title="Img"
        jsURL="html/htmlImg.js"><description><![CDATA[
        The <code>Img</code> component displays images in the standard web formats
        (png, gif, jpg) and other image formats supported by the web browser.
        ]]></description></Example>
    <Example
        id="dynamicContents"
        title="Dynamic HTML (inline)"
        jsURL="html/htmlDynamic1.js"><description>
        Embed JavaScript expressions inside chunks of HTML to create simple dynamic elements.
        </description></Example>
    <Example
        id="setContents"
        title="Dynamic HTML (set)"
        jsURL="html/htmlDynamic2.js"><description>
        Click the buttons to display different chunks of HTML.
        </description></Example>
    <Example
        id="loadImages"
        title="Load images"
        jsURL="html/htmlLoadImg.js"><description>
        Click the buttons to load different images.
        </description></Example>
    <Example
        title="Load HTML chunks"
        jsURL="html/htmlLoadChunks.js"><description>
        Click the buttons to load different chunks of HTML.
        </description></Example>
    <Example
        id="loadHtmlPages"
        title="Load HTML pages"
        jsURL="html/htmlLoadPages.js"><description>
        Click the buttons to display different websites.
        </description></Example>
</children></ExampleFolder>



<!-- Basics > Interaction -->
<ExampleFolder
    title="Interaction" 
    isOpen="false"><description>
    Basic interactive component capabilities.
    &lt;BR&gt;
    &lt;BR&gt;
    SmartClient components provide hundreds of hooks for event handlers, including
    all the standard mouse, keyboard, and communication events.
</description><children>
    <Example title="Mouse events" id="customMouseEvents" jsURL="interact/mouseEvents.js"><description>
        Mouse over the blue square to see the color respond to your position.  Click and hold
        to see a fade.  If you have a mousewheel, roll up and down to change size.
        SmartClient components support the standard mouse events in addition to custom events
        like "mouseStillDown".
        </description></Example>
    <Example title="Drag events" id="customDrag" jsURL="interact/dragEvents.js"><description>
        Click and drag the pawn over "Show Drop Reticle" to see a simple custom drag and drop
        interaction.
        </description></Example>
    <Example title="Hovers / Tooltips" id="customHovers" jsURL="interact/hover.js"
             showSkinSwitcher="true"
             css="interact/hover.css"><description>
        Hover over the button, the image, the "Interesting Facts" field of the grid, and the
        "Severity" form label to see various hovers.
        </description></Example>
    <Example title="Context menus" id="contextMenus" jsURL="interact/contextmenu.js" 
             showSkinSwitcher="true">
    <description>
        Right click (or option-click on Macs) on the Yin Yang image to access a context menu.
        You can also click on the "Widget" button to access the identical menu.
        </description></Example>
    <Example title="Enable / Disable" ref="fieldEnableDisable"/>
    <Example title="Focus &amp; Tabbing" id="focus" jsURL="interact/focus.js"><description>
        Press the Tab key to cycle through through the tab order starting from the blue
        piece.  Then drag reorder either piece, click on the leftmost piece and use Tab to
        cycle through again. Tab order is automatically updated to reflect the visual order.
        </description></Example>
    <Example title="Cursors" id="cursors" jsURL="interact/cursor.js"><description>
        Mouse over the draggable labels for a 4-way move cursor.  Move over drag resizeable
        edges to see resize cursors.  Mouse over the "Save" button to see the hand cursor,
        which is not shown if the "Save" button is disabled.
        </description></Example>
    <!-- Note on keyboard events: click required to put focus onto the arrow. Explicit call to
         this.focus() as part of the label's draw() method doesn't work in the FE. -->
    <Example title="Keyboard events" id="keyboardEvents" jsURL="interact/keyboard.js"><description>
        Click the "Move Me" label, then use the arrow keys to move it around.  Hold down keys to see the
        component respond to key repetition. SmartClient unifies keyboard event handling across browsers.
        </description></Example>
    <!--  -->
    <Example title="Modality" id="modality" jsURL="interact/modality.js"  
             showSkinSwitcher="true"><description>
        Click on "Show Window" to show a modal window.  Note that the "Touch This" button no
        longer shows rollovers or an interactive cursor, nothing outside the window can be
        clicked, clicks outside the window cause the window to flash, and tabbing remains in a
        closed loop cycling through only the contents of the window.
        </description></Example>
</children></ExampleFolder>

    <Example 
        title="Printing" 
        id="printing" 
        jsURL="basics/printing.js"  
        showSkinSwitcher="true"><tabs>
        <tab title="worldDS" url="grids/ds/worldSQLDS.ds.xml" canEdit="false" />
        </tabs><description><![CDATA[
        SmartClient provides comprehensive support for rendering your UI in a print-friendly
        fashion.  Click the "Print Preview" button and note the following things:
        <ul>
        <li>All components have simplified appearance (eg gradients omitted) to be legible in 
        black and white
        <li>The ListGrid had a scrollbar because it wasn't big enough to show all records, 
        but the printable view shows all data
        <li>Buttons and other interactive controls that are not meaningful in print view are omitted
        ]]>
        </description></Example>

</children></ExampleFolder> <!-- closing parent folder: Basics -->



<!-- PARENT FOLDER: Effects -->
<ExampleFolder
    title="Effects"
    isOpen="false"
    icon="[ISO_DOCS_SKIN]/images/silkicons/layers.png"><description>
    Effects for creating a polished, branded, appealing application.
    &lt;BR&gt;
    &lt;BR&gt;
    SmartClient supports rich skinning and styling capabilities, drag and drop interactions,
    and built-in animations.
</description><children>


<!-- Effects > Drag & Drop -->
<ExampleFolder
    title="Drag &amp; Drop" 
    id="dragDropExamples"
    isOpen="false"><description>
    Drag &amp; drop services and built-in drag &amp; drop interactions.
</description><children>
    <Example
        title="Drag list (copy)" 
        showSkinSwitcher="true"
        jsURL="dragdrop/dragListCopy.js"><tabs>
        <tab title="exampleData" url="dragdrop/dragList_data.js"/>
        </tabs><description>
        Drag and drop to copy items from the first list to the second list.
        You can drag over the top or bottom edge of a scrolling list to scroll
        in that direction before dropping.
        </description></Example>
    <Example
        title="Drag list (move)"
        id="dragListMove"
        showSkinSwitcher="true"
        jsURL="dragdrop/dragListMove.js"><tabs>
        <tab title="exampleData" url="dragdrop/dragList_data.js"/>
        </tabs><description>
        Drag and drop to move items within or between the lists.
        You can drag over the top or bottom edge of a scrolling list to scroll
        in that direction before dropping.
        </description></Example>
    <Example
        title="Drag list (select)"
        id="dragListSelect"
        showSkinSwitcher="true"
        jsURL="dragdrop/dragListSelect.js"><tabs>
        <tab title="exampleData" url="dragdrop/dragList_data.js"/>
        </tabs><description>
        Drag to select items in the first list. The second list will
        mirror your selection.
        </description></Example>
    <Example
        id="dragTree"
        showSkinSwitcher="true"
        title="Drag tree (move)"
        jsURL="dragdrop/dragTreeMove.js"><tabs>
        <tab title="exampleData" url="dragdrop/dragTree_data.js"/>
        </tabs><description>
        Drag and drop to move parts and folders within and between the trees.
        You can open a closed folder by pausing over it during a drag interaction
        (aka "spring loaded folders").
        </description></Example>
    <Example
        id="dragTiles"
        showSkinSwitcher="true"
        title="Drag tiles (move)"
        jsURL="dragdrop/dragTilesMove.js"><tabs>
        <tab title="animalData" url="grids/data/animalData2.js"/>
        </tabs><description>
        Drag and drop animals from the ListGrid on the left to the TileGrid on the right. 
        Animals can also be dragged from the TileGrid back to the ListGrid.
        </description></Example>   

    <!-- Note: This folder is a duplicate of one elsewhere in the file (scan for "dataDragging").
         Any changes made here should also be made in the copy.  The details are duplicated 
         rather than aliased because the ExampleViewer doesn't cope correctly with an aliased 
         folder nested within another aliased folder  -->

    <ExampleFolder id="dataDraggingCopy" title="Data Binding" isOpen="false"><description>
        Databound components have built-in dragging behaviors that operate on persistent
        datasets.
    </description><children>
        <Example title="Tree Reparent" id="treeReparent" jsURL="databind/drag/treeReparent.js"
                 dataSource="employees"><description>
            Dragging employees between managers in this tree automatically saves the new
            relationship to a DataSource, without writing any code.  Make changes, then 
            reload the page: your changes persist.
            </description></Example>
        <Example title="Recategorize (Tree)" id="treeRecategorize" 
                 jsURL="databind/drag/treeRecategorize.js"
                 dataSource="supplyCategory"><tabs>
                <tab title="supplyItem" url="supplyItem.ds.xml"/>
            </tabs><description>
            Dragging items from the list and dropping them on categories in the tree automatically
            re-categorizes the item, without any code needed.  Make changes, then 
            reload the page: your changes persist.  This behavior is (optionally) automatic where
            SmartClient can establish a relationship via foreign key between the DataSources
            two components are bound to.
            </description></Example>
        <Example title="Recategorize (List)" id="listRecategorize" 
                 jsURL="databind/drag/listRecategorize.js"
                 dataSource="supplyItem"><description>
            The two lists are showing items in different categories.  Drag items from one list to
            another to automatically recategorize the items without writing any code.  Make
            changes, then reload the page; your changes persist.
            </description></Example>
        <Example
            id="recategorizeTiles"
            showSkinSwitcher="true"
            title="Recategorize (Tile)"
            jsURL="dragdrop/recategorizeTile.js"><tabs>
            <tab title="animalsDS" url="grids/ds/animalsSQLDS.ds.xml" canEdit="false"/>
            </tabs><description>
            Drag and drop animals between the grids in either direction, and the status of the dropped tile will change to 
            match the filtered status of the TileGrid in which it was dropped. Select different values
            in the drop down lists above each TileGrid to change the animals that will appear in each grid.
            </description></Example>   
        <Example
            title="Copy"
            id="databoundDragCopy" 
            showSkinSwitcher="true"
            dataSource="employees"
            jsURL="databind/drag/listCopy.js"><tabs>
            <tab title="teamMembers" url="teamMembers.ds.xml"/>
            </tabs><description><![CDATA[
            Drag employee records into the Project Team Members list.  SmartClient recognizes that the 
            two dataSources are linked by a foreign key relationship, and automatically uses that 
            relationship to populate values in the record that is added when you drop. SmartClient
            also populates fields based on current criteria and maps explicit titleFields as 
            necessary.<p>
            In this example, note that SmartClient is automatically populating all three
            of the fields in the teamMembers dataSource, even though none of those fields is present 
            in the employees dataSource we are dragging from.  Change the "Team for Project" select 
            box, then try dragging employees across; note that the Project Code column is being 
            correctly populated for the dropped records.
            ]]></description></Example>
    </children></ExampleFolder>

    <Example
        id="dragMenu"
        showSkinSwitcher="true"
        title="Drag from Menu"
        jsURL="dragdrop/dragFromMenu.js"><tabs>
       <tab title="exampleData" url="dragdrop/dragList_data.js"/>
        </tabs><description>
        Open the parts menu and drag parts from the menu onto the grid.
        Menus support all the drag and drop behaviors supported by grids.
        </description></Example>
    <Example
        title="Drag move"
        id="dragMove"
        jsURL="dragdrop/dragMove.js"><description>
        Drag and drop to move pieces between the boxes. The green box sets a thicker green
        "drop line" indicator to match its border. The blue box shows a "drag placeholder"
        outline at the original location of the dragged object while dragging.
        </description></Example>
    <Example
        title="Drag reorder"
        jsURL="dragdrop/dragReorder.js"><description>
        Drag and drop to rearrange the order of the pieces.
        </description></Example>
    <Example
        title="Drag types"
        jsURL="dragdrop/dragTypes.js"><description>
        Drag and drop to move pieces between the three boxes.
        The gray box accepts any piece.
        The blue and green boxes accept pieces of the same color only.
        </description></Example>
    <Example
        title="Drag create"
        id="dragCreate"
        jsURL="dragdrop/dragCreate.js"><description>
        Drag the large cubes into the boxes to create new small cubes.
        The blue, yellow, and green boxes accept cubes with the same color only.
        The gray box accepts any color.
        Right-click on the small cubes to remove them from the boxes.
        </description></Example>
    <Example
        title="Drag effects"
        id="dragEffects"
        jsURL="dragdrop/dragEffects.js"><description>
        Click and drag to move the labels.
        </description></Example>
    <Example
        title="Drag reposition"
        visibility="sdk"
        jsURL="dragdrop/dragReposition.js"><description>
        Click and drag to move the piece.
        </description></Example>
    <Example
        title="Drag resize"
        id="dragResize"
        jsURL="dragdrop/dragResize.js"><description>
        Click and drag on the edges of the labels to resize.
        </description></Example>
    <Example
        title="Drag tracker"
        id="dragTracker"
        jsURL="dragdrop/dragTracker.js"><description>
        Drag and drop the pieces onto the box.
        </description></Example>
    <Example
        title="Drag pan"
        id="dragPan"
        jsURL="dragdrop/dragPan.js"><description>
        Click and drag to pan the image inside its frame.
        </description></Example>
    

</children></ExampleFolder>


<!-- Effects > Animation -->
<ExampleFolder
    title="Animation" 
    isOpen="false"><description>
    Animation services and built-in animation effects.
</description><children>
    <Example
        title="Tree Folders"
        id="animateTree"
        showSkinSwitcher="true"
        jsURL="animate/animateTree.js"><description>
        Click the open/close icon for any folder.
        </description>
        <tabs><tab title="exampleData" url="animate/animateTreeData.js"/></tabs>
        </Example>
    <Example
        id="windowMinimize"
        showSkinSwitcher="true"
        title="Window Minimize"
        jsURL="animate/animateMinimize.js"><description>
        Click on the minimize button (round button in header with flat line).
        </description></Example>
    <Example
        title="Section Reveal"
        id="animateSections"
        showSkinSwitcher="true"
        jsURL="animate/animateSections.xml"><description>
        Click on any section header to expand/collapse sections.
        </description></Example>
    <Example
        title="Layout Add &amp; Remove"
        id="animateLayout"
        jsURL="animate/animateLayout.js"><description>
        Click on the buttons to hide and show the green star.
        </description></Example>
    <Example
        title="Fly Onscreen"
        id="animateMove"
        jsURL="animate/animateMove.js"><description>
        Click the buttons to move the Label into view or out of view.
        </description></Example>
    <Example
        title="Resize"
        id="animateResize"
        jsURL="animate/animateResize.js"><description>
        Click the buttons to expand or collapse the text box.
        </description></Example>
    <Example
        title="Wipe Show &amp; Hide"
        id="animateWipe"
        jsURL="animate/animateWipe.js"><description>
        Click the buttons to show or hide the Label with a "wipe" effect.
        </description></Example>
    <Example
        title="Slide Show &amp; Hide"
        jsURL="animate/animateSlide.js"><description>
        Click the buttons to show or hide the Label with a "slide" effect.
        </description></Example>
    <Example
        title="Fade Show &amp; Hide"
        id="animateFade"
        jsURL="animate/animateFade.js"><description>
        Click the buttons to fade the image.
        </description></Example>
    <Example
        title="Zoom &amp; Shrink"
        id="animateZoom"
        jsURL="animate/animateZoom.js"><description>
        Click the buttons to zoom or shrink the image.
        </description></Example>
    <Example
        title="Sequence (simple)"
        jsURL="animate/animateSeqSimple.js"><description>
        Click the buttons for a 2-stage expand or collapse effect.
        </description></Example>
    <Example
        title="Sequence (complex)"
        jsURL="animate/animateSeqComplex.js"><description>
        Click to select and zoom each piece.
        </description></Example>
    <Example
        title="Custom Animation"
        id="customAnimation"
        jsURL="animate/animateCustom.js"><description>
        Click on the globe for a custom "orbit" animation.
        </description></Example>
    <Example title="Tile Filter &amp; Sort" ref="tilingFilter"/>
    <Example
        id="portalAnimation"
        title="Simple Portal"
        needServer="true"
        jsURL="animate/portal.js"
        fullScreen="true"
        showSkinSwitcher="true"        
        screenshot="animate/portal.png"
        screenshotWidth="480"
        screenshotHeight="337"
        >
        <description>Animations built into SmartClient layouts can be used to create a drag and drop portal
      experience.  Click on the portlet list to the left to create portlets and see them
      animate into place.  Drag portlets around to new locations and they animate into place.
        </description></Example>

</children></ExampleFolder>

<!-- Effects > Look & Feel -->
<ExampleFolder
    title="Look &amp; Feel"
    isOpen="false"><description>
    Apply rich visual styles to SmartClient components.
</description><children>
    <Example
        title="Edges"
        id="edges"
        jsURL="lookfeel/edges.js"><description>
        Drag the text boxes. These boxes show customized frame and glow effects
        using edge images.
        </description></Example>
    <Example
        title="Corners"
        id="corners"
        jsURL="lookfeel/corners.js"><description>
        Drag the text boxes. These boxes show customized rounded-corner effects
        using edge images.        
        </description></Example>
    <Example
        title="Shadows"
        id="shadows"
        jsURL="lookfeel/shadows.js"><description>
        Drag the slider to change the shadow depth for the text box.
        </description> 
        <badSkins>BlackOps</badSkins>
        <bestSkin>TreeFrog</bestSkin></Example>
    <Example
        title="Background color"
        visibility="sdk"
        jsURL="lookfeel/bgColor.js"><description>
        Click on the color picker to select a background color for the box.
        </description></Example>
    <Example
        title="Background texture"
        visibility="sdk"
        jsURL="lookfeel/bgImage.js"><description>
        Click any button to change the background texture for the box.
        </description></Example>
    <Example
        title="Translucency"
        id="translucency"
        jsURL="lookfeel/opacity.js"><description>
        Drag the slider to change opacity.
        </description></Example>
<!-- 

-->
    <Example
        title="Box attributes"
        visibility="sdk"
        jsURL="lookfeel/boxAttrs.js"><description><![CDATA[
        Drag the sliders to change the CSS box attributes.
        <P>
        Containers in SmartClient automatically react to changes in CSS styling on contained elements
        ]]>
        </description></Example>
    <Example
        title="CSS styles"
        id="styles"
        jsURL="lookfeel/styles.js"><tabs>
        <tab title="CSS" url="lookfeel/styles.css"/>
        </tabs><description>
        Click the radio buttons to apply different CSS styles to the text. Click the CSS tab for
        CSS class definitions.&lt;BR&gt;
        This container auto-sizes to the styled text.
        </description>
        <badSkins>BlackOps</badSkins>
        <bestSkin>TreeFrog</bestSkin></Example>
    <Example
        title="Consistent sizing"
        id="consistentSizing"
        jsURL="lookfeel/consistentSizing.js"
        css="lookfeel/consistentSizing.css"><description>
      Drag the slider to resize all three text boxes. The box sizes match despite different
      edge styling specified in CSS, enabling CSS-based skinning without affecting
      application layout.
    </description></Example>
<!--
    <Example
        title="Icons"
        jsURL="lookfeel/icons.js"><description>

        </description></Example>
-->
<!--
    <Example
        title="Form controls"
        jsURL="lookfeel/formStyle.js"><description>

        </description></Example>
-->
    <Example
        title="Grid cells"
        id="gridCells"
        showSkinSwitcher="true"
        jsURL="grids/formatting/cellStyles.js"><tabs>
        <tab title="CSS" url="grids/formatting/cellStyles.css"/>
        <tab title="countryData" url="grids/data/countryData.js"/>
        </tabs><description>
        Mouse over the rows and click-drag to select rows, to see the effects of different
        base styles on these two grids.
        </description></Example>        
</children></ExampleFolder>



</children></ExampleFolder> <!-- closing parent folder: Effects -->


<!-- Drawing -->
<ExampleFolder title="Drawing" requiresModules="Drawing" isOpen="false" 
    icon="[ISO_DOCS_SKIN]/images/cube_blue.png" visibility="none">
<description><![CDATA[
    SmartClient leverages the native browser drawing capabilities to provide a consistent cross
    browser drawing interface via the optional <b>Drawing</b> module.
    <P>
    This is a <span style="color:red">preview</span> of unreleased SmartClient functionality.  
    <a href="http://www.smartclient.com/company/contact.jsp">Contact
    Isomorphic</a> to get
    early access to this technology.
]]></description><children>
    <Example id="ShapeGallery" title="Shape Gallery" url="drawing/shapeGallery.js"
        requiresModules="Drawing">
        <description><![CDATA[Below is a sampling of the shapes available in the SmartClient
        drawing package.
        ]]></description>
    </Example>

    <Example id="Rotation" title="Rotation" url="drawing/rotation.js"
        requiresModules="Drawing">
        <description><![CDATA[Sample of Rotation feature of Drawing module.
        ]]></description>
    </Example>
        
    <Example id="ZoomAndPan" title="Zoom and Pan" url="drawing/zoomAndPan.js"
        requiresModules="Drawing">
        <description><![CDATA[Sample of zooming and panning features of Drawing module. Use
        slider for zoom and drag image by mouse.
        ]]></description>
    </Example>
        
    <Example id="LinesAndArrowheads" title="Lines and Arrowheads" url="drawing/linesAndArrowheads.js"  
        requiresModules="Drawing">
        <description><![CDATA[Sample of using lines and curves with selects for line width, style, 
        and arrowhead style, generated at random coordinates.
        ]]></description>
    </Example>
       
    <ExampleFolder title="Gradients" isOpen="true" requiresModules="Drawing">
        <description>
            Different types of gradients can be used with shapes.
        </description>
        <children>
            <Example id="SimpleGradient" title="Simple" url="drawing/gradients/simpleGradient.js"  
                requiresModules="Drawing">
                <description><![CDATA[Sample of using simple type of gradient.
                ]]></description>
            </Example>
            
            <Example id="LinearGradient" title="Linear" url="drawing/gradients/linearGradient.js"  
                requiresModules="Drawing">
                <description><![CDATA[Sample of using linear type of gradient.
                ]]></description>
            </Example>
            
            <Example id="RadialGradient" title="Radial" url="drawing/gradients/radialGradient.js"  
                requiresModules="Drawing">
                <description><![CDATA[Sample of using radial type of gradient.
                ]]></description>
            </Example>
        </children>
    </ExampleFolder>

</children></ExampleFolder>

<ExampleFolder title="Portals &amp; Tools Framework" visibility="none" isOpen="false" requiresModules="Tools" showSkinSwitcher="true">
    <description><![CDATA[ 
        <p>You can use the Portal &amp; Tools Framework to allow users to construct their own
        customized user interface, and persist and recreate those customizations. It is
        the underpinning of the SmartClient Visual Builder tool.</p>

        <p>Palettes present the components available for use, and specify their
        type and default properties. Users can drag components from the Palettes, or
        double-click on them.</p>

        <p>Edit Contexts organize and present the components that users have
        chosen and customized. Several strategies are available for persisting and recreating
        Edit Contexts.</p>
    ]]></description>
    <children>
        <ExampleFolder title="Palettes" isOpen="false" requiresModules="Tools">
            <description>
                Palettes organize and present the components available for the user
                to select and customize. Users choose items from palettes by clicking and/or dragging
                (depending on the palette type).
            </description>
            <children>
                <Example title="Tree Palette" jsURL="portal/palettes/treePalette.js" requiresModules="Tools">
                   <description>
                      Tree Palettes organize available components in a tree structure.
                      The user can double-click or drag to create a component.
                   </description>
                </Example>
                <Example title="List Palette" jsURL="portal/palettes/listPalette.js" requiresModules="Tools">
                   <description>
                      List Palettes organize available components in a list grid structure.
                      The user can double-click or drag to create a component.
                   </description>
                </Example>
                <Example title="Tile Palette" id="tilePalette" jsURL="portal/palettes/tilePalette.js" requiresModules="Tools">
                   <description>
                      Tile Palettes organize available components in a tile grid structure.
                      The user can double-click or drag to create a component.
                   </description>
                </Example>
                <Example title="Menu Palette" jsURL="portal/palettes/menuPalette.js" requiresModules="Tools">
                   <description>
                      Menu Palettes present available components as a menu.
                      The user can click or drag to create a component.
                   </description>
                </Example>
            </children>
        </ExampleFolder>
        <ExampleFolder title="Edit Contexts" isOpen="false" requiresModules="Tools">
            <description>
                Edit Contexts are containers for the components that a user has selected.
            </description>
            <children>
                <Example title="Edit Pane" ref="tilePalette" requiresModules="Tools">
                    <description>
                        An Edit Pane is a container that allows drag and drop instantiation
                        of visual components from a Palette, and direct manipulation of the 
                        position and size of those components.
                    </description>
                </Example>
                <Example title="Coordinate Persistence" ref="automaticPersistence" isOpen="false" requiresModules="Tools">
                    <description><![CDATA[
                        <p>By default, an Edit Context will automatically persist the position and size of
                        components.</p>
                        <p>Try dragging some components from the Tile Palette to the Edit Pane, and then move
                        and resize them. Clicking on the "Destroy and Recreate" button will recreate the
                        Edit Pane from saved state. Note how the position and size of components has been
                        preserved.</p>
                    ]]></description>
                </Example>
            </children>
        </ExampleFolder>
        <ExampleFolder title="Persistence" isOpen="false" requiresModules="Tools">
            <description><![CDATA[
                <p>You can persist and recreate Edit Contexts using several persistence strategies.</p>
                <ul>
                    <li>Use a variable to store state, and recreate or duplicate an Edit Context from that variable.</li>
                    <li>Persist state to a DataSource.</li>
                    <li>Use Offline storage to persist state.</li>
                </ul>
            ]]></description>
            <children>
                <Example title="Automatic" jsURL="portal/persistence/automaticPersistence.js" id="automaticPersistence" isOpen="false" requiresModules="Tools">
                    <tabs>
                        <tab title="Tile Palette" url="portal/palettes/tilePalette.js" />
                    </tabs>
                    <description><![CDATA[
                        <p>The state of an Edit Context can be saved to a variable. You can then use the variable to
                        duplicate or recreate the Edit Context.</p>
                        <p>Try dragging some components from the Tile Palette to the Edit Pane. Click the
                        "Destroy and Recreate" button to save the Edit Pane's state, destroy it, and then
                        recreate it. The process is animated, to illustrate the process
                        (which would otherwise occur instantly).</p>
                    ]]></description>
                </Example>
                <Example title="DataSource" isOpen="false" jsURL="portal/persistence/datasource.js" dataSource="editNodes" requiresModules="Tools">
                    <tabs>
                        <tab title="Tile Palette" url="portal/palettes/tilePalette.js" />
                    </tabs>
                    <description>
                        The state of an Edit Context can be connected to a DataSource. Try dragging some
                        components from the Tile Palette to the Edit Pane. Click on "Save" to save the state
                        of the Edit Pane to a DataSource. Make some changes to the Edit Pane, and then click
                        "Restore". Note how the state of the Edit Pane is restored to its saved state.
                    </description>
                </Example>
                <Example title="Offline" isOpen="false" jsURL="portal/persistence/offline.js" requiresModules="Tools">
                    <tabs>
                        <tab title="Tile Palette" url="portal/palettes/tilePalette.js" />
                    </tabs>
                    <description><![CDATA[
                        <p>The state of an Edit Context can be connected to Offline storage. Try dragging some
                        components from the Tile Palette to the Edit Pane. Click on "Save" to save the state
                        of the Edit Pane to a DataSource. Make some changes to the Edit Pane, and then click
                        "Restore". Note how the state of the Edit Pane is restored to its saved state.</p>
                        <p>Try reloading the page to see saved state automatically restored. (Note that the
                        example does not automatically save state).</p>
                    ]]></description>
                </Example>
            </children>
        </ExampleFolder>
    </children>
</ExampleFolder>

<!-- Applications -->
<ExampleFolder title="Applications" isOpen="false" icon="[ISO_DOCS_SKIN]/images/silkicons/application_osx.png"><description>
    Demos of complete applications based on SmartClient.
</description><children>

    <Example title="Office Supply Catalog" ref="showcaseApp"/>
        
    <!-- 
    
    -->

    <Example title="Interactive Analytics"
        id="analytics"
        showSkinSwitcher="true" requiresModules="PluginBridges,Drawing,Analytics"
        dataSource="productRevenue"
        jsURL="advanced/cubegrid/databound_cubegrid.js"
        fullScreen="true"
        screenshot="advanced/cubegrid/databound_cubegrid.png"
        screenshotWidth="468"
        screenshotHeight="327"

    ><tabs><tab title="facet controls" url="advanced/cubegrid/facet_controls.js" loadAtEnd="true"/>
    </tabs><description><![CDATA[
        This example shows binding to a multi-dimensional dataset, where each
        cell value has a series of attributes, called "facets", that appear as headers
        labelling data values.  Facets can be added to the view, exposing more detail, by
        dragging the menu buttons onto the grid, or into the "Row Facets" and "Column Facets"
        listings.
        <P>
        Facets can be removed from the view by using the menus to set a facet to a fixed
        value.  For example, use the "Time" menu to show just data from 2002: "Time -> Fix Time
        Value -> All Years -> 2002".
        <P>
        Click the turndown controls on facet values to expand tree facets.  Note that data
        loads as it is revealed by expanding and collapsing tree facets, by adding facets, or
        by scrolling in either direction.  This allows users to navigate extremely large data sets.
        <P>
        Right click on any data value or facet value to generate a chart showing how that
        particular value varies along up to two facets.  For example, click on any data
        value for "Office Paper Products" and choose "Chart -> Sales by Time and Region" to see
        how this category of products is selling in different regions and time periods.  You
        can also switch to different chart types (eg Radar) on the fly.
        <i><b>(Note: Chart support requires the optional Drawing Module. 
        If not installed, the Analytics Module, including the CubeGrid and
        the remainder of this sample, will continue to function normally.)</b></i>
        <P>
        Because the CubeGrid uses a DataSource to loaded data, it can be connected to any kind
        of server or data provider.  This sample loads data from a SQL database.
    ]]></description>
    </Example>
    <Example jsURL="portal/smartclientPortal.js" fullScreen="true" showSkinSwitcher="true"
        screenshot="portal/salesPortal.png"
        screenshotWidth="468"
        id="portal"
        screenshotHeight="327"
        requiresModules="PluginBridges,Analytics">
        <title>Portal (Preview)</title>
    <description><![CDATA[
       Going beyond basic portal layout, SmartClient's portalling framework allows users to
       build a customized layout from a palette of available components, and automatically
       persist both the layout and customizations made to components.
       <P>
       This is a <span style="color:red">preview</span> of unreleased SmartClient functionality.  
       <a href="http://www.smartclient.com/company/contact.jsp">Contact
       Isomorphic</a> to get
       early access to this technology.
    ]]></description>
    </Example>
    <!--
    <ExampleFolder title="Internationalization" isOpen="false" external="true"><description>
    Click on "blah" (French for "Validate") to see a validation error message in French.
    &lt;P&gt;
    Messages can be internationalized via the same techniques uses for classic web
    applications.  Here JSP expressions are used to refer to a resource bundle which may 
    differ by locale.
    </description><children>
    </children></ExampleFolder>

    <ExampleFolder title="Flash integration" isOpen="false"><description>
    </description><children>
    </children></ExampleFolder>

    <ExampleFolder title="Applet integration" isOpen="false"><description>
    </description><children>
    </children></ExampleFolder>
    -->
</children></ExampleFolder>

<ExampleFolder title="Extending" isOpen="false" icon="[ISO_DOCS_SKIN]/images/silkicons/arrow_branch.png"><description>
    Examples of extending SmartClient functionality
</description><children>
    <Example title="Component Reuse"
        jsURL="extending/componentReuse.js" css="extending/portlet.css"><description>
        The portlets below are a custom component created with less than one page of code
        (see the "JS" tab).  The portlets support drag repositioning, drag resizing, a close
        button, can contain any HTML content, and are skinnable.
    </description>
    </Example>
    <Example id="patternReuse" title="Pattern Reuse"
        dataSource="supplyItem"
        jsURL="extending/patternReuse.js">
    <tabs><tab title="countryDS" url="grids/ds/countrySQLDS.ds.xml" canEdit="false" />
    </tabs><description>
        Click to select a DataSource, click on records to edit them in the adjacent form, then
        click the "Save" button to save changes.&lt;br&gt;
        This custom component combines a databound form and grid into a reusable application
        pattern of side-by-side editing, that can be used with any DataSource.
    </description>
    </Example>
    <Example title="Schema Reuse" ref="schemaChaining"/>
    <Example title="Type Reuse" ref="customSimpleType"/>
    <Example title="Localization"
        id="changeLocales"
        jsURL="extending/changeLocales.js">
       <tabs>
        <tab title="worldDS" url="grids/ds/worldSQLDS.ds.xml" canEdit="false" />
        </tabs>
        <description>
        <![CDATA[ Select a different language from the Locale drop down list, and click the Change
        Locale button to change the default language. The following UI elements will change 
        the language in which they are displayed: the month chooser of the date picker, the operator
        chooser of the custom filter, and the header context menus of the ListGrid. 
        SmartClient supports localization via configurable property files. See the 
        documentation under 'Internationalization and Localization' for more information about using existing locale files or
        creating custom locales.]]>
        </description>
    </Example>     
     <!-- _local versions of the date format examples will not set the formatters globally, so avoid
         effecting other examples after this example has been viewed
         Note: This means if the user modifies the source in the JS tab, their changes won't actually
         be displayed in the example -->
    <Example title="Standard Date Format"
        showSource="false"
        id="dateFormat"
        jsURL="extending/dateFormat_local.js"><tabs>
        <tab title="JS" url="extending/dateFormat.js" doEval="false"/>
        <tab title="employees" url="extending/employees.js"/>
        </tabs><description>
        <![CDATA[ Dates displayed in the <b>"Hire Date"</b> field in this example are formatted using the
        standard <code>"toJapanShortDate"</code> formatter. Click on a record to edit it in the
        Form, or double click to edit inline in the ListGrid.]]>
        </description>
    </Example>
    <Example title="Custom Date Format"
        showSource="false"
        id="customDateFormat"
        jsURL="extending/customDateFormat_local.js"><tabs>
        <tab title="JS" url="extending/customDateFormat.js" doEval="false"/>
        <tab title="employees" url="extending/employees.js"/>
        </tabs><description>
        <![CDATA[ Dates displayed in the <b>"Hire Date"</b> field in this example are formatted
        using a custom formatting function. Click on a record to edit it in the
        Form, or double click to edit inline in the ListGrid.]]>
        </description>
    </Example>
    <Example title="Custom Data Type"
        id="customDataType"
        jsURL="extending/customDataType.js"
        dataSource="supplyItemCurrency">
        <description>
        <![CDATA[ This example demonstrates using a custom SimpleType to provide standard
        type based validation, formatting and parsing logic across components. The "unitCost"
        field is of type <code>"currency"</code> which is explicitly defined in the source
        as a SimpleType inheriting from float. Both the (editable) ListGrid and the DynamicForm
        respect the settings defined in this type definition.]]>
        </description>
    </Example>
    <Example title="Customize Fields" dataSource="supplyItem"
             jsURL="extending/customizeFields.js">
        <description>
        Edit field definitions in the grid below to override how this form binds to the 
        &lt;code&gt;supplyItem&lt;/code&gt; DataSource.  This is a simplified example of how
        you can deliver an application that can be customized with organization-specific fields
        and rules.  Dynamic schema binding makes building WYSIWYG editing interfaces very
        simple.  
        </description></Example>
    
    <Example title="Drag and Drop" ref="customDrag"/>
    <Example title="Hovers" ref="customHovers"/>
    <Example title="Mouse Handling" ref="customMouseEvents"/>
    <Example title="Animation" ref="customAnimation"/>
    <Example title="Simple Portal" ref="portalAnimation"/>
    <!--
    <Example title="fckEditor integration" ref="fckEditor"/> 
    -->
</children></ExampleFolder>
</children></root></ExampleTree>
