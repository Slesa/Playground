<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mail</name>
    </assembly>
    <members>
        <member name="T:Lesnikowski.Client.Authentication.HttpMethod">
            <summary>
            HTTP protocol method used by <see cref="T:Lesnikowski.Client.Authentication.OAuth"/> authentication (<see cref="M:Lesnikowski.Client.Authentication.IOAuth.HttpMethod(Lesnikowski.Client.Authentication.HttpMethod)"/>).
            </summary>
            <seealso cref="T:Lesnikowski.Client.Authentication.OAuth"/>
            <seealso cref="T:Lesnikowski.Client.Authentication.IOAuth"/>
            <seealso cref="T:Lesnikowski.Client.Authentication.ISignedOAuth"/>
        </member>
        <member name="F:Lesnikowski.Client.Authentication.HttpMethod.GET">
            <summary>
            GET method.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.Authentication.HttpMethod.POST">
            <summary>
            POST method.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.Authentication.IOAuth">
            <summary>
            Represents not signed OAuth request.
            </summary>
            <seealso cref="T:Lesnikowski.Client.Authentication.OAuth"/>
            <seealso cref="T:Lesnikowski.Client.Authentication.ISignedOAuth"/>
        </member>
        <member name="M:Lesnikowski.Client.Authentication.IOAuth.Consumer(System.String,System.String)">
            <summary>
            Sets the consumer.
            </summary>
            <param name="consumerKey">Consumer key</param>
            <param name="consumerSecret">Consumer secret</param>
            <returns>This OAuth object.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Authentication.IOAuth.SignatureMethod(Lesnikowski.Client.Authentication.SignatureType)">
            <summary>
            Sets the signature method.
            </summary>
            <param name="signatureMethod">Signature method</param>
            <returns>This OAuth object.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Authentication.IOAuth.HttpMethod(Lesnikowski.Client.Authentication.HttpMethod)">
            <summary>
            Sets HTTP method (GET or POST).
            </summary>
            <param name="httpMethod">HTTP method (GET or POST).</param>
            <returns>This OAuth object.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Authentication.IOAuth.TimeStamp(System.String)">
            <summary>
            Sets the timestamp. Timestamp is generated automatically if not set.
            This method should be used in tests only.
            </summary>
            <param name="timestamp">Timestamp</param>
            <returns>This OAuth object.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Authentication.IOAuth.Nonce(System.String)">
            <summary>
            Sets nonce. Nonce is generated automatically if not set.
            This method should be used in tests only.
            </summary>
            <param name="nonce">Nonce.</param>
            <returns>This OAuth object.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Authentication.IOAuth.Token(System.String)">
            <summary>
            Sets OAuth token (oauth_token).
            </summary>
            <returns>This OAuth object.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Authentication.IOAuth.TokenSecret(System.String)">
            <summary>
            Sets OAuth token secret (oauth_token_secret).
            </summary>
            <returns>This OAuth object.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Authentication.IOAuth.AddParameter(System.String,System.String)">
            <summary>
            Adds new parameter to this request.
            </summary>
            <param name="name">Name of the parameter.</param>
            <param name="value">Value of the parameter.</param>
            <returns>This OAuth object.</returns>
            <seealso cref="T:Lesnikowski.Client.Authentication.OAuthParameterName"/>
        </member>
        <member name="M:Lesnikowski.Client.Authentication.IOAuth.Sign">
            <summary>
            Signs this request and creates signed OAuth object.
            </summary>
            <returns>Signed OAuth object.</returns>
        </member>
        <member name="T:Lesnikowski.Client.Authentication.ISignedOAuth">
            <summary>
            Represents signed OAuth request.
            </summary>
            <seealso cref="T:Lesnikowski.Client.Authentication.OAuth"/>
            <seealso cref="T:Lesnikowski.Client.Authentication.IOAuth"/>
        </member>
        <member name="M:Lesnikowski.Client.Authentication.ISignedOAuth.GetUrl">
            <summary>
            Gets entire url including parameters, OAuth parameters and signature.
            </summary>
            <returns>Url including parameters, OAuth parameters and signature.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Authentication.ISignedOAuth.GetUrlBase">
            <summary>
            Gets base url of this request.
            </summary>
            <returns>Base url of this request.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Authentication.ISignedOAuth.GetXOAuthKey">
            <summary>
            Gets XOAuth key that can be used by <see cref="M:Lesnikowski.Client.IMAP.Imap.LoginOAUTH(System.String)"/> or <see cref="M:Lesnikowski.Client.Smtp.LoginOAUTH(System.String)"/> login methods.
            </summary>
            <returns>XOAuth key.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Authentication.ISignedOAuth.GetSignature">
            <summary>
            Gets signature of this request.
            </summary>
            <returns>Request signature.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Authentication.ISignedOAuth.GetNormalizedUrl">
            <summary>
            Gets normalized url (parameters are sorted by name) of this request.
            </summary>
            <returns>Normalized url.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Authentication.ISignedOAuth.GetNormalizedParameters">
            <summary>
            Gets normalized parameter (sorted by name) of this request.
            </summary>
            <returns>Normalized parameter list.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Authentication.ISignedOAuth.GetParameters">
            <summary>
            Gets parameter collection of this request.
            This collection includes all OAuth parameters and signature.
            </summary>
            <returns>Request parameter collection. Includes all OAuth parameters and signature</returns>
        </member>
        <member name="M:Lesnikowski.Client.Authentication.ISignedOAuth.ExecuteWebRequest">
            <summary>
            Executes a web request using HTTP protocol, and method specified by <see cref="M:Lesnikowski.Client.Authentication.IOAuth.HttpMethod(Lesnikowski.Client.Authentication.HttpMethod)"/>.
            </summary>
            <returns>Parameter list returned by the server.</returns>
        </member>
        <member name="T:Lesnikowski.Client.Authentication.OAuth">
            <summary>
            This class allows you to create signed OAuth requests.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.Authentication.OAuth.ForUrl(System.String)">
            <summary>
            Creates new OAuth object for specific url.
            </summary>
            <param name="url">Base url.</param>
            <returns>OAuth object.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Authentication.OAuth.Lesnikowski#Client#Authentication#IOAuth#Token(System.String)">
            <summary>
            oauth_token
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.Authentication.OAuth.Lesnikowski#Client#Authentication#IOAuth#TokenSecret(System.String)">
            <summary>
            oauth_token_secret
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.Authentication.OAuthParameterName">
            <summary>
            Groups all OAuth parameter names.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.Authentication.OAuthParameterName.OAuthConsumerKey">
            <summary>
            'oauth_consumer_key' parameter name.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.Authentication.OAuthParameterName.OAuthCallback">
            <summary>
            'oauth_callback' parameter name.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.Authentication.OAuthParameterName.OAuthVersion">
            <summary>
            'oauth_version' parameter name.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.Authentication.OAuthParameterName.OAuthSignatureMethod">
            <summary>
            'oauth_signature_method' parameter name.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.Authentication.OAuthParameterName.OAuthSignature">
            <summary>
            'oauth_signature' parameter name.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.Authentication.OAuthParameterName.OAuthTimestamp">
            <summary>
            'oauth_timestamp' parameter name.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.Authentication.OAuthParameterName.OAuthNonce">
            <summary>
            'oauth_nonce' parameter name.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.Authentication.OAuthParameterName.OAuthToken">
            <summary>
            'oauth_token' parameter name.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.Authentication.OAuthParameterName.OAuthTokenSecret">
            <summary>
            'oauth_token_secret' parameter.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.Authentication.ParameterList">
            <summary>
            Represents <see cref="T:Lesnikowski.Client.Authentication.QueryParameter"/> collection.
            </summary>
            <seealso cref="M:Lesnikowski.Client.Authentication.ISignedOAuth.GetNormalizedParameters"/>
            <seealso cref="M:Lesnikowski.Client.Authentication.ISignedOAuth.GetParameters"/>
            <seealso cref="M:Lesnikowski.Client.Authentication.ISignedOAuth.ExecuteWebRequest"/>
            <seealso cref="T:Lesnikowski.Client.Authentication.OAuthParameterName"/>
        </member>
        <member name="M:Lesnikowski.Client.Authentication.ParameterList.GetValue(System.String)">
            <summary>
            Gets value of the parameter by name.
            </summary>
            <param name="name">Name of the parameter to search for.</param>
            <returns>Value of the query parameter with specified name -or- <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Authentication.ParameterList.Add(System.String,System.String)">
            <summary>
            Adds new query parameter with specified name and value to this collection.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="value">Parameter value.</param>
        </member>
        <member name="M:Lesnikowski.Client.Authentication.ParameterList.Add(Lesnikowski.Client.Authentication.QueryParameter)">
            <summary>
            Adds specified query parameter to this collection.
            </summary>
            <param name="queryParameter">Parameter to add.</param>
        </member>
        <member name="M:Lesnikowski.Client.Authentication.ParameterList.Parse(System.String)">
            <summary>
            Parses specified query string and creates parameter collection.
            </summary>
            <param name="queryString">Query string to parse.</param>
            <returns>New parameter list.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Authentication.ParameterList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>Enumerator that iterates through the collection</returns>
        </member>
        <member name="P:Lesnikowski.Client.Authentication.ParameterList.Count">
            <summary>
            Gets the number of parameters in this collection.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.Authentication.ParameterList.Item(System.String)">
            <summary>
            Gets parameter by name.
            </summary>
            <param name="name">Name of the parameter to search for.</param>
            <returns>Query parameter with specified name -or- <see langword="null"/> if not found.</returns>
            <seealso cref="T:Lesnikowski.Client.Authentication.OAuthParameterName"/>
        </member>
        <member name="T:Lesnikowski.Client.Authentication.QueryParameter">
            <summary>
            Represents query parameter.
            </summary>
            <seealso cref="M:Lesnikowski.Client.Authentication.IOAuth.AddParameter(System.String,System.String)"/>
            <seealso cref="T:Lesnikowski.Client.Authentication.ParameterList"/>
        </member>
        <member name="M:Lesnikowski.Client.Authentication.QueryParameter.#ctor(System.String,System.String)">
            <summary>
            Creates new instance of query parameter.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="value">Parameter value.</param>
        </member>
        <member name="P:Lesnikowski.Client.Authentication.QueryParameter.Name">
            <summary>
            Gets parameter name.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.Authentication.QueryParameter.Value">
            <summary>
            Gets parameter value.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.IMAP.Envelope">
            <summary>
             Represents combined information about envelope (subject, from to, ...) and structure (attachments) of the email stored on the IAMP server.
             You can use  <see cref="M:Lesnikowski.Client.IMAP.Imap.GetMessageInfo(System.Collections.Generic.List{System.Int64})"/> or <see cref="M:Lesnikowski.Client.IMAP.Imap.GetMessageInfoByUID(System.Collections.Generic.List{System.Int64})"/>
             methods to get MessageInfos for specified emails.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.Envelope.UID">
            <summary>
             Get the UID of the message on the IMAP server.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.Envelope.MessageNumber">
            <summary>
             Gets the message number on the IMAP server.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.Envelope.Subject">
            <summary>
            Gets the subject of the message ('Subject' field). 
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.Envelope.InReplyTo">
            <summary>
            Gets or sets parent message id of the message ('In-Reply-To' field).
            Without surrounding brackets (&lt; and &gt;)
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.Envelope.MessageID">
            <summary>
            Gets or sets id of the message ('Message-ID' field).
            Without surrounding brackets (&lt; and &gt;)
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.Envelope.Date">
            <summary>
            Gets the send date of the message ('Date' field). 
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.Envelope.From">
            <summary>
            Gets the author(s) of the message ('From' field).
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.Envelope.Sender">
            <summary>
            Gets mailbox of the agent responsible for the actual transmission ('Sender' field).
            If 'Sender' is empty you should use <see cref="P:Lesnikowski.Client.IMAP.Envelope.From"/> property.
            </summary>
            <remarks>
            'Sender' field is not required if 'From' property contains only one <see cref="T:Lesnikowski.Mail.Headers.MailBox"/>.
            'Sender' property is filled when message is from more than one person ('From' contains more than one mailbox).
            In such case it is needed to provide information which mailbox is responsible for the actual transmission.
            </remarks>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.Envelope.ReplyTo">
            <summary>
            Gets 'Reply-to' field, mailbox(es) to which the author of the message suggests that replies be sent.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.Envelope.To">
            <summary>
            Gets 'To' field, address(es) of the primary recipient(s) of the message.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.Envelope.Cc">
            <summary>
            Gets the addresses of others who are to receive the message, 
            even tough the content of the message may not be directed at them ('CC', Carbon Copy field). 
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.Envelope.Bcc">
            <summary>
            Gets the addresses of others who are to receive the message ('BCC', Blind Carbon Copy field ), 
            tough the content of the message may not be directed at them. 
            This collection can be modified.
            May be empty.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.IMAP.MessageInfo">
            <summary>
             Represents information about envelope (subject, from to, ...) of the email stored on the IAMP server.
             You can use 
             <seealso cref="M:Lesnikowski.Client.IMAP.Imap.GetEnvelopeByUID(System.Collections.Generic.List{System.Int64})"/>
             <seealso cref="M:Lesnikowski.Client.IMAP.Imap.GetEnvelope(System.Collections.Generic.List{System.Int64})"/>
             methods to get MessageInfos for specified emails.
            </summary>
             <seealso cref="M:Lesnikowski.Client.IMAP.Imap.GetMessageInfoByUID(System.Collections.Generic.List{System.Int64})"/>
             <seealso cref="M:Lesnikowski.Client.IMAP.Imap.GetMessageInfo(System.Collections.Generic.List{System.Int64})"/> 
        </member>
        <member name="P:Lesnikowski.Client.IMAP.MessageInfo.UID">
            <summary>
             Message UID on the IMAP server.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.MessageInfo.MessageNumber">
            <summary>
             Message number on the IMAP server.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.MessageInfo.BodyStructure">
            <summary>
            Represents the structure of the email stored on the IMAP server.
            Here you'll find informations about <see cref="P:Lesnikowski.Client.IMAP.BodyStructure.Attachments"/>, <see cref="P:Lesnikowski.Client.IMAP.BodyStructure.Text">plain text</see> and <see cref="P:Lesnikowski.Client.IMAP.BodyStructure.Html"/> message parts.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.MessageInfo.Envelope">
            <summary>
            Represents the envelope of the email stored on the IMAP server.
            Here you'll find informations like <see cref="P:Lesnikowski.Client.IMAP.Envelope.Subject"/>, <see cref="P:Lesnikowski.Client.IMAP.Envelope.From"/> and <see cref="P:Lesnikowski.Client.IMAP.Envelope.To"/> addresses.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.IMAP.NamespaceInfo">
            <summary>
            Represents IMAP namespace info.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.NamespaceInfo.Name">
            <summary>
            Namespace name.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.NamespaceInfo.SeparatorCharacter">
            <summary>
            Path separator character.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.IMAP.MessageFlags">
            <summary>
            Represents flags associated with the message.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.MessageFlags.UID">
            <summary>
             Message UID on the IMAP server.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.MessageFlags.MessageNumber">
            <summary>
             Message number on the IMAP server.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.MessageFlags.Flags">
            <summary>
            Flags of the specified message.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.IMAP.Namespaces">
            <summary>
            Represents IMAP server namespaces available for currently logged in user.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.Namespaces.Personal">
            <summary>
             Personal namespaces.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.Namespaces.Others">
            <summary>
             Other users' namespace.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.Namespaces.Shared">
            <summary>
             Namespaces shared with other users.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.Log">
            <summary>
            Represents client logging configuration.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.Log.Enabled">
            <summary>
            Gets or sets a value indicating whether logging is enabled or disabled. The default is false.
            You can observe the log on standard VS output or use <see cref="P:System.Diagnostics.Trace.Listeners"/> collection to add your own listener.
            Logging uses <see cref="T:System.Diagnostics.BooleanSwitch"/> named "Mail.dll". 
            Category name for log entries is also "Mail.dll".
            </summary>
        </member>
        <member name="T:Lesnikowski.Encoding2.HeaderQuotedPrintable">
            <summary>
            Implements 'QuotedPrintable' string encoding for MIME headers (RFC2047).
            </summary>
        </member>
        <member name="T:Lesnikowski.Encoding2.BaseEncoding">
            <summary>
            Base class for encoding classes.
            </summary>
        </member>
        <member name="M:Lesnikowski.Encoding2.BaseEncoding.GetEncoding(System.String)">
            <summary>
            Returns Encoding for passed charset.
            If charset is not supported returns default Encoding.Default.
            </summary>
            <param name="charset">The name of an Encoding.</param>
            <returns>Encoding for charset or default encoding.</returns>
        </member>
        <member name="M:Lesnikowski.Encoding2.BaseEncoding.EncodeAsString(System.Byte[])">
            <summary>
            Encodes specified byte array.
            </summary>
            <param name="data">Byte array to encode.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="M:Lesnikowski.Encoding2.BaseEncoding.DecodeByteArray(System.String)">
            <summary>
            Decodes specified string.
            </summary>
            <param name="text">Encoded string to decode.</param>
            <returns>Decoded data.</returns>
        </member>
        <member name="M:Lesnikowski.Encoding2.BaseEncoding.DecodeString(System.String,System.String)">
            <summary>
            Decodes specified string using specified charset.
            </summary>
            <param name="text">Encoded string to decode.</param>
            <param name="charset">charset e.g. "iso-8859-1"</param>
            <returns>Decoded string.</returns>
        </member>
        <member name="M:Lesnikowski.Encoding2.HeaderQuotedPrintable.DecodeByteArray(System.String)">
            <summary>
            Changes Quoted-printable to byte array.
            Changes 3 chars '=A9' into one byte with value A9 HEX.
            Changes '_' into space ' ' (20 HEX).
            </summary>
            <param name="text">Quoted-printable string e.g. "Pawe=B3_Le=B6nikowski"</param>        
            <returns>Byte array.</returns>
        </member>
        <member name="M:Lesnikowski.Encoding2.HeaderQuotedPrintable.DecodeString(System.String,System.String)">
            <summary>
            Decodes Quoted-printable string.
            </summary>
            <param name="s">"Pawe=B3_Le=B6nikowski"</param>
            <param name="charset">charset e.g. "iso-8859-1"</param>
            <returns>"Paweł Leśnikowski"</returns>
            <exception cref="T:System.NotSupportedException">
            The <paramref name="charset"/> is not supported by the current regional options of the computer executing this method
            </exception>
        </member>
        <member name="T:Lesnikowski.Mail.GenericPriority">
            <summary>
            Generic priority of the message.
            Message priority can be stored used three different headers: <see cref="P:Lesnikowski.Mail.IMail.Priority"/>,  <see cref="P:Lesnikowski.Mail.IMail.Importance"/> and <see cref="P:Lesnikowski.Mail.IMail.XPriority"/>.
            This enum is used by <seealso cref="M:Lesnikowski.Mail.IMail.GetGenericPriority"/> method, which checks all those headers.
            </summary>
            <seealso cref="M:Lesnikowski.Mail.IMail.PriorityHigh"/>
            <seealso cref="M:Lesnikowski.Mail.IMail.PriorityLow"/>
        </member>
        <member name="F:Lesnikowski.Mail.GenericPriority.Low">
            <summary>
            Message has low priority.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.GenericPriority.Normal">
            <summary>
            Message has normal priority.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.GenericPriority.High">
            <summary>
            Message has high priority.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.BaseHeader">
            <summary>
            Base class for headers contained in <see cref="T:Lesnikowski.Mail.Headers.HeaderCollection"/> class.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.IHeader.ParseHeaderValue(System.Collections.Generic.List{System.String})">
            <summary>
            Parses specified value.
            </summary>
            <param name="value">value of the header.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.IHeader.GetHeaderValue">
            <summary>
            Gets header line from this Header.
            </summary>
            <returns>Header line</returns>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.IHeader.IsDirty">
            <summary>
            <c>True</c> if <see cref="M:Lesnikowski.Mail.Headers.IHeader.GetHeaderValue"/> result has changed,
            <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.IHeader.IsEmpty">
            <summary>
            <c>True</c> if header should be rendered <c>false</c> otherwise
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.IHeader.Key">
            <summary>
            Gets the header key associated with this header.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.BaseHeader.ParseHeaderValue(System.Collections.Generic.List{System.String})">
            <summary>
            Parses specified value.
            </summary>
            <param name="value">value of the header.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.BaseHeader.GetHeaderValue">
            <summary>
            Gets header line from this Header.
            </summary>
            <returns>Header line</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.BaseHeader.ParseHeaderValue(System.String)">
            <summary>
            Parses specified value.
            </summary>
            <param name="value">value of the header.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.BaseHeader.#ctor(System.String)">
            <summary>
            Creates new Base header object,
            and assigns it specified key
            </summary>
            <param name="key">Header key associated with this header</param>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.BaseHeader.IsDirty">
            <summary>
            Get or set the value indicating if this header has changed.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.BaseHeader.Key">
            <summary>
            Header key associated with this header.
            Always lowercase.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.AddressValidator">
            <summary>
             Validates email address.
             Uses Format, MX and SMTP validation.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.AddressValidator.Validate(System.String)">
            <summary>
             Validates email address (email format, existence of MX record, SMTP connection).
            </summary>
            <param name="address">Email address to validate (e.g. mail@example.com).</param>
            <returns>Result of the validation.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.AddressValidator.ValidateFormat(System.String)">
             <summary>
             Validates only email format.
             </summary>
             <param name="address">Email address to validate (e.g. mail@example.com).</param>
            <returns>Result of the validation.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.AddressValidator.ValidateMX(System.String)">
             <summary>
             Validates email format and existence of MX record.
             </summary>
             <param name="address">Email address to validate (e.g. mail@example.com).</param>
            <returns>Result of the validation.</returns>
        </member>
        <member name="T:Lesnikowski.Mail.AddressValidationResult">
            <summary>
            Represents result of the email address validation.
            </summary>
            <seealso cref="T:Lesnikowski.Mail.AddressValidator"/>
        </member>
        <member name="F:Lesnikowski.Mail.AddressValidationResult.Success">
            <summary>
            Email is valid.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.AddressValidationResult.IncorrectFormat">
            <summary>
            Email has incorrect format.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.AddressValidationResult.NoMXRecord">
            <summary>
            No MX record was found for the domain.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.AddressValidationResult.SmtpRejection">
            <summary>
            Smtp server rejected email address.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.AddressValidationResult.SmtpError">
            <summary>
            Smtp server returned an error.
            </summary>
        </member>
        <member name="M:Lesnikowski.Parsers.QuotedListTokenizer.MoveOneForward">
            <summary>
            Moves index one step forward, 
            this method is aware of the escaped strings.
            </summary>
            <returns>False if end is reached, <c>true</c> if we can move forward again.</returns>
        </member>
        <member name="T:Lesnikowski.Client.Authentication.SignatureType">
            <summary>
            Signature types used by <see cref="T:Lesnikowski.Client.Authentication.OAuth"/> authentication (<see cref="M:Lesnikowski.Client.Authentication.IOAuth.SignatureMethod(Lesnikowski.Client.Authentication.SignatureType)"/>).
            </summary>
            <seealso cref="T:Lesnikowski.Client.Authentication.OAuth"/>
            <seealso cref="T:Lesnikowski.Client.Authentication.IOAuth"/>
            <seealso cref="T:Lesnikowski.Client.Authentication.ISignedOAuth"/>
        </member>
        <member name="F:Lesnikowski.Client.Authentication.SignatureType.HMACSHA1">
            <summary>
            HMACSHA1 method.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.Authentication.SignatureType.PLAINTEXT">
            <summary>
            Plaint text method.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.Authentication.SignatureType.RSASHA1">
            <summary>
            Not supported RSASHA1 method.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.IMAP.MimeStructure">
            <summary>
            Represents part of the mime tree stored on the IMAP server.
            You can download the content of a part using following methods:
            <see cref="M:Lesnikowski.Client.IMAP.Imap.GetMimePart(System.Int64,Lesnikowski.Client.IMAP.MimeStructure)"/>, <see cref="M:Lesnikowski.Client.IMAP.Imap.GetMimePartByUID(System.Int64,Lesnikowski.Client.IMAP.MimeStructure)"/>, <see cref="M:Lesnikowski.Client.IMAP.Imap.GetMimePartText(System.Int64,Lesnikowski.Client.IMAP.MimeStructure)"/>, <see cref="M:Lesnikowski.Client.IMAP.Imap.GetMimePartTextByUID(System.Int64,Lesnikowski.Client.IMAP.MimeStructure)"/>,
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.MimeStructure.ID">
            <summary>
            Id of the part.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.MimeStructure.FileName">
            <summary>
            Suggested file name, may be <see langword="null"/> if not present.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.MimeStructure.SafeFileName">
            <summary>
            Suggested file name. All special characters and path are removed. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.MimeStructure.ContentTransferEncoding">
            <summary>
            Content transfer encoding.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.MimeStructure.Size">
            <summary>
            Size of the part in bytes.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.MimeStructure.Encoding">
            <summary>
            Encoding of the text parts.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.MimeStructure.ContentType">
            <summary>
            Content type, may be <see langword="null"/> if not present.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.IMAP.FluentSearch">
            <summary>
            Represents IMAP search object. Created by <see cref="M:Lesnikowski.Client.IMAP.Imap.Search"/>.
            </summary>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.Search"/>
            <remarks>
            <see cref="F:Lesnikowski.Client.IMAP.ResultType.Uids"/> is default, use <see cref="M:Lesnikowski.Client.IMAP.FluentSearch.ResultsAs(Lesnikowski.Client.IMAP.ResultType)"/> method to change the result type.
            </remarks>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.FluentSearch.ResultsAs(Lesnikowski.Client.IMAP.ResultType)">
            <summary>
            Sets the result type of this search.
            </summary>
            <param name="resultType">Result type.</param>
            <returns>This search object.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.FluentSearch.UseEncoding(System.Text.Encoding)">
            <summary>
            Forces the use of specified encoding.
            Some servers do not support this feature.
            </summary>
            <param name="encoding">Search parameters encoding.</param>
            <returns>This search object.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.FluentSearch.Where(Lesnikowski.Client.IMAP.ICriterion)">
            <summary>
            Adds search criteria to this search.
            Use <see cref="M:Lesnikowski.Client.IMAP.Expression.And(Lesnikowski.Client.IMAP.ICriterion[])"/> and other <see cref="T:Lesnikowski.Client.IMAP.Expression"/> methods to create a valid query.
            You can also pass <see cref="T:Lesnikowski.Client.IMAP.SimpleImapQuery"/> to this method.
            </summary>
            <param name="criterion">Search criteria.</param>
            <returns>This search object.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.FluentSearch.Sort(Lesnikowski.Client.IMAP.ISorter)">
            <summary>
            Adds sort criteria to this search.
            Use <see cref="M:Lesnikowski.Client.IMAP.SortBy.Multiple(Lesnikowski.Client.IMAP.ISorter[])"/> and other <see cref="T:Lesnikowski.Client.IMAP.SortBy"/> methods to create a valid query.
            </summary>
            <param name="sorter">Sort criteria.</param>
            <returns>This search object.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.FluentSearch.GetList">
            <summary>
            Runs the search and retrieves UIDS or message numbers of messages that match the search.
            </summary>
            <returns>List of UIDS or numbers.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.FluentSearch.op_Implicit(Lesnikowski.Client.IMAP.FluentSearch)~System.Collections.Generic.List{System.Int64}">
            <summary>
            Runs the search and retrieves UIDS or message numbers of messages that match the search.
            </summary>
            <param name="search">Search object.</param>
            <returns>List of UIDS or numbers.</returns>
        </member>
        <member name="T:Lesnikowski.Client.IMAP.BodyStructure">
            <summary>
            Represents structure of the email stored on the IMAP server.
            You can use <see cref="M:Lesnikowski.Client.IMAP.Imap.GetBodyStructureByUID(System.Collections.Generic.List{System.Int64})"/> or <see cref="M:Lesnikowski.Client.IMAP.Imap.GetBodyStructure(System.Collections.Generic.List{System.Int64})"/> methods to get the structure of the specified emails.
            </summary>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.GetMessageInfoByUID(System.Collections.Generic.List{System.Int64})"/>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.GetMessageInfo(System.Collections.Generic.List{System.Int64})"/> 
        </member>
        <member name="P:Lesnikowski.Client.IMAP.BodyStructure.UID">
            <summary>
             Message UID on the IMAP server.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.BodyStructure.MessageNumber">
            <summary>
             Message number on the IMAP server.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.BodyStructure.Text">
            <summary>
            Contains information about plain text version of the email.
            You can use <see cref="M:Lesnikowski.Client.IMAP.Imap.GetMimePartText(System.Int64,Lesnikowski.Client.IMAP.MimeStructure)"/> or <see cref="M:Lesnikowski.Client.IMAP.Imap.GetMimePartTextByUID(System.Int64,Lesnikowski.Client.IMAP.MimeStructure)"/> to get the part's content.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.BodyStructure.Html">
            <summary>
            Contains information about HTML content of the email.
            You can use <see cref="M:Lesnikowski.Client.IMAP.Imap.GetMimePartText(System.Int64,Lesnikowski.Client.IMAP.MimeStructure)"/> or <see cref="M:Lesnikowski.Client.IMAP.Imap.GetMimePartTextByUID(System.Int64,Lesnikowski.Client.IMAP.MimeStructure)"/> to get the part's content.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.BodyStructure.Attachments">
            <summary>
            Contains information about email's attachments.
            You can use <see cref="M:Lesnikowski.Client.IMAP.Imap.GetMimePart(System.Int64,Lesnikowski.Client.IMAP.MimeStructure)"/> or <see cref="M:Lesnikowski.Client.IMAP.Imap.GetMimePartByUID(System.Int64,Lesnikowski.Client.IMAP.MimeStructure)"/> to get the part's content.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.BodyStructure.Visuals">
            <summary>
            Contains information about email's visual elements.
            E.g. Images embedded inside HTML email.
            You can use <see cref="M:Lesnikowski.Client.IMAP.Imap.GetMimePart(System.Int64,Lesnikowski.Client.IMAP.MimeStructure)"/> or <see cref="M:Lesnikowski.Client.IMAP.Imap.GetMimePartByUID(System.Int64,Lesnikowski.Client.IMAP.MimeStructure)"/> to get the part's content.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.BodyStructure.NonVisuals">
            <summary>
            Contains information about email's non visual elements.
            You can use <see cref="M:Lesnikowski.Client.IMAP.Imap.GetMimePart(System.Int64,Lesnikowski.Client.IMAP.MimeStructure)"/> or <see cref="M:Lesnikowski.Client.IMAP.Imap.GetMimePartByUID(System.Int64,Lesnikowski.Client.IMAP.MimeStructure)"/> to get the part's content.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.IMAP.ImapResponse">
            <summary>
            Represents response from IMAP server.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.ImapResponse.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Lesnikowski.Client.IMAP.ImapResponse"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:Lesnikowski.Client.IMAP.ImapResponse"/>.
            </returns>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.ImapResponse.Tag">
            <summary>
            Tag expected for this response.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.ImapResponse.ImapResponseStatus">
            <summary>
             Status of this response.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.ImapResponse.Message">
            <summary>
            Response message
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.ImapResponse.Lines">
            <summary>
            All lines of the response except the status line.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.ImapResponse.StatusLine">
            <summary>
            Entire status message.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.IMAP.ISorter">
            <summary>
            Represents IMAP sort criteria.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.ISorter.Render(System.Text.StringBuilder)">
            <summary>
            Renders current sorter object to <see cref="T:System.Text.StringBuilder"/>
            </summary>
            <param name="writer"><see cref="T:System.Text.StringBuilder"/> to render on.</param>
        </member>
        <member name="T:Lesnikowski.Client.IMAP.FolderInfo">
            <summary>
            Represents IMAP folder (mailbox) info.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.FolderInfo.Name">
            <summary>
            Folder name.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.FolderInfo.SeparatorCharacter">
            <summary>
            Path separator character.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.FolderInfo.Flags">
            <summary>
            Flags associated with this folder.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.FolderInfo.CanSelect">
            <summary>
            Specifies if you can select this folder. (Searches for "\Noselect" flag)
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.IMAP.ResultType">
            <summary>
            Defines result type for IMAP searches.
            </summary>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.Search"/>
            <seealso cref="M:Lesnikowski.Client.IMAP.FluentSearch.ResultsAs(Lesnikowski.Client.IMAP.ResultType)"/>
        </member>
        <member name="F:Lesnikowski.Client.IMAP.ResultType.Uids">
            <summary>
            Result should be returned in form of unique message ids.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.IMAP.ResultType.Numbers">
            <summary>
            Result should be returned in form of message numbers.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.IMAP.SortBy">
            <summary>
            Represents expressions that can be used by <see cref="M:Lesnikowski.Client.IMAP.FluentSearch.Sort(Lesnikowski.Client.IMAP.ISorter)"/> methods.
            To join several sort criteria use <see cref="M:Lesnikowski.Client.IMAP.SortBy.Multiple(Lesnikowski.Client.IMAP.ISorter[])"/>
            </summary>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.Search"/>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.SortBy.Reverse(Lesnikowski.Client.IMAP.ISorter)">
             <summary>
             Reverses specified sorter. Descending order is used.
             Note: REVERSE only reverses a single criterion, and does not
             affect the implicit "sequence number" sort criterion if all
             other criteria are identical.  Consequently, a sort of
             REVERSE SUBJECT is not the same as a reverse ordering of a
             SUBJECT sort.  This can be avoided by use of additional
             criteria, e.g., SUBJECT DATE vs. REVERSE SUBJECT REVERSE
             DATE.  In general, however, it's better (and faster, if the
            client has a "reverse current ordering" command) to reverse
            the results in the client instead of issuing a new SORT.
             </summary>
             <returns>New sorter.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.SortBy.Multiple(Lesnikowski.Client.IMAP.ISorter[])">
            <summary>
            Returns multiple sort criteria.
            </summary>
            <param name="sorters">Sort criteria to join.</param>
            <returns>New sorter.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.SortBy.Arrival">
            <summary>
            Internal date and time of the message.  This differs from the
            ON criteria in SEARCH, which uses just the internal date.
            </summary>
            <returns>New sorter.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.SortBy.Cc">
            <summary>
            Sorts on local part of the first "cc" address.
            </summary>
            <returns>New sorter.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.SortBy.Date">
            <summary>
            Sent date and time, as described in section 2.2.
            </summary>
            <returns>New sorter.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.SortBy.From">
            <summary>
            Sorts on local part of the first "From" address.
            </summary>
            <returns>New sorter.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.SortBy.Size">
            <summary>
            Size of the message in octets.
            </summary>
            <returns>New sorter.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.SortBy.Subject">
            <summary>
            Base subject text.
            </summary>
            <returns>New sorter.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.SortBy.To">
            <summary>
             Sorts on local part of the first "To" address.
            </summary>
            <returns>New sorter.</returns>
        </member>
        <member name="T:Lesnikowski.Client.IMAP.CommonFolders">
            <summary>
            Identifies common folders using flags returned by XLIST extension of <see cref="M:Lesnikowski.Client.IMAP.Imap.GetFolders"/> method.
            </summary>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.GetFolders"/>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.GetFolders(System.String)"/>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.GetFoldersOneLevelDown"/>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.GetFoldersOneLevelDown(System.String)"/>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.CommonFolders.#ctor(System.Collections.Generic.List{Lesnikowski.Client.IMAP.FolderInfo})">
            <summary>
            Initializes a new instance of the CommonFolders object.
            </summary>
            <param name="folders">
            Folder list returned from <see cref="M:Lesnikowski.Client.IMAP.Imap.GetFolders"/>, <see cref="M:Lesnikowski.Client.IMAP.Imap.GetFolders(System.String)"/>, 
            <see cref="M:Lesnikowski.Client.IMAP.Imap.GetFoldersOneLevelDown"/> or <see cref="M:Lesnikowski.Client.IMAP.Imap.GetFoldersOneLevelDown(System.String)"/>
            </param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.CommonFolders.GetAll">
            <summary>
            Returns all folders.
            </summary>
            <returns>List of all folders.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.CommonFolders.FindFolderByFlag(System.String)">
            <summary>
            Finds folder with specified flag.
            </summary>
            <param name="flag">Flag to search for.</param>
            <returns>Folder having the specified flag.</returns>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.CommonFolders.Inbox">
            <summary>
            Inbox folder.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.CommonFolders.AllMail">
            <summary>
            AllMail folder.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.CommonFolders.Drafts">
            <summary>
            Drafts folder.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.CommonFolders.Sent">
            <summary>
            Sent folder.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.CommonFolders.Spam">
            <summary>
            Spam folder.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.CommonFolders.Starred">
            <summary>
            Starred folder.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.CommonFolders.Trash">
            <summary>
            Trash folder.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.AccountStats">
            <summary>
            Represents account statistics. 
            You can use <see cref="M:Lesnikowski.Client.Pop3.GetAccountStat"/> to get those informations.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.AccountStats.MessageCount">
            <summary>
            Number of messages on server.
            
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.AccountStats.MailboxSize">
            <summary>
            Size of all mail messages on the server in octets.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.Pop3ResponseStatus">
            <summary>
            Represents status of POP3 response.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.Pop3ResponseStatus.Negative">
            <summary> Received "-ERR" response. </summary>
        </member>
        <member name="F:Lesnikowski.Client.Pop3ResponseStatus.Positive">
            <summary> Received "+OK" response. </summary>
        </member>
        <member name="F:Lesnikowski.Client.Pop3ResponseStatus.Error">
            <summary> Unknown, error. </summary>
        </member>
        <member name="M:Lesnikowski.Cryptography.PublicKeyReader.Read(System.IO.BinaryReader)">
            <summary>
             Parses binary asn.1 X509
            </summary>
            <param name="reader">binary asn.1 X509</param>
            <returns><see cref="T:System.Security.Cryptography.RSACryptoServiceProvider"/></returns>
        </member>
        <member name="M:Lesnikowski.Cryptography.PublicKeyReader.ReadFromPemString(System.String)">
            <summary>
            With header and footer (-----BEGIN PUBLIC KEY-----)
            </summary>
        </member>
        <member name="T:Lesnikowski.Dns.Constants.FlagMasks">
            <summary>
            FlagMasks are used as a bit mask to isolate bits 16 through 31 
            of the DNS header to convert them to their appropriate enum types.
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsClass.Inet">
            <summary>
            Internet (inet), RFC 1035
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsClass.Chaos">
            <summary>
            MIT Chaos-net, RFC 1035
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsClass.Hesiod">
            <summary>
            MIT Hesiod, RFC 1035
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsClass.None">
            <summary>
            RFC 2136 - None
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsClass.Any">
            <summary>
            Any QCLASS only, Wildcard match, RFC 1035
            </summary>
        </member>
        <member name="T:Lesnikowski.Dns.Constants.NsFlags">
            <summary>
            |AA|TC|RD|RA| Z|AD|CD|  - 8 bits (1 byte) flag fields 
            
            reference: http://www.networksorcery.com/enp/protocol/dns.htm
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsFlags.AA">
            <summary>
            AA - Authorative Answer 	[RFC1035]   ( 0 = Not authoritative, 1 = Is authoritative )
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsFlags.TC">
            <summary>
            TC - Truncated Response 	[RFC1035]   ( 0 = Not truncated, 1 = Message truncated )
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsFlags.RD">
            <summary>
            RD - Recursion Desired	[RFC1035]   ( 0 = Recursion not desired, 1 = Recursion desired )
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsFlags.RA">
            <summary>
            RA - Recursion Allowed	[RFC1035]   ( 0 = Recursive query support not available, 1 = Recursive query support available )
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsFlags.AD">
            <summary>
            AD - Authentic Data   	[RFC4035]   ( Authenticated data. 1 bit ) [NOT IMPLEMENTED]
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsFlags.CD">
            <summary>
            CD - Checking Disabled 	[RFC4035]   ( Checking Disabled. 1 bit ) [NOT IMPLEMENTED]
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.INVALID">
            <summary>
            Invalid
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.A">
            <summary>
            Host address
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.NS">
            <summary>
            Authoritative server 
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.MD">
            <summary>
            Mail destination
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.MF">
            <summary>
            Mail forwarder
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.CNAME">
            <summary>
             Canonical name
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.SOA">
            <summary>
            Start of authority zone
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.MB">
            <summary>
            Mailbox domain name
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.MG">
            <summary>
            Mail group member
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.MR">
            <summary>
            Mail rename name
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.NULL">
            <summary>
            Null resource record
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.WKS">
            <summary>
            Well known service
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.PTR">
            <summary>
            Domain name pointer
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.HINFO">
            <summary>
            Host information
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.MINFO">
            <summary>
            Mailbox information
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.MX">
            <summary>
            Mail routing information
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.TXT">
            <summary>
            Text strings, RFC 1464 
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.RP">
            <summary>
            Responsible person, RFC 1183
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.AFSDB">
            <summary>
            AFS cell database, RFC 1183
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.X25">
            <summary>
            X_25 calling address, RFC 1183
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.ISDN">
            <summary>
            ISDN calling address, RFC 1183
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.RT">
            <summary>
            Router, RFC 1183, Implemented
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.NSAP">
            <summary>
            NSAP address, RFC 1706
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.NSAP_PTR">
            <summary>
            Reverse NSAP lookup - deprecated by PTR	?
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.SIG">
            <summary>
            Security signature, RFC 2535
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.KEY">
            <summary>
            Security key, RFC 2535
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.PX">
            <summary>
            X.400 mail mapping, RFC ?
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.GPOS">
            <summary>
            Geographical position - withdrawn, RFC 1712
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.AAAA">
            <summary>
            Ip6 Address, RFC 1886
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.LOC">
            <summary>
            Location Information, RFC 1876
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.NXT">
            <summary>
            Next domain (security), RFC 2065
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.EID">
            <summary>
            Endpoint identifier,RFC ?
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.NIMLOC">
            <summary>
            Nimrod Locator, RFC ?
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.SRV">
            <summary>
            Server Record, RFC 2052
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.ATMA">
            <summary>
            ATM Address
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.MAPTR">
            <summary>
            Naming Authority PoinTeR, RFC 2915
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.KX">
            <summary>
            Key Exchange, RFC 2230
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.CERT">
            <summary>
            Certification record, RFC 2538
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.A6">
            <summary>
            IPv6 address (deprecates AAAA), RFC 3226
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.DNAME">
            <summary>
            Non-terminal DNAME (for IPv6), RFC 2874
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.SINK">
            <summary>
            Kitchen sink (experimentatl), RFC ?
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.OPT">
            <summary>
            EDNS0 option (meta-RR), RFC 2671
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.TKEY">
            <summary>
            Transaction key, RFC 2930
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.TSIG">
            <summary>
            Transaction signature, RFC 2845
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.IXFR">
            <summary>
            Incremental zone transfer, RFC 1995
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.AXFR">
            <summary>
            Transfer zone of authority, RFC 1035
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.MAILB">
            <summary>
            Transfer mailbox records, RFC 1035
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.MAILA">
            <summary>
            Transfer mail agent records, RFC 1035
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.ANY">
            <summary>
            All of the above, RFC 1035
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.DNSSECTrustAuthorities">
            <summary>
            DNSSEC Trust Authorities
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.NsRecordType.DNSSECLookasideValidation">
            <summary>
            DNSSEC Lookaside Validation, RFC4431
            </summary>
        </member>
        <member name="T:Lesnikowski.Dns.Constants.OpCode">
            <summary>
            |  OpCode  | - 4 bits of DNS header, Bit 17 - 20
                
            RFC 1035:
            
            A four bit field that specifies kind of query in this
            message.  This value is set by the originator of a query
            and copied into the response.  
            
            The values are:
            
                0               a standard query (QUERY)
            
                1               an inverse query (IQUERY)
            
                2               a server status request (STATUS)
            
                3-15            reserved for future 
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.OpCode.QUERY">
            <summary>
            Standard query
            [RFC1035] (QUERY)
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.OpCode.IQUERY">
            <summary>
            Inverse query
            [RFC1035] (IQUERY)
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.OpCode.STATUS">
            <summary>
            Server status request
            [RFC1035] (STATUS)
            </summary>
        </member>
        <member name="T:Lesnikowski.Dns.Constants.QueryResponse">
            <summary>
            |QR| - Starts at bit 16 of DNS Header, size: 1 bit
            
            RFC 1035:
            A one bit field that specifies whether this message is a
            query (0), or a response (1).
            
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.QueryResponse.Query">
            <summary>
            Query (0)
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.QueryResponse.Response">
            <summary>
            Response (1)
            </summary>
        </member>
        <member name="T:Lesnikowski.Dns.Constants.RCode">
            <summary>
            |   RCODE   | - 4 bits error codes
            
            Response code - this 4 bit field is set as part of
                responses.  The values have the following interpretation:
            
            Fields 6-15            Reserved for future use.
            
            reference: http://www.networksorcery.com/enp/protocol/dns.htm
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.RCode.NoError">
            <summary>
            No error condition
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.RCode.FormatError">
            <summary>
            Format error - The name server was unable to 
            interpret the query.
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.RCode.ServerFailure">
            <summary>
            Server failure - The name server was unable to process 
            this query due to a problem with the name server.
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.RCode.NameError">
            <summary>
            Name Error - Meaningful only for responses from an 
            authoritative name server, this code signifies that 
            the domain name referenced in the query does not 
            exist.
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.RCode.NotImplemented">
            <summary>
            Not Implemented - The name server does not support 
            the requested kind of query.
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.RCode.Refused">
            <summary>
            Refused - The name server refuses to perform the 
            specified operation for policy reasons.  For example,
            a name server may not wish to provide the information 
            to the particular requester, or a name server may not 
            wish to perform a particular operation (e.g., zone  
            transfer) for particular data.
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.RCode.YXDomain">
            <summary>
            RFC 2136
            Name Exists when it should not.
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.RCode.YXRRSet">
            <summary>
            RFC 2136
            RR Set Exists when it should not.
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.RCode.NXRRSet">
            <summary>
            RFC 2136
            RR Set that should exist does not.
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.RCode.NotAuth">
            <summary>
            RFC 2136
            Server Not Authoritative for zone.
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.RCode.NotZone">
            <summary>
            RFC 2136
            Name not contained in zone.
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.RCode.BADVERS_BADSIG">
            <summary>
            RFC 2671
            RFC 2845
            
            BADVERS Bad OPT Version.
            BADSIG  TSIG Signature Failure.
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.RCode.BADKEY">
            <summary>
            RFC 2845
            Key not recognized.
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.RCode.BADTIME">
            <summary>
            RFC 2845
            Signature out of time window.
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.RCode.BADMODE">
            <summary>
            RFC 2930
            Bad TKEY Mode.
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.RCode.BADNAME">
            <summary>
            RFC 2930
            Duplicate key name.
            </summary>
        </member>
        <member name="F:Lesnikowski.Dns.Constants.RCode.BADALG">
            <summary>
            RFC 2930
            Algorithm not supported.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.Dns.Client.DNSServerAddressResolver.IsPlatformLinuxUnix">
            <summary>
            Tests to see if this is running on a Linux or Unix Platform 
            </summary>
            <returns><see langword="true"/> if unix or linux is detected</returns>
        </member>
        <member name="P:Lesnikowski.Client.Dns.Factory.DnsRecordHeader.Name">
            <summary>
            NAME - an owner name, i.e., the name of the node to which this
                   resource record pertains.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.Dns.Factory.DnsRecordHeader.NsType">
            <summary>
            TYPE    two octets containing one of the RR TYPE codes.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.Dns.Factory.DnsRecordHeader.NsClass">
            <summary>
            CLASS - two octets containing one of the RR CLASS codes.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.Dns.Factory.DnsRecordHeader.TimeToLive">
            <summary>
            TTL - a 32 bit signed integer that specifies the time interval
                  that the resource record may be cached before the source
                  of the information should again be consulted.  Zero
                  values are interpreted to mean that the RR can only be
                  used for the transaction in progress, and should not be
                  cached.  For example, SOA records are always distributed
                  with a zero TTL to prohibit caching.  Zero values can
                  also be used for extremely volatile data.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.Dns.Factory.DnsRecordHeader.DataLength">
            <summary>
            RDLENGTH - an unsigned 16 bit integer that specifies the length in
                       octets of the RDATA field.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.Dns.Factory.DnsTextReader.ReadMultipleText(System.IO.Stream,System.Int32)">
            <summary>
            1 byte:         length1    
            length1 bytes:  text1    
            1 byte:         length2  
            length2 bytes:  text2
            --------------------------
            recordSize
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.Dns.Infrastructure.DnsQueryBase">
            <summary>
            DnsQueryBase maintains the common state of DNS Queries (both responses and requests)
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.Dns.Infrastructure.DnsQueryBase.TransactionID">
            <summary>
            ID - A 16 bit identifier. This identifier is copied
            the corresponding reply and can be used by the requester
            to match up replies to outstanding queries.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.Dns.Infrastructure.DnsQueryBase.QueryResponse">
            <summary>
            A one bit field that specifies whether this message is a
            query (0), or a response (1).
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.Dns.Infrastructure.DnsQueryBase.OpCode">
            <summary>
            OPCODE - A four bit field that specifies kind of query in this
            message.  This value is set by the originator of a query
            and copied into the response.  
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.Dns.Infrastructure.DnsQueryBase.NsFlags">
            <summary>
            NsFlags - A combination of flag fields in the DNS header (|AA|TC|RD|RA|)
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.Dns.Infrastructure.DnsQueryBase.RCode">
            <summary>
            Response code - this 4 bit field is set as part of
            responses only. 
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.Dns.Infrastructure.DnsQueryBase.Questions">
            <summary>
            QDCOUNT - an unsigned 16 bit integer specifying the number of
            entries in the question section.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.Dns.Infrastructure.DnsQueryBase.AnswerRRs">
            <summary>
            ANCOUNT - an unsigned 16 bit integer specifying the number of
            resource records in the answer section.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.Dns.Infrastructure.DnsQueryBase.AuthorityRRs">
            <summary>
            NSCOUNT - an unsigned 16 bit integer specifying the number of name
            server resource records in the authority records
            section.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.Dns.Infrastructure.DnsQueryBase.AdditionalRRs">
            <summary>
            ARCOUNT - an unsigned 16 bit integer specifying the number of
            resource records in the additional records section.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.Dns.Infrastructure.DnsQueryBase.Name">
            <summary>
            QNAME - a domain name represented as a sequence of labels, where
            each label consists of a length octet followed by that number of octets.  
            The domain name terminates with the zero length octet for the null label of the root.  
            Note that this field may be an odd number of octets; no padding is used
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.Dns.Infrastructure.DnsQueryBase.NsType">
            <summary>
            QTYPE - a two octet code which specifies the type of the query.
            The values for this field include all codes valid for a
            TYPE field, together with some more general codes which
            can match more than one type of RR.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.Dns.Infrastructure.DnsQueryBase.NsClass">
            <summary>
            QCLASS - a two octet code that specifies the class of the query.
            For example, the QCLASS field is IN for the Internet.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.Dns.Records.ARecord">
            <summary>
            RFC 1035:
            
            3.4.1. A RDATA format
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
             |                    ADDRESS                    |
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
             
             where:
             
             ADDRESS         A 32 bit Internet address.
             
             Hosts that have multiple Internet addresses will have multiple A
             records.
             
             A records cause no additional section processing.  The RDATA section of
             an A line in a master file is an Internet address expressed as four
             decimal numbers separated by dots without any embedded spaces (e.g.,
             "10.2.0.52" or "192.0.5.6").
            
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.Dns.Records.ARecord.HostAddress">
            <summary>
            The answer host address for the DNS A Record.
            </summary>
        </member>
        <member name="M:Lesnikowski.Infrastructure.Argument.IsNotNull(System.Object,System.String)">
            <summary>
            Throws ArgumentNullException when argument is null.
            </summary>
            <param name="argument">Argument that must be != null.</param>
            <param name="name">Argument's name.</param>
        </member>
        <member name="M:Lesnikowski.Infrastructure.Argument.Is(System.Boolean,System.String)">
            <summary>
            Throws ArgumentException when condition is not met.
            </summary>
            <param name="condition">Condition that is required.</param>
            <param name="message">Message.</param>
        </member>
        <member name="M:Lesnikowski.Infrastructure.Argument.IsNot(System.Boolean,System.String)">
            <summary>
            Throws ArgumentException when condition is met.
            </summary>
            <param name="condition">Condition that is excluded.</param>
            <param name="message">Message.</param>
        </member>
        <member name="M:Lesnikowski.Infrastructure.Argument.IsNotNullNorEmpty(System.String,System.String)">
            <summary>
            Throws ArgumentException when string is null or is empty.
            </summary>
            <param name="argument">Argument that must be != null and != string.Empty.</param>
            <param name="name">Argument's name.</param>
        </member>
        <member name="M:Lesnikowski.Infrastructure.Argument.IsNotBlank(System.String,System.String)">
            <summary>
            Throws ArgumentException when string is blank.
            </summary>
            <param name="argument">Argument that must not be blank.</param>
            <param name="message">Message.</param>
        </member>
        <member name="T:Lesnikowski.Licensing.AssemblyStringEncryptor">
            <summary>
            This class is used by Babel obfuscator to encrypt all strings found in the application.
            </summary>
        </member>
        <member name="M:Lesnikowski.Licensing.ILicenseLoader.IsLicensePresent">
            <summary>
            Checks if license exists.
            May throw exception on error.
            </summary>
            <returns>True if license is present, false otherwise</returns>
        </member>
        <member name="M:Lesnikowski.Licensing.ILicenseLoader.Load">
            <summary>
            Loads the license document.
            May throw exception on error.
            </summary>
            <returns>Loaded Xml license document</returns>
        </member>
        <member name="T:Lesnikowski.Licensing.LicenseHelper">
            <summary>
            Utility class for license related functions.
            </summary>
        </member>
        <member name="M:Lesnikowski.Licensing.LicenseHelper.UseMachineKeyStore(System.Boolean)">
            <summary>
            Sets a value indicating whether the key should be persisted in the computer's key store instead of the user profile store.
            </summary>
            <param name="value"><c>true</c> if the key should be persisted in the computer key store; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Lesnikowski.Licensing.LicenseHelper.GetLicensePath">
            <summary>
            Returns the file path used to load the license file.
            </summary>
            <returns>License file path.</returns>
        </member>
        <member name="M:Lesnikowski.Licensing.LicenseHelper.GetLicenseStatus">
            <summary>
            Gets the status of the license file.
            </summary>
            <returns>License file status.</returns>
        </member>
        <member name="T:Lesnikowski.Licensing.LicenseStatus">
            <summary>
            Status of the license validation.
            </summary>
            <seealso cref="M:Lesnikowski.Licensing.LicenseHelper.GetLicenseStatus"/>
        </member>
        <member name="F:Lesnikowski.Licensing.LicenseStatus.NoLicenseFile">
            <summary>
            There is no license file in appropriate folder. 
            Please check the value of <see cref="M:Lesnikowski.Licensing.LicenseHelper.GetLicensePath"/> method and place your license there.
            </summary>
        </member>
        <member name="F:Lesnikowski.Licensing.LicenseStatus.Invalid">
            <summary>
            License was loaded, but is invalid.
            </summary>
        </member>
        <member name="F:Lesnikowski.Licensing.LicenseStatus.InvalidSignature">
            <summary>
            License was loaded, but it has invalid signature.
            </summary>
        </member>
        <member name="F:Lesnikowski.Licensing.LicenseStatus.InvalidXml">
            <summary>
            License was loaded, but the XML is invalid.
            </summary>
        </member>
        <member name="F:Lesnikowski.Licensing.LicenseStatus.Exception">
            <summary>
            License was loaded, but an exception occured.
            </summary>
        </member>
        <member name="F:Lesnikowski.Licensing.LicenseStatus.Valid">
            <summary>
            License was loaded and is valid.
            </summary>
        </member>
        <member name="F:Lesnikowski.Licensing.LicenseStatus.Revoked">
            <summary>
            Valid license was loaded, but was revoked.
            </summary>
        </member>
        <member name="T:Lesnikowski.Licensing.SnkUtil">
            <summary>
            NOTE: These methods assume 1024 bit keys, the same as exported from sn.exe.
            </summary>
        </member>
        <member name="F:Lesnikowski.Licensing.SnkUtil._rsa1Header">
            <summary>
            RSA1 header (public only)
            </summary>
        </member>
        <member name="F:Lesnikowski.Licensing.SnkUtil._rsa2Header">
            <summary>
             RSA2 header
            </summary>
        </member>
        <member name="M:Lesnikowski.Licensing.SnkUtil.GetRSAFromSnkFile(System.String)">
            <summary>
            Returns RSA object from *.snk key file.
            </summary>
            <param name="path">Path to snk file.</param>
            <returns><c>RSACryptoServiceProvider</c></returns>
        </member>
        <member name="M:Lesnikowski.Licensing.SnkUtil.GetRSAParameters(System.Byte[])">
            <summary>
            Returns <c>RSAParameters</c> from byte[].
            Example to get rsa public key from assembly:
            <example>
            byte[] keyBytes=System.Reflection.Assembly.GetExecutingAssembly().GetName().GetPublicKey();
            RSAParameters p = SnkUtil.GetRSAParameters(keyBytes); 
            </example>
            </summary>
            <returns>RSAParameters</returns>
        </member>
        <member name="M:Lesnikowski.Licensing.SnkUtil.IsPublicLength(System.Byte[])">
            <summary>
            Returns true if buffer length is public key size.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Lesnikowski.Mail.Appointments.Alarm">
            <summary>
            Represents alarm calendar entity.
            </summary>
            <remarks>
            <code>
            BEGIN:VALARM
            ACTION:DISPLAY
            DESCRIPTION:REMINDER
            TRIGGER;RELATED=START:-PT15M
            END:VALARM
            </code>
            </remarks>
            <seealso cref="P:Lesnikowski.Mail.Appointments.Event.Alarms"/>
            <seealso cref="P:Lesnikowski.Mail.Appointments.Event.Alarm"/>
            <seealso cref="M:Lesnikowski.Mail.Appointments.Event.AddAlarm"/>
            <seealso cref="M:Lesnikowski.Mail.Appointments.Event.AddAlarm(Lesnikowski.Mail.Appointments.Alarm)"/>
        </member>
        <member name="T:Lesnikowski.Mail.Appointments.BaseCalendarEntity">
            <summary>
            Represents base calendar entity.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.BaseCalendarEntity.RenderFinal">
            <summary>
            Renders this entity as a string.
            </summary>
            <returns>Rendered string.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.BaseCalendarEntity.GetHeader(System.String)">
            <summary>
            Gets header with specified key from this calendar entity.
            </summary>
            <param name="key">Header's key.</param>
            <returns><see cref="T:Lesnikowski.Mail.Appointments.CalendarHeader"/> object for this key, or <see langword="null"/> if specified key was not found.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.BaseCalendarEntity.AddCustomHeader(Lesnikowski.Mail.Appointments.CalendarHeader)">
            <summary>
            Adds custom header to this entity.
            </summary>
            <param name="calendarHeader">Custom header to add.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Alarm.#ctor">
            <summary>
            Creates new event entity
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Alarm.ExactlyAt(System.DateTime)">
            <summary>
            Sets the alarm time to precise date and time.
            </summary>
            <param name="alarmTime">Date and time at which alarm should be raised .</param>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Alarm.BeforeStart(System.TimeSpan)">
            <summary>
            Sets the alarm time offset relative to start of the event.
            </summary>
            <param name="timeSpan">Time span before event start when alarm should be raised.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Alarm.BeforeEnd(System.TimeSpan)">
            <summary>
            Sets the alarm time offset relative to end of the event.
            </summary>
            <param name="timeSpan">Time span before event end when alarm should be raised.</param>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Alarm.AlarmTime">
            <summary>
            Gets exact alarm time.
            </summary>
            <seealso cref="M:Lesnikowski.Mail.Appointments.Alarm.ExactlyAt(System.DateTime)"/>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Alarm.RelativeTo">
            <summary>
            Gets relative to information of <see cref="P:Lesnikowski.Mail.Appointments.Alarm.AlarmOffset"/>.
            </summary>
            <seealso cref="M:Lesnikowski.Mail.Appointments.Alarm.BeforeStart(System.TimeSpan)"/>
            <seealso cref="M:Lesnikowski.Mail.Appointments.Alarm.BeforeEnd(System.TimeSpan)"/>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Alarm.AlarmOffset">
            <summary>
            Gets alarm offset. Offset is relative to <see cref="P:Lesnikowski.Mail.Appointments.Alarm.RelativeTo"/> property.
            </summary>
            <seealso cref="M:Lesnikowski.Mail.Appointments.Alarm.BeforeStart(System.TimeSpan)"/>
            <seealso cref="M:Lesnikowski.Mail.Appointments.Alarm.BeforeEnd(System.TimeSpan)"/>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Alarm.Action">
            <summary>
            Gets or sets alarm action (display, audio).
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Alarm.Description">
            <summary>
            Gets or sets alarm description.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Appointments.AlarmAction">
            <summary>
            Represents action that should be taken when alarm is raised.
            </summary>
            <seealso cref="P:Lesnikowski.Mail.Appointments.Alarm.Action"/>
        </member>
        <member name="F:Lesnikowski.Mail.Appointments.AlarmAction.Display">
            <summary>
            Alarm should be displayed.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Appointments.AlarmAction.Audio">
            <summary>
            Audio notification should be played.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.AlarmAction.Equals(Lesnikowski.Mail.Appointments.AlarmAction)">
            <summary>
            Determines whether specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object</param>
            <returns><see langword="true"/> if the specified object is equal to the current object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.AlarmAction.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.AlarmAction.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.AlarmAction.op_Equality(Lesnikowski.Mail.Appointments.AlarmAction,Lesnikowski.Mail.Appointments.AlarmAction)">
            <summary>
            Determines whether two objects are equal.
            </summary>
            <param name="left">First object to compare.</param>
            <param name="right">Second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.AlarmAction.op_Inequality(Lesnikowski.Mail.Appointments.AlarmAction,Lesnikowski.Mail.Appointments.AlarmAction)">
            <summary>
            Determines whether two objects are not equal.
            </summary>
            <param name="left">First object to compare.</param>
            <param name="right">Second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are not equal; otherwise, <see langword="true"/>.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.AlarmAction.ToString">
            <summary>
            Returns <see cref="P:Lesnikowski.Mail.Appointments.AlarmAction.Name"/> of this object.
            </summary>
            <returns><see cref="P:Lesnikowski.Mail.Appointments.AlarmAction.Name"/> of this object.</returns>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.AlarmAction.Name">
            <summary>
            Display name of the object.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Appointments.Appointment">
            <summary>
            Represents appointment calendar entity. 
            You can add appointment to email using <see cref="M:Lesnikowski.Mail.MailBuilder.AddAppointment(Lesnikowski.Mail.Appointments.Appointment)"/> or <see cref="M:Lesnikowski.Mail.Fluent.IFluentMail.AddAppointment(Lesnikowski.Mail.Appointments.Appointment)"/>.
            </summary>
            <remarks>
            <code>
            BEGIN:VCALENDAR
            METHOD:REQUEST
            PRODID:Microsoft Exchange Server 2007
            VERSION:2.0
            BEGIN:VEVENT
            ORGANIZER;CN="Alice":MAILTO:alice@mail.com
            ATTENDEE;ROLE=REQ-PARTICIPANT;PARTSTAT=NEEDS-ACTION;RSVP=TRUE;CN='Bob':MAILTO:bob@mail.com
            SUMMARY;LANGUAGE=en-US:First Meeting
            DTSTART:20100315T080000
            DTEND:20100315T083000
            UID:040000008200E00074
            CLASS:PUBLIC
            DTSTAMP:20100317T141328Z
            STATUS:CONFIRMED
            LOCATION;LANGUAGE=en-US:Room 42
            BEGIN:VALARM
            ACTION:DISPLAY
            DESCRIPTION:REMINDER
            TRIGGER;RELATED=START:-PT15M
            END:VALARM
            END:VEVENT
            END:VCALENDAR
            </code>
            </remarks>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Appointment.#ctor">
            <summary>
            Creates new event entity
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Appointment.AddEvent">
            <summary>
            Adds new event to the <see cref="P:Lesnikowski.Mail.Appointments.Appointment.Events"/> collection.
            </summary>
            <returns>Event that was added.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Appointment.AddEvent(Lesnikowski.Mail.Appointments.Event)">
            <summary>
            Adds event to the <see cref="P:Lesnikowski.Mail.Appointments.Appointment.Events"/> collection.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Appointment.Cancel">
            <summary>
            Creates canceled version of this appointment.
            </summary>
            <returns>New appointment with all events canceled.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Appointment.Update">
            <summary>
            Creates new, updated version of this appointment.
            </summary>
            <returns>New appointment.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Appointment.Decline(System.String)">
            <summary>
            Creates new appointment with <see cref="P:Lesnikowski.Mail.Appointments.Participant.Status"/> set to <see cref="F:Lesnikowski.Mail.Appointments.ParticipationStatus.Declined"/> for users with specified email. 
            </summary>
            <param name="email">Email of user that declined the event.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Appointment.Accept(System.String)">
            <summary>
            Creates new appointment with <see cref="P:Lesnikowski.Mail.Appointments.Participant.Status"/> set to <see cref="F:Lesnikowski.Mail.Appointments.ParticipationStatus.Accepted"/> for users with specified email. 
            </summary>
            <param name="email">Email of user that accepted the event.</param>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Appointment.Method">
            <summary>
            Gets or sets iCalendar object method associated with the calendar object (request, cancel).
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Appointment.ProductId">
            <summary>
            Gets or sets the identifier for the product that created the iCalendar object.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Appointment.Version">
            <summary>
            Gets or sets version that is required in order to interpret the iCalendar object.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Appointment.Events">
            <summary>
            List of events in this appointment.
            </summary>
            <seealso cref="M:Lesnikowski.Mail.Appointments.Appointment.AddEvent"/>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Appointment.Event">
            <summary>
            Gets first event from the <see cref="P:Lesnikowski.Mail.Appointments.Appointment.Events"/> list or <see langword="null"/> if there are no events.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Appointments.CalendarHeader">
            <summary>
            Represents single calendar header.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.CalendarHeader.#ctor(System.String)">
            <summary>
            Creates new CalendarHeader object with specified <see cref="P:Lesnikowski.Mail.Appointments.CalendarHeader.Key"/>.
            </summary>
            <param name="key">Header's key.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.CalendarHeader.#ctor(System.String,System.String)">
            <summary>
            Creates new CalendarHeader object with specified <see cref="P:Lesnikowski.Mail.Appointments.CalendarHeader.Key"/> and <see cref="P:Lesnikowski.Mail.Appointments.CalendarHeader.Value"/>.
            </summary>
            <param name="key">Header's key.</param>
            <param name="value">Header's value.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.CalendarHeader.Parse(System.String)">
            <summary>
            Parses the specified string.
            </summary>
            <param name="header">New header.</param>
            <returns>String to parse.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.CalendarHeader.Render">
            <summary>
            Renders this header.
            </summary>
            <returns>Header rendered to string.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.CalendarHeader.GetParameter(System.String)">
            <summary>
            Returns the value of the specified header parameter or <see langword="null"/> when parameter does not exist.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>Value of the parameter or <see langword="null"/> when parameter does not exist.</returns>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.CalendarHeader.Key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.CalendarHeader.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.CalendarHeader.Parameters">
            <summary>
            Header parameters. You can use <see cref="M:Lesnikowski.Mail.Appointments.CalendarHeader.GetParameter(System.String)"/> method that returns <see langword="null"/> when parameter does not exist.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.CalendarHeader.IsEmpty">
            <summary>
            Gets information if value is <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.CalendarHeader.RawLine">
            <summary>
            Raw line that this object was parsed from.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Appointments.EventStatus">
            <summary>
            Represents event status.
            </summary>
            <seealso cref="P:Lesnikowski.Mail.Appointments.Event.Status"/>
        </member>
        <member name="F:Lesnikowski.Mail.Appointments.EventStatus.Tentative">
            <summary>
            Indicates event is tentative.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Appointments.EventStatus.Confirmed">
            <summary>
            Indicates event is definite.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Appointments.EventStatus.Canceled">
            <summary>
            Indicates event is canceled.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.EventStatus.Equals(Lesnikowski.Mail.Appointments.EventStatus)">
            <summary>
            Determines whether specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object</param>
            <returns><see langword="true"/> if the specified object is equal to the current object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.EventStatus.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.EventStatus.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.EventStatus.op_Equality(Lesnikowski.Mail.Appointments.EventStatus,Lesnikowski.Mail.Appointments.EventStatus)">
            <summary>
            Determines whether two objects are equal.
            </summary>
            <param name="left">First object to compare.</param>
            <param name="right">Second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.EventStatus.op_Inequality(Lesnikowski.Mail.Appointments.EventStatus,Lesnikowski.Mail.Appointments.EventStatus)">
            <summary>
            Determines whether two objects are not equal.
            </summary>
            <param name="left">First object to compare.</param>
            <param name="right">Second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are not equal; otherwise, <see langword="true"/>.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.EventStatus.ToString">
            <summary>
            Returns <see cref="P:Lesnikowski.Mail.Appointments.EventStatus.Name"/> of this object.
            </summary>
            <returns><see cref="P:Lesnikowski.Mail.Appointments.EventStatus.Name"/> of this object.</returns>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.EventStatus.Name">
            <summary>
            Display name of the object.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Appointments.Event">
            <summary>
            Represents event calendar entity.
            </summary>
            <remarks>
            <code>
            BEGIN:VEVENT
            ORGANIZER;CN="Alice":MAILTO:alice@mail.com
            ATTENDEE;ROLE=REQ-PARTICIPANT;PARTSTAT=NEEDS-ACTION;RSVP=TRUE;CN='Bob':MAILTO:bob@mail.com
            SUMMARY;LANGUAGE=en-US:First Meeting
            DTSTART:20100315T080000
            DTEND:20100315T083000
            UID:040000008200E00074
            CLASS:PUBLIC
            DTSTAMP:20100317T141328Z
            STATUS:CONFIRMED
            LOCATION;LANGUAGE=en-US:Room 42
            BEGIN:VALARM
            ACTION:DISPLAY
            DESCRIPTION:REMINDER
            TRIGGER;RELATED=START:-PT15M
            END:VALARM
            END:VEVENT
            </code>
            </remarks>
            <seealso cref="P:Lesnikowski.Mail.Appointments.Appointment.Events"/>
            <seealso cref="P:Lesnikowski.Mail.Appointments.Appointment.Event"/>
            <seealso cref="M:Lesnikowski.Mail.Appointments.Appointment.AddEvent"/>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Event.#ctor">
            <summary>
            Creates new event entity
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Event.AddAlarm">
            <summary>
            Adds new alarm to the <see cref="P:Lesnikowski.Mail.Appointments.Event.Alarms"/> collection of this event.
            </summary>
            <returns>Alarm that was added.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Event.AddAlarm(Lesnikowski.Mail.Appointments.Alarm)">
            <summary>
            Adds alarm to the <see cref="P:Lesnikowski.Mail.Appointments.Event.Alarms"/> collection of this event.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Event.SetOrganizer(Lesnikowski.Mail.Appointments.Person)">
            <summary>
            Sets organizer for this event.
            </summary>
            <param name="person"></param>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Event.AddParticipant(Lesnikowski.Mail.Appointments.Participant)">
            <summary>
            Adds new participant to this event.
            </summary>
            <param name="participant">Participant added to this event.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Event.AllDay">
            <summary>
            Marks the event as an all day event. 
            Time in <see cref="P:Lesnikowski.Mail.Appointments.Event.Start"/> and <see cref="P:Lesnikowski.Mail.Appointments.Event.End"/> properties will be ignored if this method is used.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Event.Cancel">
            <summary>
            Creates canceled version of this event.
            </summary>
            <returns>New canceled event.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Event.Update">
            <summary>
            Creates new, updated version of this event.
            </summary>
            <returns>New event.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Event.Accept(System.String)">
            <summary>
            Sets <see cref="P:Lesnikowski.Mail.Appointments.Participant.Status"/> to <see cref="F:Lesnikowski.Mail.Appointments.ParticipationStatus.Accepted"/> for users with specified email. 
            </summary>
            <param name="email">Email of user that accepted the event.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Event.Decline(System.String)">
            <summary>
            Sets <see cref="P:Lesnikowski.Mail.Appointments.Participant.Status"/> to <see cref="F:Lesnikowski.Mail.Appointments.ParticipationStatus.Declined"/> for users with specified email. 
            </summary>
            <param name="email">Email of user that declined the event.</param>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Event.UID">
            <summary>
            Gets or sets the unique id of this event.
            For sending an UPDATE for an event the UID should match the original UID.
            Also <see cref="P:Lesnikowski.Mail.Appointments.Event.Sequence"/> should be set.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Event.Class">
            <summary>
            Gets or sets class of this event (public, private, confidential).
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Event.Status">
            <summary>
            Gets or sets status of this event (tentative, confirmed, canceled).
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Event.Stamp">
            <summary>
            Gets or sets time stamp of this event.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Event.Start">
            <summary>
            Gets or sets start time of this event.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Event.End">
            <summary>
            Gets or sets end time of this event.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Event.Priority">
            <summary>
            Gets or sets priority of this event.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Event.Sequence">
            <summary>
            Gets or sets sequence of this event.
            You should increment this number for each event update. First update should have sequence set to 1.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Event.Summary">
            <summary>
            Gets or sets summery of this event.
            In Microsoft Outlook, the SUMMARY corresponds to the "Subject" entry in the "Appointment" form.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Event.Description">
            <summary>
            Gets or sets description of this event.
            In Microsoft Outlook, the DESCRIPTION corresponds to the descriptive text below "Appointment" form.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Event.Location">
            <summary>
            Gets or sets location of this event.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Event.Organizer">
            <summary>
            Gets or sets the organizer of this event. Use <see cref="M:Lesnikowski.Mail.Appointments.Event.SetOrganizer(Lesnikowski.Mail.Appointments.Person)"/> method to set organizer.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Event.Alarms">
            <summary>
            List of alarms for this event.
            </summary>
            <seealso cref="M:Lesnikowski.Mail.Appointments.Event.AddAlarm"/>
            <seealso cref="M:Lesnikowski.Mail.Appointments.Event.AddAlarm(Lesnikowski.Mail.Appointments.Alarm)"/>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Event.Participants">
            <summary>
            Gets all participants of this event. Use <see cref="M:Lesnikowski.Mail.Appointments.Event.AddParticipant(Lesnikowski.Mail.Appointments.Participant)"/> method to add new participant to this collection.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Event.Alarm">
            <summary>
            Gets first alarm from the <see cref="P:Lesnikowski.Mail.Appointments.Event.Alarms"/> list or <see langword="null"/> if there are no alarms for this event.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Appointments.EventClass">
            <summary>
            Represents class of the event.
            </summary>
            <seealso cref="P:Lesnikowski.Mail.Appointments.Event.Class"/>
        </member>
        <member name="F:Lesnikowski.Mail.Appointments.EventClass.Public">
            <summary>
            Event is public.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Appointments.EventClass.Private">
            <summary>
            Event is private.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Appointments.EventClass.Confidential">
            <summary>
            Event is confidential.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.EventClass.Equals(Lesnikowski.Mail.Appointments.EventClass)">
            <summary>
            Determines whether specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object</param>
            <returns><see langword="true"/> if the specified object is equal to the current object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.EventClass.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.EventClass.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.EventClass.op_Equality(Lesnikowski.Mail.Appointments.EventClass,Lesnikowski.Mail.Appointments.EventClass)">
            <summary>
            Determines whether two objects are equal.
            </summary>
            <param name="left">First object to compare.</param>
            <param name="right">Second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.EventClass.op_Inequality(Lesnikowski.Mail.Appointments.EventClass,Lesnikowski.Mail.Appointments.EventClass)">
            <summary>
            Determines whether two objects are not equal.
            </summary>
            <param name="left">First object to compare.</param>
            <param name="right">Second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are not equal; otherwise, <see langword="true"/>.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.EventClass.ToString">
            <summary>
            Returns <see cref="P:Lesnikowski.Mail.Appointments.EventClass.Name"/> of this object.
            </summary>
            <returns><see cref="P:Lesnikowski.Mail.Appointments.EventClass.Name"/> of this object.</returns>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.EventClass.Name">
            <summary>
            Display name of the object.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Appointments.Method">
            <summary>
            Represents method of the appointment.
            </summary>
            <seealso cref="P:Lesnikowski.Mail.Appointments.Appointment.Method"/>
        </member>
        <member name="F:Lesnikowski.Mail.Appointments.Method.Request">
            <summary>
            Request.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Appointments.Method.Reply">
            <summary>
            Reply.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Appointments.Method.Cancel">
            <summary>
            Cancel.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Method.Equals(Lesnikowski.Mail.Appointments.Method)">
            <summary>
            Determines whether specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object</param>
            <returns><see langword="true"/> if the specified object is equal to the current object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Method.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Method.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Method.op_Equality(Lesnikowski.Mail.Appointments.Method,Lesnikowski.Mail.Appointments.Method)">
            <summary>
            Determines whether two objects are equal.
            </summary>
            <param name="left">First object to compare.</param>
            <param name="right">Second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Method.op_Inequality(Lesnikowski.Mail.Appointments.Method,Lesnikowski.Mail.Appointments.Method)">
            <summary>
            Determines whether two objects are not equal.
            </summary>
            <param name="left">First object to compare.</param>
            <param name="right">Second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are not equal; otherwise, <see langword="true"/>.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Method.ToString">
            <summary>
            Returns <see cref="P:Lesnikowski.Mail.Appointments.Method.Name"/> of this object.
            </summary>
            <returns><see cref="P:Lesnikowski.Mail.Appointments.Method.Name"/> of this object.</returns>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Method.Name">
            <summary>
            Display name of the object.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Appointments.Participant">
            <summary>
            Represents event participant.
            </summary>
            <seealso cref="P:Lesnikowski.Mail.Appointments.Event.Participants"/>
            <seealso cref="M:Lesnikowski.Mail.Appointments.Event.AddParticipant(Lesnikowski.Mail.Appointments.Participant)"/>
        </member>
        <member name="T:Lesnikowski.Mail.Appointments.Person">
            <summary>
            Represents a person.
            </summary>
            <seealso cref="T:Lesnikowski.Mail.Appointments.Participant"/>
            <seealso cref="P:Lesnikowski.Mail.Appointments.Event.Organizer"/>
            <seealso cref="M:Lesnikowski.Mail.Appointments.Event.SetOrganizer(Lesnikowski.Mail.Appointments.Person)"/>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Person.#ctor(System.String,System.String)">
            <summary>
            Creates new Person object with specified common name and email.
            </summary>
            <param name="cn">Common name of the person.</param>
            <param name="email">Email of the person.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Person.Render(Lesnikowski.Mail.Appointments.CalendarHeader)">
            <summary>
            Renders this person on specified calendar header.
            </summary>
            <param name="header">Header to render on.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Person.Parse(Lesnikowski.Mail.Appointments.CalendarHeader)">
            <summary>
            Extracts person information from specified header.
            </summary>
            <param name="header">Header to extract information from.</param>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Person.Cn">
            <summary>
            Get or sets the common name of the person.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Person.Email">
            <summary>
            Get or sets email of the person.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Participant.#ctor(System.String,System.String)">
            <summary>
            Creates new participant with specified common name and email.
            </summary>
            <param name="cn">Common name of the person.</param>
            <param name="email">Email of the person.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Participant.#ctor(System.String,System.String,Lesnikowski.Mail.Appointments.ParticipationRole,System.Boolean)">
            <summary>
            Creates new participant with specified common name and email.
            </summary>
            <param name="cn">Common name of the person.</param>
            <param name="email">Email of the person.</param>
            <param name="role">Participation role.</param>
            <param name="responseRequired">Specifies whether participant is required.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Participant.Render(Lesnikowski.Mail.Appointments.CalendarHeader)">
            <summary>
            Renders this participant on specified calendar header.
            </summary>
            <param name="header">Header to render on.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.Participant.Parse(Lesnikowski.Mail.Appointments.CalendarHeader)">
            <summary>
            Extracts participant information from specified header.
            </summary>
            <param name="header">Header to extract information from.</param>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Participant.Role">
            <summary>
            Gets or sets participation role.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Participant.ResponseRequired">
            <summary>
            Gets or sets information whether participant is required.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.Participant.Status">
            <summary>
            Gets or sets participation status.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Appointments.ParticipationRole">
            <summary>
            Represents user participation role.
            </summary>
            <seealso cref="P:Lesnikowski.Mail.Appointments.Participant.Role"/>
        </member>
        <member name="F:Lesnikowski.Mail.Appointments.ParticipationRole.Chair">
            <summary>
            Chair
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Appointments.ParticipationRole.Required">
            <summary>
            Participant is required.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Appointments.ParticipationRole.Optional">
            <summary>
            Participant is optional.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Appointments.ParticipationRole.NonParticipant">
            <summary>
            Not participant.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.ParticipationRole.Equals(Lesnikowski.Mail.Appointments.ParticipationRole)">
            <summary>
            Determines whether specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object</param>
            <returns><see langword="true"/> if the specified object is equal to the current object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.ParticipationRole.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.ParticipationRole.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.ParticipationRole.op_Equality(Lesnikowski.Mail.Appointments.ParticipationRole,Lesnikowski.Mail.Appointments.ParticipationRole)">
            <summary>
            Determines whether two objects are equal.
            </summary>
            <param name="left">First object to compare.</param>
            <param name="right">Second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.ParticipationRole.op_Inequality(Lesnikowski.Mail.Appointments.ParticipationRole,Lesnikowski.Mail.Appointments.ParticipationRole)">
            <summary>
            Determines whether two objects are not equal.
            </summary>
            <param name="left">First object to compare.</param>
            <param name="right">Second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are not equal; otherwise, <see langword="true"/>.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.ParticipationRole.ToString">
            <summary>
            Returns <see cref="P:Lesnikowski.Mail.Appointments.ParticipationRole.Name"/> of this object.
            </summary>
            <returns><see cref="P:Lesnikowski.Mail.Appointments.ParticipationRole.Name"/> of this object.</returns>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.ParticipationRole.Name">
            <summary>
            Display name of the object.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Appointments.ParticipationStatus">
            <summary>
            Represents user participation status.
            </summary>
            <seealso cref="P:Lesnikowski.Mail.Appointments.Participant.Status"/>
        </member>
        <member name="F:Lesnikowski.Mail.Appointments.ParticipationStatus.NeedsAction">
            <summary>
            Needs action.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Appointments.ParticipationStatus.Accepted">
            <summary>
            Accepted.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Appointments.ParticipationStatus.Declined">
            <summary>
            Declined.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Appointments.ParticipationStatus.Tentative">
            <summary>
            Tentatively accepted.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Appointments.ParticipationStatus.Delegated">
            <summary>
            Delegated.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Appointments.ParticipationStatus.Completed">
            <summary>
            Completed.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Appointments.ParticipationStatus.InProcess">
            <summary>
            In progress.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.ParticipationStatus.Equals(Lesnikowski.Mail.Appointments.ParticipationStatus)">
            <summary>
            Determines whether specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object</param>
            <returns><see langword="true"/> if the specified object is equal to the current object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.ParticipationStatus.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.ParticipationStatus.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.ParticipationStatus.op_Equality(Lesnikowski.Mail.Appointments.ParticipationStatus,Lesnikowski.Mail.Appointments.ParticipationStatus)">
            <summary>
            Determines whether two objects are equal.
            </summary>
            <param name="left">First object to compare.</param>
            <param name="right">Second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.ParticipationStatus.op_Inequality(Lesnikowski.Mail.Appointments.ParticipationStatus,Lesnikowski.Mail.Appointments.ParticipationStatus)">
            <summary>
            Determines whether two objects are not equal.
            </summary>
            <param name="left">First object to compare.</param>
            <param name="right">Second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are not equal; otherwise, <see langword="true"/>.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.ParticipationStatus.ToString">
            <summary>
            Returns <see cref="P:Lesnikowski.Mail.Appointments.ParticipationStatus.Name"/> of this object.
            </summary>
            <returns><see cref="P:Lesnikowski.Mail.Appointments.ParticipationStatus.Name"/> of this object.</returns>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.ParticipationStatus.Name">
            <summary>
            Display name of the object.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Appointments.RelativeTo">
            <summary>
            Represents information about <see cref="P:Lesnikowski.Mail.Appointments.Alarm.AlarmOffset"/> relation.
            </summary>
            <seealso cref="P:Lesnikowski.Mail.Appointments.Alarm.RelativeTo"/>
        </member>
        <member name="F:Lesnikowski.Mail.Appointments.RelativeTo.Start">
            <summary>
             Alarm is related to the <see cref="T:Lesnikowski.Mail.Appointments.Event"/>'s <see cref="F:Lesnikowski.Mail.Appointments.RelativeTo.Start"/> time.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Appointments.RelativeTo.End">
            <summary>
             Alarm is related to the <see cref="T:Lesnikowski.Mail.Appointments.Event"/>'s <see cref="F:Lesnikowski.Mail.Appointments.RelativeTo.End"/> time.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.RelativeTo.Equals(Lesnikowski.Mail.Appointments.RelativeTo)">
            <summary>
            Determines whether specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object</param>
            <returns><see langword="true"/> if the specified object is equal to the current object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.RelativeTo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. 
            </param>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.RelativeTo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.RelativeTo.op_Equality(Lesnikowski.Mail.Appointments.RelativeTo,Lesnikowski.Mail.Appointments.RelativeTo)">
            <summary>
            Determines whether two objects are equal.
            </summary>
            <param name="left">First object to compare.</param>
            <param name="right">Second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.RelativeTo.op_Inequality(Lesnikowski.Mail.Appointments.RelativeTo,Lesnikowski.Mail.Appointments.RelativeTo)">
            <summary>
            Determines whether two objects are not equal.
            </summary>
            <param name="left">First object to compare.</param>
            <param name="right">Second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are not equal; otherwise, <see langword="true"/>.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Appointments.RelativeTo.ToString">
            <summary>
            Returns <see cref="P:Lesnikowski.Mail.Appointments.RelativeTo.Name"/> of this object.
            </summary>
            <returns><see cref="P:Lesnikowski.Mail.Appointments.RelativeTo.Name"/> of this object.</returns>
        </member>
        <member name="P:Lesnikowski.Mail.Appointments.RelativeTo.Name">
            <summary>
            Display name of the object.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.DKIM.CanonicalizationType">
            <summary>
            Represents DKIM canonicalization.
            You can use it to specify <see cref="P:Lesnikowski.Mail.DKIM.DKIMSignatureInfo.BodyCanonicalization"/> or <seealso cref="P:Lesnikowski.Mail.DKIM.DKIMSignatureInfo.HeaderCanonicalization"/>.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.DKIM.CanonicalizationType.Simple">
            <summary>
            Simple canonicalization (almost no changes to the headers or body are allowed).
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.DKIM.CanonicalizationType.Relaxed">
            <summary>
            Relaxed canonicalization (minor changes, like additional spaces, are allowed).
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.DKIM.DKIMHashAlgorithm">
            <summary>
            Represents DKIM hash algorithm.
            </summary> 
            <seealso cref="P:Lesnikowski.Mail.DKIM.DKIMSignatureInfo.HashAlgorithmName"/>
        </member>
        <member name="F:Lesnikowski.Mail.DKIM.DKIMHashAlgorithm.SHA1">
            <summary>
            RSA-SHA1 hash algorithm.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.DKIM.DKIMHashAlgorithm.SHA256">
            <summary>
            RSA-SHA256 hash algorithm.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.DKIM.DKIMHashAlgorithm.Equals(Lesnikowski.Mail.DKIM.DKIMHashAlgorithm)">
            <summary>
            Determines whether specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object</param>
            <returns><see langword="true"/> if the specified object is equal to the current object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.DKIM.DKIMHashAlgorithm.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
        </member>
        <member name="M:Lesnikowski.Mail.DKIM.DKIMHashAlgorithm.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Lesnikowski.Mail.DKIM.DKIMSignatureInfo">
            <summary>
            Represents DKIM signature information. (E.g. Canonicalization used, hash algorithm)
            </summary>
            <seealso cref="P:Lesnikowski.Mail.MimeDocument.DKIMSignatureInfo"/>
            <seealso cref="M:Lesnikowski.Mail.MailMessage.DKIMSign(System.Security.Cryptography.RSACryptoServiceProvider,Lesnikowski.Mail.DKIM.DKIMSignatureInfo)"/>
            <seealso cref="M:Lesnikowski.Mail.Fluent.IFluentMail.DKIMSign(System.Security.Cryptography.RSACryptoServiceProvider,Lesnikowski.Mail.DKIM.DKIMSignatureInfo)"/>
        </member>
        <member name="M:Lesnikowski.Mail.DKIM.DKIMSignatureInfo.GetSignature">
            <summary>
            b=
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.DKIM.DKIMSignatureInfo.SetSignature(System.Byte[])">
            <summary>
            b=
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.DKIM.DKIMSignatureInfo.#ctor">
            <summary>
            Creates new instance of DKIMSignatureInfo.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.DKIM.DKIMSignatureInfo.Selector">
            <summary>
            Gets or sets public key DNS selector (s=).
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.DKIM.DKIMSignatureInfo.Domain">
            <summary>
            Gets or sets public key DNS domain (d=).
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.DKIM.DKIMSignatureInfo.HeaderList">
            <summary>
            Gets or sets list of headers that are included in the signature (h=).
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.DKIM.DKIMSignatureInfo.HashAlgorithmName">
            <summary>
            Gets or sets hash alghoritm (a=).
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.DKIM.DKIMSignatureInfo.HeaderCanonicalization">
            <summary>
            Gets or sets header canonicalization (c=).
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.DKIM.DKIMSignatureInfo.BodyCanonicalization">
            <summary>
            Gets or sets body canonicalization (c=).
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.DKIM.DKIMSignatureInfo.Length">
            <summary>
            Gets or sets the number of body characters that are included in the signature (l=).
            Null means that hash is computed for entire body.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.DKIM.DKIMSignatureInfo.BodyHash">
            <summary>
            bh=
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.DKIM.DKIMSignatureInfo.SignatureTag">
            <summary>
            b=
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.DKIM.DnsDomainKeyResponse.Notes">
            <summary>
            n=
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.DKIM.DnsDomainKeyResponse.PublicKey">
            <summary>
            p=
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.DKIM.DnsDomainKeyResponse.Version">
            <summary>
            v=
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.DKIM.DnsDomainKeyResponse.Granularity">
            <summary>
            g=
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.DKIM.DnsDomainKeyResponse.HashAlgorithm">
            <summary>
            h=
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.DKIM.DnsDomainKeyResponse.ServiceType">
            <summary>
            s=
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.DKIM.DnsDomainKeyResponse.Flags">
            <summary>
            t=
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.DKIM.DnsDomainKeyResponse.KeyType">
            <summary>
            k=
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.MimeDocumentFactory">
            <summary>
            Factory class for <see cref="T:Lesnikowski.Mail.MimeDocument"/> class.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.MimeDocumentFactory.CreateMimeDocument(System.String)">
            <summary>
            Creates new <see cref="T:Lesnikowski.Mail.MimeDocument"/> form specified string.
            </summary>
            <param name="documentString">String containing a document.</param>
            <returns>New mime document.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.MimeDocumentFactory.CreateMimeDocument(Lesnikowski.Mail.MimeBase)">
            <summary>
            Creates <see cref="T:Lesnikowski.Mail.MimeDocument"/> with specified mime object as root.
            Sets MimeVersion to 1.0
            </summary>
            <param name="root">Root of the <see cref="T:Lesnikowski.Mail.MimeDocument"/>.</param>
            <returns>New mime document.</returns>
        </member>
        <member name="T:Lesnikowski.Mail.MimeFactory">
            <summary>
            Factory class for all mime classes.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.MimeFactory.CreateMimeText">
            <summary>
            Creates new empty <see cref="T:Lesnikowski.Mail.MimeText"/> object with UTF8 encoding, and <see cref="P:Lesnikowski.Mail.MimeBase.ContentType"/> set to <see cref="F:Lesnikowski.Mail.Headers.ContentType.TextPlain"/>.
            </summary>
            <returns>New <see cref="T:Lesnikowski.Mail.MimeText"/> object.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.MimeFactory.CreateMimeCalendar">
            <summary>
            Creates new empty <see cref="T:Lesnikowski.Mail.MimeCalendar"/> object.
            </summary>
            <returns>Empty <see cref="T:Lesnikowski.Mail.MimeCalendar"/> object.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.MimeFactory.CreateMimeData">
            <summary>
            Creates new empty <see cref="T:Lesnikowski.Mail.MimeData"/> object with <see cref="P:Lesnikowski.Mail.MimeBase.ContentType"/> set to <see cref="F:Lesnikowski.Mail.Headers.ContentType.ApplicationOctetStream"/>.
            </summary>
            <returns>New <see cref="T:Lesnikowski.Mail.MimeData"/> object.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.MimeFactory.CreateMimeMixed(Lesnikowski.Mail.MimeBase)">
            <summary>
            Creates new empty <see cref="T:Lesnikowski.Mail.MimeMultipart"/> object with <see cref="P:Lesnikowski.Mail.MimeBase.ContentType"/> set to <see cref="F:Lesnikowski.Mail.Headers.ContentType.MultipartMixed"/>.
            </summary>
            <returns>New MimeMixed object.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.MimeFactory.CreateMimeRelated(Lesnikowski.Mail.MimeBase)">
            <summary>
            Creates new empty <see cref="T:Lesnikowski.Mail.MimeRelated"/> object with <see cref="P:Lesnikowski.Mail.MimeBase.ContentType"/> set to <see cref="F:Lesnikowski.Mail.Headers.ContentType.MultipartRelated"/>.
            </summary>
            <returns>New <see cref="T:Lesnikowski.Mail.MimeRelated"/> object.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.MimeFactory.CreateMimeAlternative">
            <summary>
            Creates new empty <see cref="T:Lesnikowski.Mail.MimeAlternative"/> object with <see cref="P:Lesnikowski.Mail.MimeBase.ContentType"/> set to <see cref="F:Lesnikowski.Mail.Headers.ContentType.MultipartAlternative"/>.
            </summary>
            <returns>New <see cref="T:Lesnikowski.Mail.MimeAlternative"/> object.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.MimeFactory.CreateMimeReport">
            <summary>
            Creates new empty <see cref="T:Lesnikowski.Mail.MimeReport"/> object with <see cref="P:Lesnikowski.Mail.MimeBase.ContentType"/> set to <see cref="F:Lesnikowski.Mail.Headers.ContentType.MultipartReport"/>.
            </summary>
            <returns>New <see cref="T:Lesnikowski.Mail.MimeReport"/> object.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.MimeFactory.CreateMimeSigned(Lesnikowski.Mail.MimeBase,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Creates new empty <see cref="T:Lesnikowski.Mail.MimeSigned"/> object with <see cref="P:Lesnikowski.Mail.MimeBase.ContentType"/> set to <see cref="F:Lesnikowski.Mail.Headers.ContentType.MultipartSigned"/>.
            </summary>
            <returns>New <see cref="T:Lesnikowski.Mail.MimeSigned"/> object.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.MimeFactory.CreatePkcs7Signature(System.Byte[])">
            <summary>
            Creates new <see cref="T:Lesnikowski.Mail.MimeData"/> object representing pkcs7 signature.
            </summary>
            <param name="pkcs7SignatureData">Signature data.</param>
            <returns>New <see cref="T:Lesnikowski.Mail.MimePkcs7Signature"/> object.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.MimeFactory.CreateMimeRfc822">
            <summary>
            Creates new <see cref="T:Lesnikowski.Mail.MimeText"/> object representing RFC822 message with <see cref="P:Lesnikowski.Mail.MimeBase.ContentType"/> set to <see cref="F:Lesnikowski.Mail.Headers.ContentType.MessageRfc822"/>. 
            </summary>
            <returns>New <see cref="T:Lesnikowski.Mail.MimeText"/> object.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.MimeFactory.CreateMimeRfc822(Lesnikowski.Mail.IMail)">
            <summary>
            Creates new <see cref="T:Lesnikowski.Mail.MimeText"/> object representing RFC822 message with <see cref="P:Lesnikowski.Mail.MimeBase.ContentType"/> set to <see cref="F:Lesnikowski.Mail.Headers.ContentType.MessageRfc822"/>. 
            </summary>
            <param name="email">Content email.</param>
            <returns>New <see cref="T:Lesnikowski.Mail.MimeText"/> object.</returns>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.Constants.MimeSensitivity">
            <summary>
            Sensitivity of email message.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSensitivity.Personal">
            <summary>
            Message is personal.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSensitivity.Private">
            <summary>
            Message is private.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSensitivity.CompanyConfidential">
            <summary>
            Message is company confidential.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.IContentTypeHeader">
            <summary>
            Represents 'Content-type' header.
            You can use this class to add additional options to content-type header
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.IContentTypeHeader.Value">
            <summary>
            Content type value.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.IContentTypeHeader.Item(System.String)">
            <summary>
            Gets or sets additional options in this header.
            </summary>
            <param name="optionsKey">Options key.</param>
            <returns>Options value.</returns>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.IReceivedHeader">
            <summary>
            Representes "received" headers collection extracted from the email message.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.IReceivedHeader.Clear">
            <summary>
             Removes all reecived entries from this collection.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.IReceivedHeader.Add(Lesnikowski.Mail.Headers.ReceivedEntry)">
            <summary>
            Adds new received entry to the collection.
            </summary>
            <param name="entry">Received entry to add.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.IReceivedHeader.Add(System.String)">
            <summary>
            Adds new received entry to the collection.
            </summary>
            <param name="entry">Received entry to add.</param>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.IReceivedHeader.Entries">
            <summary>
            Gets all received entries extracted from the email message.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.ReceivedEntry">
            <summary>
            Represents single 'received' header of the email.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.ReceivedEntry.From">
            <summary>
            From part.
            </summary>
            
        </member>
        <member name="P:Lesnikowski.Mail.Headers.ReceivedEntry.By">
            <summary>
             By part.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.ReceivedEntry.Via">
            <summary>
             Via part.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.ReceivedEntry.With">
            <summary>
             With part.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.ReceivedEntry.Id">
            <summary>
             Id part.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.ReceivedEntry.For">
            <summary>
             For part.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.ReceivedEntry.Date">
            <summary>
             Date part.
            </summary>
        </member>
        <member name="F:Lesnikowski.LicensingHelpers.PleasePurchaseForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Lesnikowski.LicensingHelpers.PleasePurchaseForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Lesnikowski.LicensingHelpers.PleasePurchaseForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.IMAP.Flag">
            <summary>
            Represents flag object used by IMAP protocol.
            Static fields represent most common, system flags.
            You can use <see cref="M:Lesnikowski.Client.IMAP.Imap.FlagMessage(System.Int64,Lesnikowski.Client.IMAP.Flag)"/> and <see cref="M:Lesnikowski.Client.IMAP.Imap.UnflagMessage(System.Int64,Lesnikowski.Client.IMAP.Flag)"/> to set or remove a flag.
            </summary>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.FlagMessageByUID(System.Int64,Lesnikowski.Client.IMAP.Flag)"/>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.UnflagMessageByUID(System.Int64,Lesnikowski.Client.IMAP.Flag)"/>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageSeen(System.Int64)"/>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageUnseen(System.Int64)"/>    
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageSeenByUID(System.Int64)"/>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Int64)"/>   
            <remarks>
            Exchange 2007 and 2010 do not support custom flags (keywords).
            </remarks>
        </member>
        <member name="F:Lesnikowski.Client.IMAP.Flag.All">
            <summary>
            All messages in the mailbox.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.IMAP.Flag.Seen">
            <summary>
            Messages that have the \Seen flag set.
            </summary>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageSeen(System.Int64)"/>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageUnseen(System.Int64)"/>    
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageSeenByUID(System.Int64)"/>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Int64)"/>   
        </member>
        <member name="F:Lesnikowski.Client.IMAP.Flag.New">
            <summary>
            Messages that have the \Recent flag set but not the \Seen flag. This is functionally equivalent to "(RECENT UNSEEN)".
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.IMAP.Flag.Recent">
            <summary>
            Messages that have the \Recent flag set.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.IMAP.Flag.Old">
            <summary>
            Messages that do not have the \Recent flag set. This is functionally equivalent to "NOT RECENT" (as opposed to "NOT NEW").
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.IMAP.Flag.Draft">
            <summary>
            Messages with the \Draft flag set.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.IMAP.Flag.Deleted">
            <summary>
            Messages with the \Deleted flag set.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.IMAP.Flag.Flagged">
            <summary>
            Messages with the \Flagged flag set.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.IMAP.Flag.Answered">
            <summary>
            Messages with the \Answered flag set.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.IMAP.Flag.Unseen">
            <summary>
            Messages that do not have the \Seen flag set.
            </summary>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageSeen(System.Int64)"/>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageUnseen(System.Int64)"/>    
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageSeenByUID(System.Int64)"/>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Int64)"/>   
        </member>
        <member name="F:Lesnikowski.Client.IMAP.Flag.Unanswered">
            <summary>
            Messages that do not have the \Answered flag set.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.IMAP.Flag.Undeleted">
            <summary>
            Messages that do not have the \Deleted flag set.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.IMAP.Flag.Undraft">
            <summary>
            Messages that do not have the \Draft flag set.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.IMAP.Flag.Unflagged">
            <summary>
            Messages that do not have the \Flagged flag set.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Flag.#ctor(System.String)">
            <summary>
            Creates new instance of the Flag object with specified name.
            </summary>
            <param name="name">Name of the flag.</param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Flag.Equals(Lesnikowski.Client.IMAP.Flag)">
            <summary>
             Determines whether the specified <see cref="T:Lesnikowski.Client.IMAP.Flag"/> object is equal to the current one.
             Names are compared case insensitive.
            </summary>
            <param name="other"></param>
            <returns>The <see cref="T:Lesnikowski.Client.IMAP.Flag"/> to compare with the current <see cref="T:Lesnikowski.Client.IMAP.Flag"/></returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Flag.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <c>false</c>.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Flag.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>A hash code for the current <see cref="T:Lesnikowski.Client.IMAP.Flag"/>.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Flag.op_Equality(Lesnikowski.Client.IMAP.Flag,Lesnikowski.Client.IMAP.Flag)">
            <summary>
            Checks is two <see cref="T:Lesnikowski.Client.IMAP.Flag"/> objects are same.
            </summary>
            <param name="left">First object to compare</param>
            <param name="right">Second object to compare</param>
            <returns><c>True</c> if flags are equal <c>false</c> otherwise</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Flag.op_Inequality(Lesnikowski.Client.IMAP.Flag,Lesnikowski.Client.IMAP.Flag)">
            <summary>
            Checks is two <see cref="T:Lesnikowski.Client.IMAP.Flag"/> objects are different.
            </summary>
            <param name="left">First object to compare</param>
            <param name="right">Second object to compare</param>
            <returns><c>False</c> if flags are equal <c>true</c> otherwise</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Flag.ToString">
            <summary>
            Returns <see cref="P:Lesnikowski.Client.IMAP.Flag.FullName"/> property.
            </summary>
            <returns><see cref="P:Lesnikowski.Client.IMAP.Flag.FullName"/> property.</returns>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.Flag.IsSystemFlag">
            <summary>
            Gets information if this is a system flag.
            All system flags begin with "\" character.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.Flag.Name">
            <summary>
            Returns the flag name. E.g. SEEN, UNFLAGGED
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.Flag.FullName">
            <summary>
            Returns the full flag name. Including backslash for system flags E.g. \SEEN, \UNFLAGGED, MYFLAG
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.IMAP.ICriterion">
            <summary>
            Represents IMAP search criteria.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.ICriterion.Render(System.Text.StringBuilder)">
            <summary>
            Renders current criteria object to <see cref="T:System.Text.StringBuilder"/>
            </summary>
            <param name="writer"><see cref="T:System.Text.StringBuilder"/> to render on.</param>
        </member>
        <member name="T:Lesnikowski.Client.IMAP.Expression">
            <summary>
            Represents expressions that can be used by <see cref="M:Lesnikowski.Client.IMAP.Imap.Search(Lesnikowski.Client.IMAP.ICriterion)"/> or <see cref="M:Lesnikowski.Client.IMAP.FluentSearch.Where(Lesnikowski.Client.IMAP.ICriterion)"/>  methods.
            To join several criteria use <see cref="M:Lesnikowski.Client.IMAP.Expression.And(Lesnikowski.Client.IMAP.ICriterion[])"/> or <see cref="M:Lesnikowski.Client.IMAP.Expression.Or(Lesnikowski.Client.IMAP.ICriterion,Lesnikowski.Client.IMAP.ICriterion)"/>.
            </summary>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.Search"/>
            <seealso cref="T:Lesnikowski.Client.IMAP.FluentSearch"/>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.Search(Lesnikowski.Client.IMAP.ICriterion)"/>
            <seealso cref="T:Lesnikowski.Client.IMAP.SimpleImapQuery"/>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Expression.All">
            <summary>
            Matches all messages.
            </summary>
            <returns>New expression.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Expression.Subject(System.String)">
            <summary>
            Matches messages that contain the specified string in the envelope structure's SUBJECT field.
            </summary>
            <param name="subject">Subject fragment to search for.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Expression.And(Lesnikowski.Client.IMAP.ICriterion[])">
            <summary>
            Returns conjunction between expressions (AND).
            </summary>
            <param name="criterions">Criteria to AND.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Expression.Or(Lesnikowski.Client.IMAP.ICriterion,Lesnikowski.Client.IMAP.ICriterion)">
            <summary>
             Returns disjunction between two expressions (OR).
            </summary>
            <param name="first">First expression.</param>
            <param name="second">Second expression.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Expression.From(System.String)">
            <summary>
            Messages that contain the specified string in the envelope structure's FROM field.
            </summary>
            <param name="from">Address to match.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Expression.To(System.String)">
            <summary>
            Messages that contain the specified string in the envelope structure's TO field.
            </summary>
            <param name="to">Address to match.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Expression.Cc(System.String)">
            <summary>
            Messages that contain the specified string in the envelope structure's CC field.
            </summary>
            <param name="cc">Address to match.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Expression.Bcc(System.String)">
            <summary>
            Messages that contain the specified string in the envelope structure's BCC field.
            </summary>
            <param name="bcc">Address to match.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Expression.Not(Lesnikowski.Client.IMAP.ICriterion)">
            <summary>
            Messages that do not match the specified search key.
            </summary>
            <param name="criterion">Criterion that must not be matched.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Expression.HasFlag(Lesnikowski.Client.IMAP.Flag)">
            <summary>
            Messages that have specified flag set.
            </summary>
            <param name="flag">Flag that should be set.</param>
            <returns>New expression.</returns>
            <remarks>
            Exchange 2007 and 2010 do not support custom flags (keywords).
            </remarks>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Expression.Body(System.String)">
            <summary>
            Messages that contain the specified string in the body of the message.
            </summary>
            <param name="body">Body fragment to search for.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Expression.Larger(System.Int64)">
            <summary>
            Messages with an [RFC-2822] size larger than the specified number of octets.
            </summary>
            <param name="largerThan">Size to match.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Expression.Smaller(System.Int64)">
            <summary>
            Messages with an [RFC-2822] size smaller than the specified number of octets.
            </summary>
            <param name="smallerThan">Size to match.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Expression.On(System.DateTime)">
            <summary>
             Messages whose internal date (disregarding time and timezone) is within the specified date.
            </summary>
            <param name="dateTime">Date to match.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Expression.SentOn(System.DateTime)">
            <summary>
             Messages whose [RFC-2822] Date: header (disregarding time and timezone) is within the specified date.
            </summary>
            <param name="dateTime">Date to match.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Expression.Before(System.DateTime)">
            <summary>
             Messages whose internal date (disregarding time and timezone) is earlier than the specified date.
            </summary>
            <param name="dateTime">Date to match.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Expression.SentBefore(System.DateTime)">
            <summary>
             Messages whose [RFC-2822] Date: header (disregarding time and timezone) is earlier than the specified date.
            </summary>
            <param name="dateTime">Date to match.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Expression.Since(System.DateTime)">
            <summary>
             Messages whose internal date (disregarding time and timezone) is within or later than the specified date.
            </summary>
            <param name="dateTime">Date to match.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Expression.SentSince(System.DateTime)">
            <summary>
             Messages whose [RFC-2822] Date: header (disregarding time and timezone) is within or later than the specified date.
            </summary>
            <param name="dateTime">Date to match.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Expression.Header(System.String,System.String)">
            <summary>
             Messages that have a header with the specified field-name (as defined in [RFC-2822]) and that contains the specified string
             in the text of the header (what comes after the colon). If the string to search is zero-length, 
             this matches all messages that have a header line with the specified field-name regardless of the contents.
            </summary>
            <param name="header">Header name.</param>
            <param name="value">Header value.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Expression.HasKeyword(System.String)">
            <summary>
            Messages with the specified keyword flag set.
            </summary>
            <param name="keyword">Keyword that should be set.</param>
            <returns>New expression.</returns>
            <remarks>
            Exchange 2007 and 2010 do not support custom flags (keywords).
            </remarks>
        </member>
        <member name="T:Lesnikowski.Client.IMAP.Imap">
            <summary>
            IMAP client implementation. 
            It allows listing, moving, copying, downloading and deleting emails from IMAP servers.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.TcpTextClient">
            <summary>
            Implements simple TCP/IP text client.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.TcpTextClient.#ctor(System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes a new instance of the TcpTextClient object.
            Sets <see cref="P:Lesnikowski.Client.TcpTextClient.ReceiveTimeout"/> and <see cref="P:Lesnikowski.Client.TcpTextClient.SendTimeout"/> to 20 sec.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.TcpTextClient.AttachTo(System.Net.Sockets.Socket,System.Boolean)">
            <summary>
            Initializes new instance of TcpTextClient using specified <see cref="T:System.Net.Sockets.TcpClient"/>
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.TcpTextClient.GetServerGreeting">
            <summary>
            Override this function to get server's greeting.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.TcpTextClient.GetStream">
            <summary>
            Gets <see cref="T:System.Net.Security.SslStream"/> or <see cref="T:System.Net.Sockets.NetworkStream"/> for current connection.
            </summary>
            <returns><see cref="T:System.Net.Security.SslStream"/> or <see cref="T:System.Net.Sockets.NetworkStream"/></returns>
        </member>
        <member name="M:Lesnikowski.Client.TcpTextClient.CreateSSLStream(System.IO.Stream,System.String)">
            <summary>
            Creates SSL stream and authenticates client.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.TcpTextClient.Connect(System.String,System.Int32)">
            <summary>
            Connects to server. Use <see cref="M:Lesnikowski.Client.TcpTextClient.ConnectSSL(System.String,System.Int32)"/> when SSL connection is needed.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port number.</param>
            <exception cref="T:Lesnikowski.Client.ServerException">
            -ERR response,
            Connection error.
             </exception>
        </member>
        <member name="M:Lesnikowski.Client.TcpTextClient.ConnectSSL(System.String,System.Int32)">
            <summary>
            Connects to server using SSL.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port number.</param>
            <exception cref="T:Lesnikowski.Client.ServerException">
            -ERR response,
            Connection error.
             </exception>
        </member>
        <member name="M:Lesnikowski.Client.TcpTextClient.Connect(System.String,System.Int32,System.Boolean)">
            <summary>
            Connects to server.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port number.</param>
            <param name="useSSL">if <c>true</c> creates SSL connection</param>
            <exception cref="T:Lesnikowski.Client.ServerException">
            -ERR response,
            Connection error.
             </exception>
        </member>
        <member name="M:Lesnikowski.Client.TcpTextClient.SwitchToSSL">
            <summary>
            Switches to SSL stream, authenticates as client.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.TcpTextClient.Connect(System.Net.IPAddress,System.Int32,System.Boolean)">
            <summary>
            Connects to server.
            </summary>
            <param name="ipAddress">IP address.</param>
            <param name="port">Port number.</param>
            <param name="useSSL">if <c>true</c> creates SSL connection.</param>
            <exception cref="T:Lesnikowski.Client.ServerException">
            -ERR response,
            Connection error.
             </exception>
        </member>
        <member name="M:Lesnikowski.Client.TcpTextClient.Connect(System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Connects to server.
            </summary>
            <param name="ipEndPoint">IP end point of the connection.</param>
            <param name="useSSL">if <c>true</c> creates SSL connection.</param>
            <exception cref="T:Lesnikowski.Client.ServerException">
            -ERR response,
            Connection error.
             </exception>
        </member>
        <member name="M:Lesnikowski.Client.TcpTextClient.Send(System.String)">
            <summary>
            Sends the text command to server.
            Adds "\r\n" to the command.
            </summary>
            <exception cref="T:Lesnikowski.Client.ServerException">
            An error occurred when accessing the socket.
            -or-
            The <see cref="T:System.Net.Sockets.NetworkStream"/> is closed.
            -or-
            There is a failure reading from the network.
            </exception>
            <param name="command">Text command to send.</param>
        </member>
        <member name="M:Lesnikowski.Client.TcpTextClient.CloseCommand">
            <summary>
            Derived classes should override this method to
            perform specific closing action.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.TcpTextClient.Close">
            <summary>
            Issues quit command (<see cref="M:Lesnikowski.Client.TcpTextClient.CloseCommand"/> method), closes the connection, disposes the object.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.TcpTextClient.Close(System.Boolean)">
            <summary>
            Issues quit command (<see cref="M:Lesnikowski.Client.TcpTextClient.CloseCommand"/> method) and closes the connection.
            </summary>
            <exception cref="T:Lesnikowski.Client.ServerException">
            Socket errors (only if '<paramref name="throwExceptions"/>==<c>true</c>'), closes connection anyway.
            </exception>
            <param name="throwExceptions">If <c>false</c> does NOT throw exceptions.</param>
        </member>
        <member name="M:Lesnikowski.Client.TcpTextClient.Dispose">
            <summary>
            Releases all resources acquired by this object. Closes connection, without issuing any quit commands.
            </summary>
            <seealso cref="M:Lesnikowski.Client.TcpTextClient.Close"/>
        </member>
        <member name="P:Lesnikowski.Client.TcpTextClient.ReceiveTimeout">
            <summary>
            Gets or sets the amount of time a <see cref="T:System.Net.Sockets.TcpClient"/> will wait to receive data once a read operation is initiated.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.TcpTextClient.SendTimeout">
            <summary>
            Gets or sets the amount of time a <see cref="T:System.Net.Sockets.TcpClient"/> will wait for a send operation to complete successfully.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.TcpTextClient.Connected">
            <summary>
            Gets a value indicating whether the underlying <see cref="T:System.Net.Sockets.Socket"/> for a <see cref="T:System.Net.Sockets.TcpClient"/> is connected to a remote host.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.TcpTextClient.SSLStream">
            <summary>
            Returns <see cref="T:System.Net.Security.SslStream"/> or <c>null</c> if SSL is not enabled.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.TcpTextClient.Reader">
            <summary>
            <see cref="T:System.IO.StreamReader"/> used for reading from network stream or SSL stream.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.TcpTextClient.Writer">
            <summary>
            <see cref="T:System.IO.StringWriter"/> used for writing to network stream or SSL stream.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.TcpTextClient.User">
            <summary>
            Gets or sets the user name.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.TcpTextClient.Password">
            <summary>
            Gets or sets the user's password.
            </summary>
        </member>
        <member name="E:Lesnikowski.Client.TcpTextClient.ServerCertificateValidate">
            <summary>
            Event which is called for custom server validation.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.#ctor">
            <summary>
            Initializes new instance of the Imap class.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.#ctor(System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes new instance of the Imap class.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetServerGreeting">
            <summary>
            Override this function to get server's greeting.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.Connect(System.String)">
            <summary>
            Connects to IMAP server on port 143. Use <see cref="M:Lesnikowski.Client.IMAP.Imap.ConnectSSL(System.String)"/> when SSL connection is needed.
            </summary>
            <param name="host">Target host name or IP address.</param>
            <exception cref="T:Lesnikowski.Client.ServerException">
            Error response,
            DNS resolving error,
            Connecting error.
             </exception>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.ConnectSSL(System.String)">
            <summary>
            Connects to IMAP server using SSL on port 993.
            </summary>
            <param name="host">Target host name or IP address.</param>
            <seealso cref="M:Lesnikowski.Client.TcpTextClient.Connect(System.String,System.Int32,System.Boolean)"/>
            <exception cref="T:Lesnikowski.Client.ServerException">
            Error response,
            DNS resolving error,
            Connecting error.
             </exception>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.StartTLS">
            <summary>
            Sends 'STARTTLS' command and initializes SSL connection.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.UseBestLogin(System.String,System.String)">
            <summary>
            Logs user in using best available method. 
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.Login(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginPLAIN(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginPLAIN(System.String,System.String,System.String)"/> 
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginCRAM(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginOAUTH(System.String)"/>
            <exception cref="T:Lesnikowski.Client.ServerException">Throws <see cref="T:Lesnikowski.Client.ServerException"/> on negative response.</exception>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.Login">
            <summary>
            Logs user in using LOGIN command. 
            Uses <see cref="P:Lesnikowski.Client.TcpTextClient.User"/> and <see cref="P:Lesnikowski.Client.TcpTextClient.Password"/> properties.
            This method sends the password in clear text, unless SSL connection is used.
            </summary>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginCRAM(System.String,System.String)"/>
            <exception cref="T:Lesnikowski.Client.ServerException">Throws <see cref="T:Lesnikowski.Client.ServerException"/> on negative response.</exception>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.Login(System.String,System.String)">
            <summary>
            Logs user in using LOGIN command. This method sends the password in clear text, unless SSL connection is used.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.Login(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginPLAIN(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginPLAIN(System.String,System.String,System.String)"/> 
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginCRAM(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginDIGEST(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginOAUTH(System.String)"/>
            <exception cref="T:Lesnikowski.Client.ServerException">Throws <see cref="T:Lesnikowski.Client.ServerException"/> on negative response.</exception>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.LoginPLAIN(System.String,System.String)">
            <summary>
            Logs user in using AUTHENTICATE PLAIN command. This method sends the password in clear text (BASE64), unless SSL connection is used.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.ConnectSSL(System.String)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.Login(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginPLAIN(System.String,System.String,System.String)"/> 
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginCRAM(System.String,System.String)"/>  <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginDIGEST(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginOAUTH(System.String)"/>
            <exception cref="T:Lesnikowski.Client.ServerException">Throws <see cref="T:Lesnikowski.Client.ServerException"/> on negative response.</exception>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.LoginPLAIN(System.String,System.String,System.String)">
            <summary>
            Logs user in using AUTHENTICATE PLAIN command. This method sends the password in clear text (BASE64), unless SSL connection is used.
            </summary>
            <param name="user">User's login.</param>
            <param name="adminUser">Administrator's user.</param>
            <param name="adminPassword">Administrator's password.</param>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.ConnectSSL(System.String)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.Login(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginPLAIN(System.String,System.String)"/> 
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginCRAM(System.String,System.String)"/>  <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginDIGEST(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginOAUTH(System.String)"/>
            <exception cref="T:Lesnikowski.Client.ServerException">Throws <see cref="T:Lesnikowski.Client.ServerException"/> on negative response.</exception>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.LoginCRAM(System.String,System.String)">
            <summary>
            Logs user in using AUTHENTICATE CRAM-MD5 command. This method does NOT send the password in clear text.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <remarks>
            This command is unnecessary if you are using SSL, use <see cref="M:Lesnikowski.Client.IMAP.Imap.Login(System.String,System.String)"/> method instead.
            </remarks>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.ConnectSSL(System.String)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.Login(System.String,System.String)"/> 
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginPLAIN(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginPLAIN(System.String,System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginDIGEST(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginOAUTH(System.String)"/>
            <exception cref="T:Lesnikowski.Client.ServerException">Throws <see cref="T:Lesnikowski.Client.ServerException"/> on negative response.</exception>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.LoginDIGEST(System.String,System.String)">
            <summary>
            Logs user in using AUTHENTICATE DIGEST-MD5 command. This method does NOT send the password in clear text.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <remarks>
            This command is unnecessary if you are using SSL, use <see cref="M:Lesnikowski.Client.IMAP.Imap.Login(System.String,System.String)"/> method instead.
            </remarks>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.ConnectSSL(System.String)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.Login(System.String,System.String)"/> 
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginPLAIN(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginPLAIN(System.String,System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginCRAM(System.String,System.String)"/>  <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginOAUTH(System.String)"/>
            <exception cref="T:Lesnikowski.Client.ServerException">Throws <see cref="T:Lesnikowski.Client.ServerException"/> on negative response.</exception>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.LoginOAUTH(System.String)">
            <summary>
            Logs user in using AUTHENTICATE XOAUTH command. This method does NOT send the password.
            You can use <see cref="T:Lesnikowski.Client.Authentication.OAuth"/> class to create the key.
            </summary>
            <param name="key">XOAuth key. The key will be encoded using BASE64. You can use <see cref="M:Lesnikowski.Client.Authentication.ISignedOAuth.GetXOAuthKey"/> method to create this key.</param>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.Login(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginPLAIN(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginPLAIN(System.String,System.String,System.String)"/> 
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.LoginCRAM(System.String,System.String)"/>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.SendCommand(System.String)">
            <summary>
            Sends command and waits for the server response.
            </summary>
            <exception cref="T:Lesnikowski.Client.ServerException">
            BAD -or- NO response.
            </exception>
            <remarks>
            Most commands have their own specialized methods in this class, you should probably use them instead.
            This is equivalent to calling 'SendCommand(command, <c>true</c>);'.
            </remarks>
            <param name="command">Command e.g. "NOOP".</param>
            <returns>IMAP response object.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.SendCommand(System.String,System.Boolean)">
            <summary>
            Sends command and waits for the server response.
            </summary>
            <exception cref="T:Lesnikowski.Client.ServerException">
            Throws <see cref="T:Lesnikowski.Client.ServerException"/> on BAD -or- NO response (if '<paramref name="throwException"/>' is set to <c>true</c>).
            </exception>
            <remarks>
            Most commands have their own specialized methods in this class, you should probably use them instead.
            </remarks>
            <param name="command">Command e.g. "NOOP".</param>
            <param name="throwException">If <c>true</c> throws <see cref="T:Lesnikowski.Client.ServerException"/> on response other then OK</param>
            <returns>IMAP response object.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.SendContinueCommand(System.String)">
            <summary>
            Sends command, expects SendMoreData response
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.CloseCommand">
            <summary>
            Sends the LOGOUT command.
            </summary>
            <exception cref="T:Lesnikowski.Client.ServerException">
            Throws <see cref="T:Lesnikowski.Client.ServerException"/> on response other then OK.
            </exception>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.ReceiveResponse(System.String)">
            <summary>
            Receives the response ending with specified request tag.
            </summary>
            <param name="tag">Request tag</param>
            <returns>IMAP response object.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetAll">
            <summary>
            Gets UIDS of all messages in the current folder (mailbox). Equivalent to Search(Expression.All())
            </summary>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.GetMessageByUID(System.Int64)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.GetHeadersByUID(System.Int64)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.PeekMessageByUID(System.Int64)"/>
            <returns>UID list.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.SearchFlag(Lesnikowski.Client.IMAP.Flag)">
            <summary>
            Gets UIDS of all messages in the current folder (mailbox) with specified flag.
            Equivalent to Search(Expression.HasFlag(flag))
            </summary>
            <param name="flag">Flag to search for.</param>
            <returns>UID list.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.Search(Lesnikowski.Client.IMAP.ICriterion)">
            <summary>
            Gets UIDS of all messages that match specified criteria.
            Use <see cref="M:Lesnikowski.Client.IMAP.Expression.And(Lesnikowski.Client.IMAP.ICriterion[])"/>, <see cref="M:Lesnikowski.Client.IMAP.Expression.Or(Lesnikowski.Client.IMAP.ICriterion,Lesnikowski.Client.IMAP.ICriterion)"/> and other <see cref="T:Lesnikowski.Client.IMAP.Expression"/> methods to create a valid query.
            You can also pass <see cref="T:Lesnikowski.Client.IMAP.SimpleImapQuery"/> to this method.
            </summary>
            <example>
            List&lt;long&gt; uids = imap.Search(Expression.And(Expression.Subject("report"), Expression.HasFlag(Flag.Unseen)));
            </example>
            <param name="criterion">Search criteria. Use <see cref="M:Lesnikowski.Client.IMAP.Expression.And(Lesnikowski.Client.IMAP.ICriterion[])"/> to join several criterions</param>
            <returns>UID list.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.Search">
            <summary>
            Creates a new search object.
            </summary>
            <example>
            List&lt;long&gt; uids = imap.Search().Where(Expression.Subject("report")).Sort(SortBy.Date());
            </example>
            <example>
            List&lt;long&gt; numbers = imap.Search().Where(Expression.Header("Message-ID", "id")).ResultAs(<see cref="F:Lesnikowski.Client.IMAP.ResultType.Numbers"/>);
            </example>
            <returns>New search object</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.NumberSearchFlag(Lesnikowski.Client.IMAP.Flag)">
            <summary>
            Gets numbers of all messages in the current folder (mailbox) with specified flag.
            Equivalent to Search(Expression.HasFlag(flag))
            </summary>
            <param name="flag">Flag to search for.</param>
            <returns>List of UIDS or numbers.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.NumberSearch(Lesnikowski.Client.IMAP.ICriterion)">
            <summary>
            Gets numbers of all messages that match specified criteria.
            Use <see cref="M:Lesnikowski.Client.IMAP.Expression.And(Lesnikowski.Client.IMAP.ICriterion[])"/>, <see cref="M:Lesnikowski.Client.IMAP.Expression.Or(Lesnikowski.Client.IMAP.ICriterion,Lesnikowski.Client.IMAP.ICriterion)"/> and other <see cref="T:Lesnikowski.Client.IMAP.Expression"/> methods to create a valid query.
            You can also pass <see cref="T:Lesnikowski.Client.IMAP.SimpleImapQuery"/> to this method.
            </summary>
            <example>
            List&lt;long&gt; uids = imap.Search(Expression.And(Expression.Subject("report"), Expression.HasFlag(Flag.Unseen)));
            </example>
            <param name="criterion">Search criteria. Use <see cref="M:Lesnikowski.Client.IMAP.Expression.And(Lesnikowski.Client.IMAP.ICriterion[])"/> to join several criterions</param>
            <returns>List of UIDS or numbers.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.Capability">
            <summary>
            Sends CAPABILITY command.
            </summary>
            <returns>Server's capability list.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.CloseCurrentFolder">
            <summary>
            Issues CLOSE command to the server.
            The CLOSE command permanently removes all messages that have the 
            <see cref="F:Lesnikowski.Client.IMAP.Flag.Deleted"/> flag set from the currently selected mailbox, 
            and returns to the authenticated state from the selected state (no folder is selected).
            </summary>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.Select(System.String)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.SelectInbox"/>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.Examine(System.String)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.ExamineInbox"/>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.SelectInbox">
            <summary>
            Selects 'Inbox' as a current folder (mailbox) so that messages inside can be accessed.
            Select command will remove the <see cref="F:Lesnikowski.Client.IMAP.Flag.Recent"/> flag since the folder has now been viewed 
            (This is not the same as the <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> IMAP flag).
            </summary>
            <returns>Status of the folder (mailbox). It can be updated by subsequent <see cref="M:Lesnikowski.Client.IMAP.Imap.Noop"/> commands.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.Select(System.String)">
            <summary>
            Selects specified folder (mailbox) as the current folder so that messages inside can be accessed.
            Select command will remove the <see cref="F:Lesnikowski.Client.IMAP.Flag.Recent"/> flag since the folder has now been viewed 
            (This is not the same as the <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> IMAP flag).
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="folder">Folder name.</param>
            <returns>Status of the folder (mailbox). It can be updated by subsequent <see cref="M:Lesnikowski.Client.IMAP.Imap.Noop"/> commands.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.ExamineInbox">
            <summary>
            Selects 'Inbox' as a current read-only folder (mailbox) so that messages inside can be accessed.
            Examine command will not reset the <see cref="F:Lesnikowski.Client.IMAP.Flag.Recent"/> flag
            </summary>
            <returns>Status of the folder (mailbox). It can be updated by subsequent <see cref="M:Lesnikowski.Client.IMAP.Imap.Noop"/> commands.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.Examine(System.String)">
            <summary>
            Selects specified folder (mailbox) as the current read-only folder so that messages inside can be accessed.
            Examine command will not reset the <see cref="F:Lesnikowski.Client.IMAP.Flag.Recent"/> flag
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="folder">Folder name.</param>
            <returns>Status of the folder (mailbox).</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.Noop">
            <summary>
            Always succeeds. It does nothing.
            Can be used as a periodic poll for new messages - updates <see cref="T:Lesnikowski.Client.IMAP.FolderStatus"/> returned by last <see cref="M:Lesnikowski.Client.IMAP.Imap.Select(System.String)"/> command
            Can also be used to reset any inactivity auto-logout timer on the server.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.PeekHeaders(System.Int64)">
            <summary>
            Gets headers of the specified mail message form server. Use <see cref="T:Lesnikowski.Mail.MailBuilder"/> to create <see cref="T:Lesnikowski.Mail.IMail"/> object.
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <returns>String containing mail message headers.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.PeekHeadersByUID(System.Int64)">
            <summary>
            Gets headers of the specified mail message form server. Use <see cref="T:Lesnikowski.Mail.MailBuilder"/> to create <see cref="T:Lesnikowski.Mail.IMail"/> object.
            </summary>
            <param name="uid">Unique-id of the message to get.</param>
            <returns>String containing mail message headers.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.PeekMessage(System.Int64)">
            <summary>
            Gets specified mail message form server. This method in contrast to <see cref="M:Lesnikowski.Client.IMAP.Imap.GetMessage(System.Int64)"/> does not set the <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/>.
            Use <see cref="T:Lesnikowski.Mail.MailBuilder"/> to create <see cref="T:Lesnikowski.Mail.IMail"/> object.
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <returns>String containing mail message.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.PeekMessageByUID(System.Int64)">
            <summary>
            Gets specified mail message form server. This method in contrast to <see cref="M:Lesnikowski.Client.IMAP.Imap.GetMessage(System.Int64)"/> does not set the <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/>.
            Use <see cref="T:Lesnikowski.Mail.MailBuilder"/> to create <see cref="T:Lesnikowski.Mail.IMail"/> object.
            </summary>
            <param name="uid">Unique-id of the message to get.</param>
            <returns>String containing mail message.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetMessage(System.Int64)">
            <summary>
            Gets specified mail message form server. Use <see cref="T:Lesnikowski.Mail.MailBuilder"/> to create <see cref="T:Lesnikowski.Mail.IMail"/> object.
            This method sets the <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> unless folder is selected with <see cref="M:Lesnikowski.Client.IMAP.Imap.Examine(System.String)"/> or <see cref="M:Lesnikowski.Client.IMAP.Imap.ExamineInbox"/>.
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <returns>String containing mail message.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetMessageByUID(System.Int64)">
            <summary>
            Gets specified mail message form server. Use <see cref="T:Lesnikowski.Mail.MailBuilder"/> to create <see cref="T:Lesnikowski.Mail.IMail"/> object.
            This method sets the <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> unless folder is selected with <see cref="M:Lesnikowski.Client.IMAP.Imap.Examine(System.String)"/> or <see cref="M:Lesnikowski.Client.IMAP.Imap.ExamineInbox"/>.
            </summary>
            <param name="uid">Unique-id of the message to get.</param>
            <returns>String containing mail message.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetHeaders(System.Int64)">
            <summary>
            Gets headers of the specified mail message form server. Use <see cref="T:Lesnikowski.Mail.MailBuilder"/> to create <see cref="T:Lesnikowski.Mail.IMail"/> object.
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <returns>String containing mail message headers.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetHeadersByUID(System.Int64)">
            <summary>
            Gets headers of the specified mail message form server. Use <see cref="T:Lesnikowski.Mail.MailBuilder"/> to create <see cref="T:Lesnikowski.Mail.IMail"/> object.
            </summary>
            <param name="uid">Unique-id of the message to get.</param>
            <returns>String containing mail message headers.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetMessageInfoByUID(System.Int64)">
            <summary>
            Gets message information for the specified message. Does not set the <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="uid">Unique-id of the message to get information for.</param>
            <returns>Message informations (<see cref="P:Lesnikowski.Client.IMAP.MessageInfo.Envelope"/> and <see cref="P:Lesnikowski.Client.IMAP.MessageInfo.BodyStructure"/> )</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetMessageInfo(System.Int64)">
            <summary>
            Gets message information for the specified message. Does not set the <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <returns>Message informations (<see cref="P:Lesnikowski.Client.IMAP.MessageInfo.Envelope"/> and <see cref="P:Lesnikowski.Client.IMAP.MessageInfo.BodyStructure"/> )</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetMessageInfoByUID(System.Collections.Generic.List{System.Int64})">
            <summary>
            Gets message information for the specified messages. Does not set the <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="uids">Unique-id of the messages to get information for.</param>
            <returns>Message informations (<see cref="P:Lesnikowski.Client.IMAP.MessageInfo.Envelope"/> and <see cref="P:Lesnikowski.Client.IMAP.MessageInfo.BodyStructure"/> )</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetMessageInfo(System.Collections.Generic.List{System.Int64})">
            <summary>
            Gets message information for the specified messages. Does not set the <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="messageNumbers">1 based message numbers.</param>
            <returns>Message informations (<see cref="P:Lesnikowski.Client.IMAP.MessageInfo.Envelope"/> and <see cref="P:Lesnikowski.Client.IMAP.MessageInfo.BodyStructure"/> )</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetEnvelope(System.Int64)">
            <summary>
            Gets the envelope (<see cref="P:Lesnikowski.Client.IMAP.Envelope.Subject"/>, <see cref="P:Lesnikowski.Client.IMAP.Envelope.From"/>, <see cref="P:Lesnikowski.Client.IMAP.Envelope.To"/>...) 
            of the specified message. Does not set the <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <returns>Envelope information for specified message.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetEnvelope(System.Collections.Generic.List{System.Int64})">
            <summary>
            Gets the envelope (<see cref="P:Lesnikowski.Client.IMAP.Envelope.Subject"/>, <see cref="P:Lesnikowski.Client.IMAP.Envelope.From"/>, <see cref="P:Lesnikowski.Client.IMAP.Envelope.To"/>...) 
            of the specified messages. Does not set the <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="messageNumbers">1 based message numbers.</param>
            <returns>Envelope information for specified messages.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetEnvelopeByUID(System.Int64)">
            <summary>
            Gets the envelope (<see cref="P:Lesnikowski.Client.IMAP.Envelope.Subject"/>, <see cref="P:Lesnikowski.Client.IMAP.Envelope.From"/>, <see cref="P:Lesnikowski.Client.IMAP.Envelope.To"/>...) 
            of the specified message. Does not set the <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="uid">Unique-id of the message to get envelope for.</param>
            <returns>Envelope information for specified message.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetEnvelopeByUID(System.Collections.Generic.List{System.Int64})">
            <summary>
            Gets the envelope (<see cref="P:Lesnikowski.Client.IMAP.Envelope.Subject"/>, <see cref="P:Lesnikowski.Client.IMAP.Envelope.From"/>, <see cref="P:Lesnikowski.Client.IMAP.Envelope.To"/>...) 
            of the specified messages. Does not set the <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="uids">Unique-id of the messages to get envelope for.</param>
            <returns>Envelope information for specified messages.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetBodyStructure(System.Int64)">
            <summary>
            Gets the structure of the specified message. Does not set the <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <returns>Structure of the specified message.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetBodyStructure(System.Collections.Generic.List{System.Int64})">
            <summary>
            Gets the structure of the specified message. Does not set the <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="messageNumbers">1 based message numbers.</param>
            <returns>Structure of the specified messages.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetBodyStructureByUID(System.Int64)">
            <summary>
            Gets the structure of the specified message.
            </summary>
            <param name="uid">Unique-id of the message to get.</param>
            <returns>Structure of the specified message.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetBodyStructureByUID(System.Collections.Generic.List{System.Int64})">
            <summary>
            Gets the structure of the specified message. Does not set the <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="uids">Unique-ids of the messages to get.</param>
            <returns>Structure of the specified messages.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetMimePart(System.Int64,Lesnikowski.Client.IMAP.MimeStructure)">
            <summary>
            Gets the data for specified part.
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <param name="part">Mime part to get.</param>
            <returns>Part's data.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetMimePartByUID(System.Int64,Lesnikowski.Client.IMAP.MimeStructure)">
            <summary>
            Gets the data for specified part.
            </summary>
            <param name="uid">Unique-id of the message to get.</param>
            <param name="part">Mime part to get.</param>
            <returns>Part's data.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetMimePartText(System.Int64,Lesnikowski.Client.IMAP.MimeStructure)">
            <summary>
            Gets the text data for specified part.
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <param name="part">Mime part to get.</param>
            <returns>Text body of the part.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetMimePartTextByUID(System.Int64,Lesnikowski.Client.IMAP.MimeStructure)">
            <summary>
            Gets the text data for specified part.
            </summary>
            <param name="uid">Unique-id of the message to get.</param>
            <param name="part">Mime part to get.</param>
            <returns>Text body of the part.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.PeekMimePart(System.Int64,Lesnikowski.Client.IMAP.MimeStructure)">
            <summary>
            Peeks the data for specified part. Does not set the <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <param name="part">Mime part to get.</param>
            <returns>Part's data.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.PeekMimePartByUID(System.Int64,Lesnikowski.Client.IMAP.MimeStructure)">
            <summary>
            Peeks the data for specified part. Does not set the <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="uid">Unique-id of the message to get.</param>
            <param name="part">Mime part to get.</param>
            <returns>Part's data.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.PeekMimePartText(System.Int64,Lesnikowski.Client.IMAP.MimeStructure)">
            <summary>
            Peeks the text data for specified part. Does not set the <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <param name="part">Mime part to get.</param>
            <returns>Text body of the part.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.PeekMimePartTextByUID(System.Int64,Lesnikowski.Client.IMAP.MimeStructure)">
            <summary>
            Peeks the text data for specified part. Does not set the <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="uid">Unique-id of the message to get.</param>
            <param name="part">Mime part to get.</param>
            <returns>Text body of the part.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetFlagsByUID(System.Int64)">
            <summary>
            Gets flags for the specified email message form server. Does not set the <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/>.
            </summary>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.FlagMessageByUID(System.Int64,Lesnikowski.Client.IMAP.Flag)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.UnflagMessageByUID(System.Int64,Lesnikowski.Client.IMAP.Flag)"/> <see cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageSeenByUID(System.Int64)"/> <see cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Int64)"/>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.FlagMessageByUID(System.Collections.Generic.List{System.Int64},Lesnikowski.Client.IMAP.Flag)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.UnflagMessageByUID(System.Collections.Generic.List{System.Int64},Lesnikowski.Client.IMAP.Flag)"/> <see cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageSeenByUID(System.Collections.Generic.List{System.Int64})"/> <see cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Collections.Generic.List{System.Int64})"/>
            <param name="uid">Unique-id of the message to get flags for.</param>
            <returns>List containing flags of the specified message.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetFlags(System.Int64)">
            <summary>
            Gets flags for the specified email message form server. Does not set the <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/>.
            </summary>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.FlagMessage(System.Int64,Lesnikowski.Client.IMAP.Flag)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.UnflagMessage(System.Int64,Lesnikowski.Client.IMAP.Flag)"/> <see cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageSeen(System.Int64)"/> <see cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageUnseen(System.Int64)"/>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.FlagMessage(System.Collections.Generic.List{System.Int64},Lesnikowski.Client.IMAP.Flag)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.UnflagMessage(System.Collections.Generic.List{System.Int64},Lesnikowski.Client.IMAP.Flag)"/> <see cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageSeen(System.Collections.Generic.List{System.Int64})"/> <see cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageUnseen(System.Collections.Generic.List{System.Int64})"/>
            <param name="messageNumber">1 based message number.</param>
            <returns>List containing flags of the specified message.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetFlagsByUID(System.Collections.Generic.List{System.Int64})">
            <summary>
            Gets flags for the specified email messages form server. Does not set the <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/>.
            </summary>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.FlagMessageByUID(System.Int64,Lesnikowski.Client.IMAP.Flag)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.UnflagMessageByUID(System.Int64,Lesnikowski.Client.IMAP.Flag)"/> <see cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageSeenByUID(System.Int64)"/> <see cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Int64)"/>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.FlagMessageByUID(System.Collections.Generic.List{System.Int64},Lesnikowski.Client.IMAP.Flag)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.UnflagMessageByUID(System.Collections.Generic.List{System.Int64},Lesnikowski.Client.IMAP.Flag)"/> <see cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageSeenByUID(System.Collections.Generic.List{System.Int64})"/> <see cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Collections.Generic.List{System.Int64})"/>
            <param name="uids">Unique-ids of the messages to get flags for.</param>
            <returns>List containing flags of the specified messages.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetFlags(System.Collections.Generic.List{System.Int64})">
            <summary>
            Gets flags for the specified email messages form server. Does not set the <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/>.
            </summary>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.FlagMessage(System.Int64,Lesnikowski.Client.IMAP.Flag)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.UnflagMessage(System.Int64,Lesnikowski.Client.IMAP.Flag)"/> <see cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageSeen(System.Int64)"/> <see cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageUnseen(System.Int64)"/>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.FlagMessage(System.Collections.Generic.List{System.Int64},Lesnikowski.Client.IMAP.Flag)"/> <seealso cref="M:Lesnikowski.Client.IMAP.Imap.UnflagMessage(System.Collections.Generic.List{System.Int64},Lesnikowski.Client.IMAP.Flag)"/> <see cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageSeen(System.Collections.Generic.List{System.Int64})"/> <see cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageUnseen(System.Collections.Generic.List{System.Int64})"/>
            <param name="messageNumbers">1 based message numbers.</param>
            <returns>List containing flags of the specified messages.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.FlagMessage(System.Int64,Lesnikowski.Client.IMAP.Flag)">
            <summary>
            Flags the message with specified flag.
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <param name="flag">Flag to be added. For specifying system flags you can use static fields e.g. <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/>.</param>
            <remarks>
            Exchange 2007 and 2010 do not support custom flags (keywords).
            </remarks>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.FlagMessage(System.Collections.Generic.List{System.Int64},Lesnikowski.Client.IMAP.Flag)">
            <summary>
            Flags the messages with specified flag.
            </summary>
            <param name="messageNumbers">1 based message numbers.</param>
            <param name="flag">Flag to be added. For specifying system flags you can use static fields e.g. <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/>.</param>
            <remarks>
            Exchange 2007 and 2010 do not support custom flags (keywords).
            </remarks>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.FlagMessageByUID(System.Int64,Lesnikowski.Client.IMAP.Flag)">
            <summary>
            Flags the message with specified flag.
            </summary>
            <param name="uid">Unique-id of the message to flag.</param>
            <param name="flag">Flag to be added. For specifying system flags you can use static fields e.g. <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/>.</param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.FlagMessageByUID(System.Collections.Generic.List{System.Int64},Lesnikowski.Client.IMAP.Flag)">
            <summary>
            Flags the messages with specified flag.
            </summary>
            <param name="uids">Unique-id of the messages to flag.</param>
            <param name="flag">Flag to be added. For specifying system flags you can use static fields e.g. <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/>.</param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.UnflagMessage(System.Int64,Lesnikowski.Client.IMAP.Flag)">
            <summary>
            Removes specified flag from the message.
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <param name="flag">Flag to be removed. For specifying system flags you can use static fields e.g. <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/>.</param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.UnflagMessageByUID(System.Int64,Lesnikowski.Client.IMAP.Flag)">
            <summary>
            Removes specified flag from the message.
            </summary>
            <param name="uid">Unique-id of the message to remove flag from.</param>
            <param name="flag">Flag to be removed. For specifying system flags you can use static fields e.g. <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/>.</param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.UnflagMessage(System.Collections.Generic.List{System.Int64},Lesnikowski.Client.IMAP.Flag)">
            <summary>
            Removes specified flag from messages.
            </summary>
            <param name="messageNumbers">1 based message number.</param>
            <param name="flag">Flag to be removed. For specifying system flags you can use static fields e.g. <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/>.</param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.UnflagMessageByUID(System.Collections.Generic.List{System.Int64},Lesnikowski.Client.IMAP.Flag)">
            <summary>
            Removes specified flag from messages.
            </summary>
            <param name="uids">Unique-id of the message to remove flag from.</param>
            <param name="flag">Flag to be removed. For specifying system flags you can use static fields e.g. <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/>.</param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.MarkMessageSeen(System.Int64)">
            <summary>
            Flags message with <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageUnseen(System.Int64)"/>
            <param name="messageNumber">1 based message number.</param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.MarkMessageSeen(System.Collections.Generic.List{System.Int64})">
            <summary>
            Flags message with <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageUnseen(System.Collections.Generic.List{System.Int64})"/>
            <param name="messageNumbers">1 based message numbers.</param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.MarkMessageUnseen(System.Int64)">
            <summary>
            Removes <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> flag from the message.
            </summary>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageSeen(System.Int64)"/>
            <param name="messageNumber">1 based message number.</param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.MarkMessageUnseen(System.Collections.Generic.List{System.Int64})">
            <summary>
            Removes <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> flag from the message.
            </summary>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageSeen(System.Collections.Generic.List{System.Int64})"/>
            <param name="messageNumbers">1 based message numbers.</param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.MarkMessageSeenByUID(System.Int64)">
            <summary>
            Flags message with <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Int64)"/>
            <param name="uid">Unique-id of the message.</param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.MarkMessageSeenByUID(System.Collections.Generic.List{System.Int64})">
            <summary>
            Flags message with <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Collections.Generic.List{System.Int64})"/>
            <param name="uids">Unique-ids of the messages.</param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Int64)">
            <summary>
            Removes <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> flag from the message. 
            </summary>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageSeenByUID(System.Int64)"/>
            <param name="uid">Unique-id of the message.</param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Collections.Generic.List{System.Int64})">
            <summary>
            Removes <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> flag from the message. 
            </summary>
            <seealso cref="M:Lesnikowski.Client.IMAP.Imap.MarkMessageSeenByUID(System.Collections.Generic.List{System.Int64})"/>
            <param name="uids">Unique-ids of the messages.</param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.DeleteMessage(System.Int64)">
            <summary>
            Deletes message specified by the <paramref name="messageNumber"/>. Issues EXPUNGE command after.
            </summary>
            <param name="messageNumber">1 based message number.</param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.DeleteMessage(System.Collections.Generic.List{System.Int64})">
            <summary>
            Deletes messages specified by the <paramref name="messageNumbers"/>. Issues EXPUNGE command after.
            </summary>
            <param name="messageNumbers">1 based message numbers.</param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.DeleteMessageByUID(System.Int64)">
            <summary>
            Deletes message specified by the <paramref name="uid"/>. Issues EXPUNGE command after.
            </summary>
            <param name="uid">Unique-id of the message to flag.</param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.DeleteMessageByUID(System.Collections.Generic.List{System.Int64})">
            <summary>
            Deletes message specified by the <paramref name="uids"/>. Issues EXPUNGE command after.
            </summary>
            <param name="uids">Unique-id of the messages to flag.</param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.Copy(System.Int64,System.String)">
            <summary>
            Copies the specified message to the specified destination folder (mailbox).
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="messageNumber">1 based message number.</param>
            <param name="destinationFolder">Destination folder (mailbox).</param>
            <returns>Unique-id of the copied message (<c>Null</c> if the server does not support UIDPLUS extension)</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.Copy(System.Collections.Generic.List{System.Int64},System.String)">
            <summary>
            Copies the specified messages to the specified destination folder (mailbox).
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="messageNumbers">1 based message numbers.</param>
            <param name="destinationFolder">Destination folder (mailbox).</param>
            <returns>Unique-ids of the copied messages (Empty if the server does not support UIDPLUS extension)</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.CopyByUID(System.Int64,System.String)">
            <summary>
            Copies the specified message to the specified destination folder (mailbox).
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="uid">Unique-id of the message.</param>
            <param name="destinationFolder">Destination folder (mailbox).</param>
            <returns>Unique-id of the copied message (<c>Null</c> if the server does not support UIDPLUS extension)</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.CopyByUID(System.Collections.Generic.List{System.Int64},System.String)">
            <summary>
            Copies the specified messages to the specified destination folder (mailbox).
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="uids">Unique-ids of the messages.</param>
            <param name="destinationFolder">Destination folder (mailbox).</param>
            <returns>Unique-ids of the copied messages (Empty if the server does not support UIDPLUS extension)</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.Move(System.Int64,System.String)">
            <summary>
            Moves the specified message to the specified destination folder (mailbox).
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in mailbox folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="messageNumber">1 based message number.</param>
            <param name="destinationFolder">Destination folder (mailbox).</param>
            <returns>Unique-id of the moved message (<c>Null</c> if the server does not support UIDPLUS extension)</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.Move(System.Collections.Generic.List{System.Int64},System.String)">
            <summary>
            Moves the specified messages to the specified destination folder (mailbox).
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in mailbox folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="messageNumbers">1 based message numbers.</param>
            <param name="destinationFolder">Destination folder (mailbox).</param>
            <returns>Unique-ids of the moved messages (Empty if the server does not support UIDPLUS extension)</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.MoveByUID(System.Int64,System.String)">
            <summary>
            Moves the specified message to the specified destination folder (mailbox).
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in mailbox folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="uid">Unique-id of the message.</param>
            <param name="destinationFolder">Destination folder (mailbox).</param>
            <returns>Unique-id of the moved message (<c>Null</c> if the server does not support UIDPLUS extension)</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.MoveByUID(System.Collections.Generic.List{System.Int64},System.String)">
            <summary>
            Moves the specified messages to the specified destination folder (mailbox).
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in mailbox folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="uids">Unique-ids of the messages.</param>
            <param name="destinationFolder">Destination folder (mailbox).</param>
            <returns>Unique-ids of the moved messages (empty if server does not support UIDPLUS extension)</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetNamespaces">
            <summary>
            Lists all namespaces available for this user.
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <returns>Folder list.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.SubscribeFolder(System.String)">
            <summary>
            Subscribes user to specified folder.
            </summary>
            <param name="folder">Folder name to subscribe to.</param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.UnsubscribeFolder(System.String)">
            <summary>
            Unsubscribes user from specified folder.
            </summary>
            <param name="folder">Folder name to unsubscribe from.</param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetSubscribedFolders">
            <summary>
            Lists all folders (mailboxes) user is subscribed to.
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <returns>Folder list.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetSubscribedFolders(System.String)">
            <summary>
            Lists all folders (mailboxes) user is subscribed to starting from specified folder.
            </summary>
            <param name="folder">Parent folder (mailbox) to start search from.</param>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <returns>Folder list.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetFolders">
            <summary>
            Lists all folders (mailboxes) starting from root.
            Folders starting with '#' are usually shared between users. You can use <see cref="M:Lesnikowski.Client.IMAP.Imap.GetNamespaces"/> to obtain information about shared folders.
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <returns>Folder list.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetFolders(System.String)">
            <summary>
            Lists all folders (mailboxes) under specified folder (mailbox). 
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="folder">Parent folder (mailbox) to start search from.</param>
            <returns>Folder list.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetFoldersOneLevelDown">
            <summary>
            Lists folders (mailboxes) starting from root. Only direct children are returned.
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <returns>Folder list.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.GetFoldersOneLevelDown(System.String)">
            <summary>
            Lists all folders (mailboxes) under specified folder (mailbox). Only direct children are returned.
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="folder">Parent folder (mailbox) to start search from.</param>
            <returns>Folder list.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.CreateFolder(System.String)">
            <summary>
             Creates a folder (mailbox) with the given name.
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="folder">Folder name.</param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.DeleteFolder(System.String)">
            <summary>
             Permanently removes a folder (mailbox) with the given name.
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="folder">Folder name.</param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.RenameFolder(System.String,System.String)">
            <summary>
             Changes the name of a folder (mailbox).
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="existingFolder">Existing folder name.</param>
            <param name="newFolder">New folder name.</param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.UploadMessage(System.String,System.String)">
            <summary>
            Uploads message to specified folder (mailbox).  Uploaded message has <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> set.
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <returns>Unique-id of the uploaded message (<c>Null</c> if server does not support UIDPLUS extension)</returns>
            <param name="folder">Folder name.</param>
            <param name="eml">Message to upload.</param>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.UploadMessage(System.String,Lesnikowski.Mail.IMail)">
            <summary>
            Uploads message to specified folder (mailbox). Uploaded message has <see cref="F:Lesnikowski.Client.IMAP.Flag.Seen"/> set.
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="folder">Folder name.</param>
            <param name="mail">Message to upload.</param>
            <returns>Unique-id of the uploaded message (<c>Null</c> if server does not support UIDPLUS extension)</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.Idle">
            <summary>
            Sends IDLE command. This method hangs until server announces new event in current folder
            or until <see cref="M:Lesnikowski.Client.IMAP.Imap.StopIdle"/> command is issued.
            </summary>
            <returns>New folder status.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.Idle(System.TimeSpan)">
            <summary>
            Sends IDLE command. 
            This method hangs until server announces new event in current folder
            or until <see cref="M:Lesnikowski.Client.IMAP.Imap.StopIdle"/> command is issued.
            </summary>
            <param name="timeout">Specifies the timeout after which IDLE command is reissued (this prevents server from disconnecting).</param>
            <returns>New folder status.</returns>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.StopIdle">
            <summary>
            Stops IDLE command started by <see cref="M:Lesnikowski.Client.IMAP.Imap.Idle"/> or <see cref="M:Lesnikowski.Client.IMAP.Imap.Idle(System.TimeSpan)"/> method.
            This method is thread-safe.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.Imap.SendYahooIDCommand">
            <summary>
            Sends Yahoo's specific ID command ('ID ("GUID" "1")'). 
            This command is required to access yahoo.
            This command is sent automatically on connection when the host address contains "yahoo" string.
            </summary>
            <returns>IMAP response object.</returns>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.Imap.CommandTagLength">
            <summary>
            Gets or set the length of the generated unique command identifier
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.IMAP.FolderStatus">
            <summary>
            Represents folder (mailbox) status: message counts, available flags.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.FolderStatus.MessageCount">
            <summary>
            Total message count in the mailbox.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.FolderStatus.Recent">
            <summary>
            Number of messages with <see cref="F:Lesnikowski.Client.IMAP.Flag.Recent"/> flag set
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.FolderStatus.UIDValidity">
            <summary>
            UIDVALIDITY
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.FolderStatus.Flags">
            <summary>
            Flags defined in the mailbox. 
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.IMAP.ImapResponseStatus">
            <summary>
            Represents status of IMAP response.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.IMAP.ImapResponseStatus.Negative">
            <summary> Received "NO" response. </summary>
        </member>
        <member name="F:Lesnikowski.Client.IMAP.ImapResponseStatus.Positive">
            <summary> Received "OK" response. </summary>
        </member>
        <member name="F:Lesnikowski.Client.IMAP.ImapResponseStatus.Error">
            <summary> Received "BAD" response. </summary>
        </member>
        <member name="F:Lesnikowski.Client.IMAP.ImapResponseStatus.SendMoreData">
            <summary> Received more data response ('+'). </summary>
        </member>
        <member name="T:Lesnikowski.Client.IMAP.SimpleImapQuery">
            <summary>
            Simple IMAP query that can be used instead joining several criteria defined in <see cref="T:Lesnikowski.Client.IMAP.Expression"/> class.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.IMAP.SimpleImapQuery.Render(System.Text.StringBuilder)">
            <summary>
            Renders current criteria object to <see cref="T:System.Text.StringBuilder"/>
            </summary>
            <param name="writer">Writer to render on.</param>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.SimpleImapQuery.Subject">
            <summary>
            Messages that contain the specified string in the envelope structure's SUBJECT field.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.SimpleImapQuery.Body">
            <summary>
             Messages that contain the specified string in the body of the message.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.SimpleImapQuery.From">
            <summary>
            Messages that contain the specified string in the envelope structure's FROM field.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.SimpleImapQuery.To">
            <summary>
             Messages that contain the specified string in the envelope structure's TO field.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.SimpleImapQuery.Cc">
            <summary>
            Messages that contain the specified string in the envelope structure's CC field.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.SimpleImapQuery.Bcc">
            <summary>
             Messages that contain the specified string in the envelope structure's BCC field.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.SimpleImapQuery.Answered">
            <summary>
            Messages with the \Answered flag set.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.SimpleImapQuery.Flagged">
            <summary>
            Messages with the \Flagged flag set.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.SimpleImapQuery.Deleted">
            <summary>
            Messages with the \Deleted flag set.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.SimpleImapQuery.Draft">
            <summary>
            Messages with the \Draft flag set.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.SimpleImapQuery.New">
            <summary>
            Messages that have the \Recent flag set but not the \Seen flag. This is functionally equivalent to "(RECENT UNSEEN)".
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.SimpleImapQuery.Old">
            <summary>
            Messages that do not have the \Recent flag set.  This is functionally equivalent to "NOT RECENT" (as opposed to "NOT NEW").
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.SimpleImapQuery.Recent">
            <summary>
             Messages that have the \Recent flag set.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.SimpleImapQuery.Seen">
            <summary>
            Messages that have the \Seen flag set.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.SimpleImapQuery.Unanswered">
            <summary>
            Messages that do not have the \Answered flag set.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.SimpleImapQuery.Undeleted">
            <summary>
            Messages that do not have the \Deleted flag set.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.SimpleImapQuery.Undraft">
            <summary>
            Messages that do not have the \Draft flag set.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.SimpleImapQuery.Unflagged">
            <summary>
            Messages that do not have the \Flagged flag set.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.SimpleImapQuery.Unseen">
            <summary>
            Messages that do not have the \Seen flag set.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.SimpleImapQuery.LargerThen">
            <summary>
            Messages with an [RFC-2822] size larger than the specified number of octets.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.IMAP.SimpleImapQuery.SmallerThen">
            <summary>
            Messages with an [RFC-2822] size smaller than the specified number of octets.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.ISmtpMail">
            <summary>
            Interface for providing sender, recipient and raw message data sent via SMTP protocol..
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.ISmtpMail.RenderEml">
            <summary>
            Returns message data that can be send using SMTP protocol.
            </summary>
            <returns>Message converted to string.</returns>
        </member>
        <member name="P:Lesnikowski.Client.ISmtpMail.From">
            <summary>
            From email address.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.ISmtpMail.To">
            <summary>
            Gets the collection of email addresses this message will be sent to.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.MailMessageAdapter.RenderEml">
            <summary>
            Returns ready-to-send string from this message.
            </summary>
            <returns>Message converted to string.</returns>
        </member>
        <member name="M:Lesnikowski.Encoding2.ImapUTF7.Decode(System.String)">
            <summary>
            Decodes IMAP modified UTF7 encoded data. Defined in RFC 3501 5.1.3.  Mailbox International Naming Convention.
            </summary>
            <param name="text">Text to encode.</param>
            <returns></returns>        
        </member>
        <member name="M:Lesnikowski.Encoding2.ImapUTF7.Encode(System.String)">
            <summary>
            Encodes specified data with IMAP modified UTF7 encoding. Defined in RFC 3501 5.1.3.  Mailbox International Naming Convention.
            </summary>
            <param name="text">Text to encode.</param>
            <returns></returns>
        </member>
        <member name="T:Lesnikowski.Mail.HtmlException">
            <summary>
            Represents an error that occured during html parsing.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Html2Text.HtmlTokenParser.MoveOneForward">
            <summary>
            Moves index one step forward, this method is aware of the escaped chars.
            </summary>
            <returns>False if end is reached, <c>true</c> if we can move forward again.</returns>
        </member>
        <member name="T:Lesnikowski.Mail.IMail">
            <summary>
            This class provides simple access to email message.
            Use <see cref="T:Lesnikowski.Mail.MailBuilder"/> class to create this object.
            It is possible to access entire MIME tree using <see cref="T:Lesnikowski.Mail.MimeDocument"/> property.
            </summary>
            <seealso cref="M:Lesnikowski.Mail.MailBuilder.CreateFromEml(System.String)"/>
            <seealso cref="M:Lesnikowski.Mail.MailBuilder.CreateFromEmlFile(System.String)"/>
        </member>
        <member name="M:Lesnikowski.Mail.IMail.CheckSignature(System.Boolean)">
            <summary>
            Verifies the digital signatures on the signed CMS/PKCS #7 message and, optionally, validates the signers' certificates.
            Checks also if the content was signed by the person that sent it.
            </summary>
            <param name="verifySignatureOnly">
            A System.Boolean value that specifies whether only the digital signatures are verified 
            without the signers' certificates being validated. 
            If <paramref name="verifySignatureOnly"/> is <c>true</c>, only the digital signatures are verified. 
            If it is <c>false</c>, the digital signatures are verified, the signers' certificates are validated, 
            and the purposes of the certificates are validated. 
            The purposes of a certificate are considered valid if the certificate has no key usage or 
            if the key usage supports digital signatures or non repudiation.
            </param>
        </member>
        <member name="M:Lesnikowski.Mail.IMail.CheckDKIMSignature(System.Security.Cryptography.RSACryptoServiceProvider)">
            <summary>
            Verifies the DKIM (DomainKeys Identified Mail) digital signature on this message.
            </summary>
            <param name="rsa">RSA class containing public key used for signature validation.</param>
            <returns>True if signature was valid, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.IMail.CheckDKIMSignature">
            <summary>
            Verifies the DKIM (DomainKeys Identified Mail) digital signature on this message.
            Queries DNS server to get the public key.
            </summary>
            <returns>True if signature was valid, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.IMail.GetSignedCms">
            <summary>
            Gets the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms"/> object for signed emails.
            </summary>
            <returns><see cref="T:System.Security.Cryptography.Pkcs.SignedCms"/> object.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.IMail.ReSignWith(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Computes the signature again.
            <param name="certificate">certificate used for signing.</param>
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.IMail.DKIMSign(System.Security.Cryptography.RSACryptoServiceProvider,System.String,System.String)">
            <summary>
            Signs this message using DKIM (DomainKeys Identified Mail) signature.
            </summary>
            <param name="rsa">RSA class containing private key used for signing.</param>
            <param name="publicKeyDnsSelector">DNS public key domain selector.</param>
            <param name="publicKeyDnsDomain">DNS public key domain.</param>
        </member>
        <member name="M:Lesnikowski.Mail.IMail.DKIMSign(System.Security.Cryptography.RSACryptoServiceProvider,Lesnikowski.Mail.DKIM.DKIMSignatureInfo)">
            <summary>
            Signs this message using DKIM (DomainKeys Identified Mail) signature.
            </summary>
            <param name="rsa">RSA class containing private key used for signing.</param>
            <param name="signatureInfo">DKIM signature information.</param>
        </member>
        <member name="M:Lesnikowski.Mail.IMail.RenderEml">
            <summary>
            Renders mail message. 
            </summary>
            <returns>Message in eml format.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.IMail.Save(System.String)">
            <summary>
            Saves email using eml format to specified file.
            </summary>
            <param name="path">The file to write to.</param>
        </member>
        <member name="M:Lesnikowski.Mail.IMail.GetTextFromHtml">
            <summary>
            Extracts plain text from <see cref="P:Lesnikowski.Mail.IMail.HtmlDataString"/>.
            This text may be different from what is actually stored in the email's <see cref="P:Lesnikowski.Mail.IMail.TextDataString"/>.
            </summary>
            <returns>Body of the HTML converted to plain text.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.IMail.SaveHtmlAs(System.String)">
            <summary>
            Saves HTML version of the message as regular HTML file,
            also saves all visual elements as files to the same folder.
            </summary>
            <param name="path">Name of the resulting html file (e.g. "c:\\example\\email.html").</param>
        </member>
        <member name="M:Lesnikowski.Mail.IMail.PriorityHigh">
            <summary>  
            Sets <see cref="P:Lesnikowski.Mail.IMail.XPriority"/> to 1, <see cref="P:Lesnikowski.Mail.IMail.Priority"/> to <see cref="F:Lesnikowski.Mail.Headers.Constants.MimePriority.Urgent"/> and
            <see cref="P:Lesnikowski.Mail.IMail.Importance"/> to <see cref="F:Lesnikowski.Mail.Headers.Constants.MimeImportance.High"/>
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.IMail.PriorityLow">
            <summary>  
            Sets <see cref="P:Lesnikowski.Mail.IMail.XPriority"/> to 5, <see cref="P:Lesnikowski.Mail.IMail.Priority"/> to <see cref="F:Lesnikowski.Mail.Headers.Constants.MimePriority.NonUrgent"/> and
            <see cref="P:Lesnikowski.Mail.IMail.Importance"/> to <see cref="F:Lesnikowski.Mail.Headers.Constants.MimeImportance.Low"/>
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.IMail.RequestReadReceipt">
            <summary> 
            This method copies Sender (if specified) or From list to all read receipts lists.
            Read receipts are stored using <seealso cref="P:Lesnikowski.Mail.IMail.NotificationTo"/>, 
            <seealso cref="P:Lesnikowski.Mail.IMail.ReturnReceiptTo"/> or <seealso cref="P:Lesnikowski.Mail.IMail.XConfirmReadingTo"/> header.
            </summary>
            <remarks>
            Read receipt requests may not be always honored because:
            <list>
            <item>A mail client may not recognize the special Disposition-Notification-To header.</item>
            <item>A mail client may not implement that functionality.</item>
            <item>The end user may have that functionality turned off.</item>
            <item>The end user may optionally not choose to send one for your particular email.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Lesnikowski.Mail.IMail.GetGenericPriority">
            <summary>
            Gets message priority.
            It checks following headers in the specified order: <see cref="P:Lesnikowski.Mail.IMail.Priority"/>, <see cref="P:Lesnikowski.Mail.IMail.Importance"/>, <see cref="P:Lesnikowski.Mail.IMail.XPriority"/>.
            </summary>
            <returns>Priority of the message.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.IMail.ReplyToAll(Lesnikowski.Mail.Headers.MailBox)">
            <summary>
            Creates <see cref="T:Lesnikowski.Mail.MailBuilder"/> configured for reply to all.
            <see cref="P:Lesnikowski.Mail.MailBuilder.From"/>, <see cref="P:Lesnikowski.Mail.MailBuilder.To"/> and <see cref="P:Lesnikowski.Mail.MailBuilder.Cc"/> collections are already set. Use <see cref="M:Lesnikowski.Mail.MailBuilder.SetHtmlData(System.String)"/> or <see cref="M:Lesnikowski.Mail.MailBuilder.SetTextData(System.String)"/> to specify reply body.
            </summary>
            <param name="from">From mailbox.</param>
            <returns>MailBuilder that can be used to create reply.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.IMail.ReplyToAll(System.String)">
            <summary>
            Creates <see cref="T:Lesnikowski.Mail.MailBuilder"/> configured for reply to all.
            <see cref="P:Lesnikowski.Mail.MailBuilder.From"/>, <see cref="P:Lesnikowski.Mail.MailBuilder.To"/> and <see cref="P:Lesnikowski.Mail.MailBuilder.Cc"/> collections are already set. Use <see cref="M:Lesnikowski.Mail.MailBuilder.SetHtmlData(System.String)"/> or <see cref="M:Lesnikowski.Mail.MailBuilder.SetTextData(System.String)"/> to specify reply body.
            </summary>
            <param name="fromAddress">From email address.</param>
            <returns>MailBuilder that can be used to create reply.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.IMail.Reply(Lesnikowski.Mail.Headers.MailBox)">
            <summary>
            Creates <see cref="T:Lesnikowski.Mail.MailBuilder"/> configured for reply.
            <see cref="P:Lesnikowski.Mail.MailBuilder.From"/>, <see cref="P:Lesnikowski.Mail.MailBuilder.To"/> and <see cref="P:Lesnikowski.Mail.MailBuilder.Cc"/> collections are already set. Use <see cref="M:Lesnikowski.Mail.MailBuilder.SetHtmlData(System.String)"/> or <see cref="M:Lesnikowski.Mail.MailBuilder.SetTextData(System.String)"/> to specify reply body.
            </summary>
            <param name="from">From mailbox.</param>
            <returns><see cref="T:Lesnikowski.Mail.MailBuilder"/> that can be used to create reply.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.IMail.Reply(System.String)">
            <summary>
            Creates <see cref="T:Lesnikowski.Mail.MailBuilder"/> configured for reply.
            <see cref="P:Lesnikowski.Mail.MailBuilder.From"/>, <see cref="P:Lesnikowski.Mail.MailBuilder.To"/> and <see cref="P:Lesnikowski.Mail.MailBuilder.Cc"/> collections are already set. Use <see cref="M:Lesnikowski.Mail.MailBuilder.SetHtmlData(System.String)"/> or <see cref="M:Lesnikowski.Mail.MailBuilder.SetTextData(System.String)"/> to specify reply body.
            </summary>
            <param name="fromAddress">From email address.</param>
            <returns><see cref="T:Lesnikowski.Mail.MailBuilder"/> that can be used to create reply.</returns>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.Document">
            <summary>
            Gets the entire <see cref="T:Lesnikowski.Mail.MimeDocument"/> object associated with this object.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.Subject">
            <summary>
            Gets or sets the subject of the message ('Subject' field). 
            May be <c>null</c>.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.MessageID">
            <summary>
            Gets or sets id of the message ('Message-ID' field).
            Without surrounding brackets (&lt; and &gt;)
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.InReplyTo">
            <summary>
            Gets or sets id of the parent message ('In-Reply-To' field).
            Without surrounding brackets (&lt; and &gt;)
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.References">
            <summary>
            Gets ids of the referenced messages. Without surrounding brackets (&lt; and &gt;).
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.From">
            <summary>
            Gets the author(s) of the message ('From' field).
            This collection can be modified.
            If it's empty, email message is NOT RFC 2822 compliant.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.Sender">
            <summary>
            Gets or sets mailbox of the agent responsible for the actual transmission ('Sender' field).
            If 'Sender' is <c>null</c> you should use <see cref="P:Lesnikowski.Mail.IMail.From"/> property.
            </summary>
            <remarks>
            'Sender' field is not required if 'From' property contains only one <see cref="T:Lesnikowski.Mail.Headers.MailBox"/>.
            'Sender' property is filled when message is from more than one person ('From' contains more than one mailbox).
            In such case it is needed to provide information which mailbox is responsible for the actual transmission.
            </remarks>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.ReplyTo">
            <summary>
            Gets 'Reply-to' field, mailbox(es) to which the author of the message suggests that replies be sent.
            This collection can be modified.
            May be empty.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.To">
            <summary>
            Gets 'To' field, address(es) of the primary recipient(s) of the message.
            This collection can be modified.
            May be empty.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.Cc">
            <summary>
            Gets the addresses of others who are to receive the message ('CC', Carbon Copy field), 
            even tough the content of the message may not be directed at them. 
            This collection can be modified.
            May be empty.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.Bcc">
            <summary>
            Gets the addresses of others who are to receive the message ('BCC', Blind Carbon Copy field ), 
            even tough the content of the message may not be directed at them. 
            This collection can be modified. May be empty.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.NotificationTo">
            <summary>
            Gets or sets the 'Disposition-Notification-To' field.
            This collection can be modified. May be empty.
            </summary>
            <seealso cref="M:Lesnikowski.Mail.IMail.RequestReadReceipt"/>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.ReturnReceiptTo">
            <summary>
            Gets or sets the 'Return-Receipt-To' field.
            This collection can be modified. May be empty.
            </summary>
            <seealso cref="M:Lesnikowski.Mail.IMail.RequestReadReceipt"/>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.XConfirmReadingTo">
            <summary>
            Gets or sets the 'X-Confirm-Reading-To' field.
            This collection can be modified. May be empty.
            </summary>
            <seealso cref="M:Lesnikowski.Mail.IMail.RequestReadReceipt"/>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.Date">
            <summary>
            Gets or sets the send date of the message ('Date' field). 
            May be <c>null</c> in case of parsing error.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.Importance">
            <summary>
            Gets or sets the importance of the message ('Importance' field).
            Consider using <see cref="M:Lesnikowski.Mail.IMail.GetGenericPriority"/> as it also checks <see cref="P:Lesnikowski.Mail.IMail.Priority"/> and <see cref="P:Lesnikowski.Mail.IMail.XPriority"/> properties.
            </summary>
            <seealso cref="M:Lesnikowski.Mail.IMail.PriorityHigh"/> <seealso cref="M:Lesnikowski.Mail.IMail.PriorityLow"/>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.Priority">
            <summary>
            Gets or sets the priority of the message ('Priority' field).
            Consider using <see cref="M:Lesnikowski.Mail.IMail.GetGenericPriority"/> as it also checks <see cref="P:Lesnikowski.Mail.IMail.Importance"/> and <see cref="P:Lesnikowski.Mail.IMail.XPriority"/> properties.
            </summary>
            <seealso cref="M:Lesnikowski.Mail.IMail.PriorityHigh"/> <seealso cref="M:Lesnikowski.Mail.IMail.PriorityLow"/>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.XPriority">
            <summary>
            Gets or sets the X-Priority of the message ('X-Priority' field) (Outlook specific).
            Value ranges from "1" to "5" where "1" is the highest priority, "3" is normal, and "5" is the lowest priority.
            Consider using <see cref="M:Lesnikowski.Mail.IMail.GetGenericPriority"/> as it also checks <see cref="P:Lesnikowski.Mail.IMail.Priority"/> and <see cref="P:Lesnikowski.Mail.IMail.Importance"/> properties.
            </summary>
            <seealso cref="M:Lesnikowski.Mail.IMail.PriorityHigh"/> <seealso cref="M:Lesnikowski.Mail.IMail.PriorityLow"/>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.Sensitivity">
            <summary>
            Gets or sets the Sensitivity of the message ('Sensitivity' field)
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.TextData">
            <summary>
            Gets the object representing 'text/plain' body of the message. May be <c>null</c> if no text/plain data is present. 
            You may use <see cref="P:Lesnikowski.Mail.IMail.TextDataString"/> as a shortcut to retrieve plain text data.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.TextDataString">
            <summary>
            Gets plain text data from this email.
            For some HTML emails plain text may be not defined, you can use <see cref="M:Lesnikowski.Mail.IMail.GetTextFromHtml"/> method to extract plain text from HTML content.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.HtmlData">
            <summary>
            Gets the object representing 'text/html' body of the message. May be <c>null</c> if no HTML data is present.
            You may use <see cref="P:Lesnikowski.Mail.IMail.HtmlDataString"/> as a shortcut to retrieve HTML data.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.HtmlDataString">
            <summary>
            Gets HTML data of this email. You can use <see cref="M:Lesnikowski.Mail.IMail.GetTextFromHtml"/> method to extract plain text from HTML content.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.Attachments">
            <summary>
            Gets the list of all attachments. 
            It contains <see cref="F:Lesnikowski.Mail.Headers.Constants.MimeDisposition.Attachment"/> and <see cref="F:Lesnikowski.Mail.Headers.Constants.MimeDisposition.Inline"/> attachments.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.Visuals">
            <summary>
            Gets the list of all visual elements (<see cref="P:Lesnikowski.Mail.MimeBase.ContentDisposition"/>.Value equal to <see cref="F:Lesnikowski.Mail.Headers.Constants.MimeDisposition.Inline"/>).
            You can use Visuals[string cid] to find the picture embedded in the HTML body using its content id ('content-id' header field).
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.NonVisuals">
            <summary>
            Gets the list of all non visual elements (<see cref="P:Lesnikowski.Mail.MimeBase.ContentDisposition"/>.Value equal to <see cref="F:Lesnikowski.Mail.Headers.Constants.MimeDisposition.Attachment"/>).
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.IsSigned">
            <summary>
            Indicates if the message has been signed.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.IsDKIMSigned">
            <summary>
            Indicates if the message has been DKIM (DomainKeys Identified Mail) signed.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.Received">
            <summary>
            List of all 'received' headers added to this message.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.Appointments">
            <summary>
            List of all <see cref="P:Lesnikowski.Mail.IMail.Appointments"/>.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.IMail.DKIMSignatureInfo">
            <summary>
            Gets DKIM signature information.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.MailBuilder">
            <summary>
            Provides methods for <see cref="T:Lesnikowski.Mail.IMail"/> object creation.
            You should use <see cref="M:Lesnikowski.Mail.MailBuilder.CreateFromEml(System.String)"/> if you already have an eml data downloaded via <see cref="T:Lesnikowski.Client.Pop3"/> or <see cref="T:Lesnikowski.Client.IMAP.Imap"/> client.
            You should use other properties and <see cref="M:Lesnikowski.Mail.MailBuilder.Create"/> method to create message that you'll send using <see cref="T:Lesnikowski.Client.Smtp"/> client.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.MailBuilder.#ctor">
            <summary>
            Creates new MailBuilder object.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.MailBuilder.AddCustomHeader(System.String,System.String)">
            <summary>
            Adds custom header that will be added to <see cref="T:Lesnikowski.Mail.IMail"/> object after creation.
            </summary>
            <param name="header">Header name.</param>
            <param name="value">Header value.</param>
        </member>
        <member name="M:Lesnikowski.Mail.MailBuilder.SignWith(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Signs the message.
            </summary>
            <param name="certificate">Certificate used for signing.</param>
        </member>
        <member name="M:Lesnikowski.Mail.MailBuilder.DKIMSign(System.Security.Cryptography.RSACryptoServiceProvider,System.String,System.String)">
            <summary>
            Signs the message using DKIM (DomainKeys Identified Mail) signature.
            </summary>
            <param name="rsa">RSA class containing private key used for signing.</param>
            <param name="publicKeyDnsSelector">DNS public key domain selector.</param>
            <param name="publicKeyDnsDomain">DNS public key domain.</param>
        </member>
        <member name="M:Lesnikowski.Mail.MailBuilder.DKIMSign(System.Security.Cryptography.RSACryptoServiceProvider,Lesnikowski.Mail.DKIM.DKIMSignatureInfo)">
            <summary>
            Signs the message using DKIM (DomainKeys Identified Mail) signature.
            </summary>
            <param name="rsa">RSA class containing private key used for signing.</param>
            <param name="signatureInfo">DKIM signature information.</param>
        </member>
        <member name="M:Lesnikowski.Mail.MailBuilder.PriorityHigh">
            <summary>  
            Sets <see cref="P:Lesnikowski.Mail.MailBuilder.XPriority"/> to 1, <see cref="P:Lesnikowski.Mail.MailBuilder.Priority"/> to <see cref="F:Lesnikowski.Mail.Headers.Constants.MimePriority.Urgent"/> and
            <see cref="P:Lesnikowski.Mail.MailBuilder.Importance"/> to <see cref="F:Lesnikowski.Mail.Headers.Constants.MimeImportance.High"/>
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.MailBuilder.PriorityLow">
            <summary>  
            Sets <see cref="P:Lesnikowski.Mail.MailBuilder.XPriority"/> to 5, <see cref="P:Lesnikowski.Mail.MailBuilder.Priority"/> to <see cref="F:Lesnikowski.Mail.Headers.Constants.MimePriority.NonUrgent"/> and
            <see cref="P:Lesnikowski.Mail.MailBuilder.Importance"/> to <see cref="F:Lesnikowski.Mail.Headers.Constants.MimeImportance.Low"/>
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.MailBuilder.RequestReadReceipt">
            <summary> 
            This method copies Sender (if specified) or From list to all read receipts lists just before email is created (<see cref="M:Lesnikowski.Mail.MailBuilder.Create"/> method).
            Read receipts are stored using <seealso cref="P:Lesnikowski.Mail.IMail.NotificationTo"/>, 
            <seealso cref="P:Lesnikowski.Mail.IMail.ReturnReceiptTo"/> or <seealso cref="P:Lesnikowski.Mail.IMail.XConfirmReadingTo"/> header.
            </summary>
            <remarks>
            Read receipt requests may not be always honored because:
            <list>
            <item>A mail client may not recognize the special Disposition-Notification-To header.</item>
            <item>A mail client may not implement that functionality.</item>
            <item>The end user may have that functionality turned off.</item>
            <item>The end user may optionally not choose to send one for your particular email.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Lesnikowski.Mail.MailBuilder.SetTextData(System.String)">
            <summary>
            Sets plain text data. Please remember that <see cref="M:Lesnikowski.Mail.MailBuilder.SetHtmlData(System.String)"/> will override the plain text set by this method.
            </summary>
            <param name="text">Plain text data.</param>
        </member>
        <member name="M:Lesnikowski.Mail.MailBuilder.SetHtmlData(System.String)">
            <summary>
            Sets HTML data. Extracts plain text from HTML and also sets plain text data.
            </summary>
            <param name="html">HTML data.</param>
        </member>
        <member name="M:Lesnikowski.Mail.MailBuilder.AddAttachment(Lesnikowski.Mail.MimeData)">
            <summary>
            Adds attachment.
            </summary>
            <param name="attachment">Attachment to add.</param>
            <seealso cref="M:Lesnikowski.Mail.MimeFactory.CreateMimeData"/>
        </member>
        <member name="M:Lesnikowski.Mail.MailBuilder.AddAttachment(System.String)">
            <summary>
            Adds attachment. Data are read from the specified file.
            </summary>
            <param name="fileName">Name of the file from which the data will be read.</param>
            <returns>Newly added attachment.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.MailBuilder.AddAttachment(System.Byte[])">
            <summary>
            Adds attachment with specified data.
            </summary>
            <param name="data">Data that will be contained in newly added attachment.</param>
            <returns>Newly added attachment.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.MailBuilder.AddVisual(Lesnikowski.Mail.MimeData)">
            <summary>
            Adds visual object. 
            </summary>
            <param name="visual">Visual attachment to add.</param>
            <seealso cref="M:Lesnikowski.Mail.MimeFactory.CreateMimeData"/>
        </member>
        <member name="M:Lesnikowski.Mail.MailBuilder.AddVisual(System.String)">
            <summary>
            Adds visual object. Data are read from the specified file.
            </summary>
            <param name="fileName">Name of the file from which the data will be read.</param>
            <returns>Newly added visual object.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.MailBuilder.AddVisual(System.Byte[])">
            <summary>
            Adds visual object with specified data.
            </summary>
            <param name="data">Data that will be contained in newly added visual object.</param>
            <returns>Newly added visual object.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.MailBuilder.AddAlternative(Lesnikowski.Mail.MimeBase)">
            <summary>
            Adds alternative view for this message.
            </summary>
            <param name="alternativeView">Alternative view to add.</param>
        </member>
        <member name="M:Lesnikowski.Mail.MailBuilder.AddAppointment(Lesnikowski.Mail.Appointments.Appointment)">
            <summary>
            Adds specified appointment as alternative view for this message. 
            </summary>
            <param name="appointment">Appointment to add.</param>
            <returns>Newly created MimeCalendar object.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.MailBuilder.Remove(Lesnikowski.Mail.MimeBase)">
            <summary>
            Removes specified mime object from attachments, visuals and alternatives collections.
            </summary>
            <param name="mime"></param>
        </member>
        <member name="M:Lesnikowski.Mail.MailBuilder.ClearAttachments">
            <summary>
            Clears attachments, visuals and non-visuals collections.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.MailBuilder.Create">
            <summary>
            Creates new <see cref="T:Lesnikowski.Mail.IMail"/> using builder configuration.
            </summary>
            <returns>New <see cref="T:Lesnikowski.Mail.IMail"/> object.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.MailBuilder.CreateFromDocument(Lesnikowski.Mail.MimeDocument)">
            <summary>
            Creates new <see cref="T:Lesnikowski.Mail.IMail"/> using specified MIME document.
            </summary>
            <param name="document">MIME document.</param>
            <returns>New <see cref="T:Lesnikowski.Mail.IMail"/> object.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.MailBuilder.CreateFromEml(System.String)">
            <summary>
            Creates new <see cref="T:Lesnikowski.Mail.IMail"/> using specified eml raw data string.
            </summary>
            <param name="eml">Raw eml data string.</param>
            <returns>New <see cref="T:Lesnikowski.Mail.IMail"/> object.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.MailBuilder.CreateFromEmlFile(System.String)">
            <summary>
            Loads raw eml data from file and creates new <see cref="T:Lesnikowski.Mail.IMail"/> object.
            </summary>
            <remarks>Usually email files have *.eml extensions.</remarks>
            <param name="path">The file to read raw eml data from.</param>
            <returns>New <see cref="T:Lesnikowski.Mail.IMail"/> object.</returns>
        </member>
        <member name="P:Lesnikowski.Mail.MailBuilder.Subject">
            <summary>
            'Subject' field, message's subject.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailBuilder.MessageID">
            <summary>
            'Message-ID' field, message's id. Without surrounding brackets (&lt; and &gt;).
            If not set it is generated automatically.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailBuilder.References">
            <summary>
            'References' field, ids of the referenced messages. Without surrounding brackets (&lt; and &gt;).
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailBuilder.InReplyTo">
            <summary>
            'In-Reply-To' field, message's parent, without surrounding brackets (&lt; and &gt;).
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailBuilder.From">
            <summary>
            'From' field, author(s) of the message.
            If empty, email-message is NOT RFC 2822 compliant.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailBuilder.Sender">
            <summary>
            'Sender' field, mailbox of the agent responsible for the actual transmission.
            If 'Sender' is <c>null</c> use From property.
            </summary>
            <remarks>
            'Sender' field is not required if 'From' property contains only one <see cref="T:Lesnikowski.Mail.Headers.MailBox"/>.
            'Sender' property is filled when message is from more than one person ('From' contains more than one mailbox).
            In such case it is needed to provide information which mailbox is responsible for the actual transmission.
            </remarks>
        </member>
        <member name="P:Lesnikowski.Mail.MailBuilder.ReplyTo">
            <summary>
            'Reply-to' field, mailbox(es) to which the author of the message suggests that replies be sent.
            May be empty.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailBuilder.To">
            <summary>
            'To' field, address(es) of the primary recipient(s) of the message.
            May be empty.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailBuilder.Cc">
            <summary>
            'Cc' field (Carbon copy), addresses of others who are to receive the message, 
            even tough the content of the message may not be directed at them. 
            May be empty.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailBuilder.Bcc">
            <summary>
            'Bcc' field (Blind Carbon copy), addresses of others who are to receive the message, 
            tough the content of the message may not be directed at them. 
            May be empty.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailBuilder.NotificationTo">
            <summary>
            'Disposition-Notification-To' field. May be empty.
            It's easier to use <see cref="M:Lesnikowski.Mail.MailBuilder.RequestReadReceipt"/> method then adding addresses to this property.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailBuilder.ReturnReceiptTo">
            <summary>
            'Return-Receipt-To' field. May be empty.
            It's easier to use <see cref="M:Lesnikowski.Mail.MailBuilder.RequestReadReceipt"/> method then adding addresses to this property.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailBuilder.XConfirmReadingTo">
            <summary>
            'X-Confirm-Reading-To' field. May be empty. 
            It's easier to use <see cref="M:Lesnikowski.Mail.MailBuilder.RequestReadReceipt"/> method then adding addresses to this property.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailBuilder.Date">
            <summary>
            'Date' field, message send date. May be <c>null</c> when not specified or in case of parsing error.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailBuilder.Importance">
            <summary>
            'Importance' field, message's importance.
            It's easier to use <see cref="M:Lesnikowski.Mail.MailBuilder.PriorityHigh"/> or <see cref="M:Lesnikowski.Mail.MailBuilder.PriorityLow"/> methods then setting this field.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailBuilder.Priority">
            <summary>
            'Priority' field, message's priority.
            It's easier to use <see cref="M:Lesnikowski.Mail.MailBuilder.PriorityHigh"/> or <see cref="M:Lesnikowski.Mail.MailBuilder.PriorityLow"/> methods then setting this field.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailBuilder.XPriority">
            <summary>
            'X-Priority' field (Outlook specific).
            Value ranges from "1" to "5" where "1" is the highest priority, "3" is normal, and "5" is the lowest priority.
            It's easier to use <see cref="M:Lesnikowski.Mail.MailBuilder.PriorityHigh"/> or <see cref="M:Lesnikowski.Mail.MailBuilder.PriorityLow"/> methods then setting this field.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailBuilder.Sensitivity">
            <summary>
            'Sensitivity' field, message's sensitivity.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.MimePkcs7Signature">
            <summary>
            Represents Pkcs7-signature.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.MimeData">
            <summary>
            Represents MIME entity which contains raw byte data.
            Please use <see cref="M:Lesnikowski.Mail.MimeFactory.CreateMimeData"/> to create objects of this type.
            </summary>
            <remarks>
            You should use <see cref="T:Lesnikowski.Mail.MimeText"/> when attaching text files.
            </remarks>
        </member>
        <member name="T:Lesnikowski.Mail.MimeBase">
            <summary>
            Implements basic mime entity logic.
            All mime classes, created by <see cref="T:Lesnikowski.Mail.MimeFactory"/> inherit from this class.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.MimeBase.RenderBody(System.Text.StringBuilder)">
            <summary>
            Override this method to render the body.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.MimeBase.ParseBody(System.String)">
            <summary>
            Override this method to parse the body.
            </summary>
            <param name="body">Body to be parsed.</param>
        </member>
        <member name="M:Lesnikowski.Mail.MimeBase.Render(System.Text.StringBuilder)">
            <summary>
            Renders this MIME object.
            </summary>
            <param name="writer"><see cref="T:System.Text.StringBuilder"/> to render on.</param>
        </member>
        <member name="M:Lesnikowski.Mail.MimeBase.ToString">
            <summary>
            Returns content-type of this MIME object.
            </summary>
            <returns>Content-type of this MIME object (e.g. "text/plain").</returns>
        </member>
        <member name="P:Lesnikowski.Mail.MimeBase.ContentType">
            <summary>
            Content type of the body.
            </summary>
            <remarks>
            Content-type "text/plain" should be assumed if
            there is no ContentType or it is unknown.
            </remarks>
        </member>
        <member name="P:Lesnikowski.Mail.MimeBase.ContentTypeHeader">
            <summary>
            Represents 'Content-type' header.
            You can use this class to add additional options to content-type header.
            Use <see cref="P:Lesnikowski.Mail.MimeBase.ContentType"/> to get or set content-type only.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MimeBase.ContentLocation">
            <summary>
            Content location of this mime entity.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MimeBase.ContentId">
            <summary>
            Content-ID of this entity. Without enclosing '&lt;' and '&gt;'.
            You can use <see cref="T:Lesnikowski.Mail.Headers.ContentIdHelper"/> to extract content id from cid url.
            </summary>
            <remarks>E.g. 01@mobile</remarks>
        </member>
        <member name="P:Lesnikowski.Mail.MimeBase.ContentDisposition">
            <summary>
            'Content-Disposition' of the data.
            This object provides information on what you should do with the data.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MimeBase.Headers">
            <summary>
            Collection of mime headers. Keys are always in lower case.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.MimeData.RenderBody(System.Text.StringBuilder)">
            <summary>
            Renders the body.
            </summary>
            <param name="writer"><see cref="T:System.Text.StringBuilder"/> to render on.</param>
        </member>
        <member name="M:Lesnikowski.Mail.MimeData.ParseBody(System.String)">
            <summary>
            Parses the body.
            </summary>
            <param name="body">Body to be parsed.</param>
        </member>
        <member name="M:Lesnikowski.Mail.MimeData.LoadFromFile(System.String)">
            <summary>
            Uploads data from specified file into this <see cref="T:Lesnikowski.Mail.MimeData"/> entity.
            LoadFromFile will always reset <see cref="T:Lesnikowski.Mail.Headers.ContentType"/> to application/octet-stream 
            -or- text/plain in case of <see cref="T:Lesnikowski.Mail.MimeText"/> class.
            </summary>
            <param name="fileName">Path</param>
        </member>
        <member name="M:Lesnikowski.Mail.MimeData.Save(System.String)">
            <summary>
            Creates a new file with the specified name and saves <see cref="P:Lesnikowski.Mail.MimeData.Data"/> into it.
            </summary>
            <param name="fileName">File name</param>
        </member>
        <member name="M:Lesnikowski.Mail.MimeData.Save(System.IO.Stream)">
            <summary>
            Writes <see cref="P:Lesnikowski.Mail.MimeData.Data"/> to specified stream. Stream must be open.
            </summary>
            <param name="stream">Stream to which <see cref="P:Lesnikowski.Mail.MimeData.Data"/> will be written.</param>
        </member>
        <member name="M:Lesnikowski.Mail.MimeData.GetMemoryStream">
            <summary>
            Creates new <see cref="T:System.IO.MemoryStream"/> for accessing <see cref="P:Lesnikowski.Mail.MimeData.Data"/> property.
            </summary>
            <returns>New <see cref="T:System.IO.MemoryStream"/> Object</returns>
        </member>
        <member name="M:Lesnikowski.Mail.MimeData.ChooseContentType(System.String)">
            <summary>
            This method should choose content type based on the opened file name.
            </summary>
            <param name="fileName">Name of the file form which data will be loaded</param>
        </member>
        <member name="P:Lesnikowski.Mail.MimeData.Data">
            <summary>
            Gets or sets byte array contained in this MIME object.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MimeData.FileName">
            <summary>
            Suggested file name (same as <see cref="P:Lesnikowski.Mail.Headers.IContentDisposition.FileName"/> or <see cref="T:Lesnikowski.Mail.Headers.IContentTypeHeader"/>["name"]). 
            May be <c>null</c> or empty. Consider using <see cref="P:Lesnikowski.Mail.MimeData.SafeFileName"/> as it is guaranteed to contain valid file name.
            </summary>
            <remarks>
              It is important that you should not blindly use the suggested
              filename.  The suggested filename SHOULD be checked (and possibly
              changed) to see that it conforms to local file system conventions,
              does not overwrite an existing file, and does not present a security
              problem.
            </remarks>		
        </member>
        <member name="P:Lesnikowski.Mail.MimeData.SafeFileName">
            <summary>
            Suggested file name. All special characters and path are removed. May be <c>null</c> or empty. 
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MimeData.ContentTransferEncoding">
            <summary>
            'Content-transfer-encoding' of the data.
            This object provides information on how the data was encoded for transport purposes.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.MimeCalendar">
            <summary>
            Represents MIME entity containing text/calendar data.
            Please use <see cref="M:Lesnikowski.Mail.MimeFactory.CreateMimeCalendar"/> or <see cref="M:Lesnikowski.Mail.MimeFactory.CreateMimeCalendar(Lesnikowski.Mail.Appointments.Appointment)"/> to create objects of this type.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.MimeText">
            <summary>
            Represents MIME entity containing text data.
            Please use <see cref="M:Lesnikowski.Mail.MimeFactory.CreateMimeText"/> to create objects of this type.
            </summary>
            <remarks>
            You should use <see cref="T:Lesnikowski.Mail.MimeData"/> when attaching binary files.
            </remarks>
        </member>
        <member name="M:Lesnikowski.Mail.MimeText.Save(System.String)">
            <summary>
            Creates new file with the specified name and saves <see cref="P:Lesnikowski.Mail.MimeText.Text"/> to it.
            </summary>
            <param name="fileName">File name</param>
        </member>
        <member name="M:Lesnikowski.Mail.MimeText.Save(System.IO.Stream)">
            <summary>
            Writes <see cref="P:Lesnikowski.Mail.MimeText.Text"/> to specified stream. Stream should be open.
            </summary>
            <param name="stream">Stream to which <see cref="P:Lesnikowski.Mail.MimeText.Text"/> will be written.</param>
        </member>
        <member name="M:Lesnikowski.Mail.MimeText.ChooseContentType(System.String)">
            <summary>
            This method should choose content type based on the opened file name.
            </summary>
            <param name="fileName">Name of the file form which data will be loaded</param>
        </member>
        <member name="P:Lesnikowski.Mail.MimeText.Text">
            <summary>
            Gets or sets text data contained in this Mime object.
            Encoding is changed to UTF8 when setting.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MimeText.Encoding">
            <summary>
            Gets or sets encoding used to encode text contained in this Mime object.
            </summary>
            <remarks>
            Encoding is stored as a charset field in content-type header. Default is Encoding.Default.
            </remarks>
        </member>
        <member name="M:Lesnikowski.Mail.MimeCalendar.ChooseContentType(System.String)">
            <summary>
            This method sets content type to text/calendar.
            </summary>
            <param name="fileName">Name of the file form which data will be loaded</param>
        </member>
        <member name="P:Lesnikowski.Mail.MimeCalendar.ContentTypeMethod">
            <summary>
            Gets or sets content type method.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.SMIME.SignatureVerifier.CheckSigner(System.String)">
            <summary>
            Checks if the content was signed by the person that sent it.
            </summary>
            <param name="signerAddress">Email of the person that sent the message</param>
            <exception cref="T:Lesnikowski.Mail.SignatureException"><paramref name="signerAddress"/> is not in the signers list.</exception>
        </member>
        <member name="T:Lesnikowski.Mail.SignatureException">
            <summary>
            Represents an error that occured during signature validation or signing.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.SignatureException.#ctor(System.String)">
            <summary>
            Creates new empty SignatureException object with specified message.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.SignatureException.#ctor(System.String,System.Exception)">
            <summary>
            Creates new empty SignatureException object with specified message and inner exception.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.ServerException">
            <summary>
            Represents an error that occured on the server.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.ServerException.#ctor">
            <summary>
            Creates new empty ServerException object.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.ServerException.#ctor(System.String)">
            <summary>
            Creates new ServerException object with specified message.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.ServerException.#ctor(System.String,System.Exception)">
            <summary>
            Creates new ServerException object with specified message.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.HeloType">
            <summary>
            Hello types for <see cref="M:Lesnikowski.Client.Smtp.Ehlo(Lesnikowski.Client.HeloType,System.String)"/> method.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.HeloType.Helo">
            <summary>
            HELO command.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.HeloType.Ehlo">
            <summary>
            EHLO command (Extended HELO).
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.HeloType.EhloHelo">
            <summary>
            First try EHLO then fallback to HELO.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.ServerCertificateValidateEventHandler">
            <summary>
            Handler for ServerCertificateValidateEventHandler.
            </summary>
            <param name="sender">An object that contains state information for this validation.</param>
            <param name="e">Event arguments. Use <see cref="P:Lesnikowski.Client.ServerCertificateValidateEventArgs.IsValid"/> to validate the certificate.</param>
        </member>
        <member name="T:Lesnikowski.Infrastructure.EnumTextAttribute">
            <summary>
            Attribute applied to enums, for different 
            serialization logic applied using <see cref="T:Lesnikowski.Infrastructure.EnumTextConverter"/>.
            </summary>
        </member>
        <member name="M:Lesnikowski.Encoding2.Base64Encoder.Base64Encode(System.Byte[])">
            <summary>
            Encodes specified data with base64 encoding.
            </summary>
            <param name="data">Data to encode.</param>
            <returns></returns>
        </member>
        <member name="M:Lesnikowski.Encoding2.Base64Encoder.Base64Decode(System.Byte[])">
            <summary>
            Decodes base64 data.
            </summary>
            <param name="base64Data">Base64 encoded data.</param>
            <returns></returns>
        </member>
        <member name="M:Lesnikowski.Encoding2.Base64Encoder.Base64DecodeEx(System.Byte[],System.Char[])">
            <summary>
            Decodes base64 data.
            </summary>
            <param name="base64Data">Base64 encoded data.</param>
            <param name="base64Chars">Custom base64 chars (64 chars).</param>
            <returns></returns>
        </member>
        <member name="M:Lesnikowski.Encoding2.Base64Encoder.Base64EncodeEx(System.Byte[],System.Char[],System.Boolean)">
            <summary>
            Encodes specified data with bas64 encoding.
            </summary>
            <param name="data">Data to encode.</param>
            <param name="base64Chars">Custom base64 chars (64 chars).</param>
            <param name="pad">Pad missing block chars. Normal base64 must be 4 bytes blocks, if not 4 bytes in block, 
            missing bytes must be padded with '='. Modified base64 just skips missing bytes.</param>
            <returns></returns>
        </member>
        <member name="T:Lesnikowski.Encoding2.UueEncoding">
            <summary>
            Implements 'UUE' string encoding.
            </summary>
        </member>
        <member name="M:Lesnikowski.Encoding2.UueEncoding.EncodeAsString(System.Byte[])">
            <summary>
            Encodes specified byte array using UUE.
            </summary>
            <param name="data">Byte array to encode.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="M:Lesnikowski.Encoding2.UueEncoding.DecodeByteArray(System.String)">
            <summary>
            Decodes specified string using UUE.
            </summary>
            <param name="text">Encoded string to decode.</param>
            <returns>Decoded data.</returns>
        </member>
        <member name="M:Lesnikowski.Encoding2.UueEncoding.DecodeString(System.String,System.String)">
            <summary>
            Decodes specified string using UUE.
            </summary>
            <param name="s"></param>
            <param name="charset">charset e.g. "iso-8859-1"</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">
            The charset is not supported by the current 
            regional options of the computer executing this method
            </exception>
        </member>
        <member name="T:Lesnikowski.Mail.Fluent.INewSmtp">
            <summary>
            Represents SMTP connection configuration.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.INewSmtp.Server(System.String)">
            <summary>
            Sets host name. IP address can also be used.
            </summary>
            <param name="serverName">Host name or IP address.</param>
            <returns>SMTP connection configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.INewSmtp.WithSSL">
            <summary>
            Instructs to use secure SSL connection.
            Changes port to default SSL port (465) for SMTP protocol.
            </summary>
            <returns>SMTP connection configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.INewSmtp.WithSSL(Lesnikowski.Client.ServerCertificateValidateEventHandler)">
            <summary>
            Instructs to use secure SSL connection.
            Changes port to default SSL port (465) for SMTP protocol.
            </summary>
            <param name="certificateValidateEventHandler">Event which is called for custom server validation.</param>
            <returns>SMTP connection configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.INewSmtp.OnPort(System.Int32)">
            <summary>
            Sets the port on which connection will be made.
            </summary>
            <param name="port">Port number.</param>
            <returns>SMTP connection configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.INewSmtp.WithCredentials(System.String,System.String)">
            <summary>
            Sets the SMTP server credentials.
            </summary>
            <param name="user">User name.</param>
            <param name="password">User's password.</param>
            <returns>SMTP connection configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.INewSmtp.Send">
            <summary>
            Sends the message.
            </summary>
            <remarks>
            STMP connection is created, opened, and closed.
            </remarks>
        </member>
        <member name="T:Lesnikowski.Mail.Fluent.ISmtp">
            <summary>
            Represents existing SMTP connection configuration.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.ISmtp.Send(Lesnikowski.Client.Smtp)">
            <summary>
            Sends the message using provided SMTP client instance.
            </summary>
            <remarks>
            SMTP client connection should be already opened.
            </remarks>
            <param name="smtp">Instance used for sending.</param>
        </member>
        <member name="T:Lesnikowski.Mail.Fluent.IFluentMail">
            <summary>
            Email configuration.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.Text(System.String)">
            <summary>
            Sets the plain text of this message.
            </summary>
            <param name="text">Email content.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.Html(System.String)">
            <summary>
            Sets the HTML of this message.
            </summary>
            <param name="html">Email content in HTML format.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.From(System.String)">
            <summary>
            Sets the author of this email.
            </summary>
            <param name="address">Email address of the email's author.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.From(Lesnikowski.Mail.Headers.MailBox)">
            <summary>
            Sets the author of this email.
            </summary>
            <param name="from">Email's author.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.To(System.String)">
            <summary>
            Adds email recipient.
            </summary>
            <param name="address">Email address of the email recipient.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.To(Lesnikowski.Mail.Headers.MailBox)">
            <summary>
            Adds email recipient.
            </summary>
            <param name="to">Email recipient.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.Cc(System.String)">
            <summary>
            Adds 'CC' (Carbon Copy) field.
            </summary>
            <param name="address">CC recipient.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.Cc(Lesnikowski.Mail.Headers.MailBox)">
            <summary>
            Adds 'CC' (Carbon Copy) field.
            </summary>
            <param name="cc">Email address of the CC recipient.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.Bcc(System.String)">
            <summary>
            Adds 'BCC' (Blind Carbon Copy) field.
            </summary>
            <param name="address">Email address of the BCC recipient.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.Bcc(Lesnikowski.Mail.Headers.MailBox)">
            <summary>
            Adds 'BCC' field.
            </summary>
            <param name="bcc">BCC recipient.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.ReplyTo(Lesnikowski.Mail.Headers.MailBox)">
            <summary>
            Adds 'Reply-To' field.
            </summary>
            <param name="replyTo">Reply-To mailbox.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.ReplyTo(System.String)">
            <summary>
            Adds 'Reply-To' field.
            </summary>
            <param name="address">Reply-To email address.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.NotificationTo(Lesnikowski.Mail.Headers.MailBox)">
            <summary>
            Adds 'Disposition-Notification-To'. It's easier to use <see cref="M:Lesnikowski.Mail.Fluent.IFluentMail.RequestReadReceipt"/> then using this method.
            </summary>
            <param name="notification">Disposition-Notification-To mailbox.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.NotificationTo(System.String)">
            <summary>
            Adds 'Disposition-Notification-To'. It's easier to use <see cref="M:Lesnikowski.Mail.Fluent.IFluentMail.RequestReadReceipt"/> then using this method.
            </summary>
            <param name="address">Disposition-Notification-To email address.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.ReturnReceiptTo(Lesnikowski.Mail.Headers.MailBox)">
            <summary>
            Adds 'Return-Receipt-To' field. It's easier to use <see cref="M:Lesnikowski.Mail.Fluent.IFluentMail.RequestReadReceipt"/> then using this method.
            </summary>
            <param name="returnReceiptTo">Return-Receipt-To mailbox.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.ReturnReceiptTo(System.String)">
            <summary>
            Adds 'Return-Receipt-To' field. It's easier to use <see cref="M:Lesnikowski.Mail.Fluent.IFluentMail.RequestReadReceipt"/> then using this method.
            </summary>
            <param name="address">Return-Receipt-To email address.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.XConfirmReadingTo(Lesnikowski.Mail.Headers.MailBox)">
            <summary>
            Adds 'X-Confirm-Reading-To' field. It's easier to use <see cref="M:Lesnikowski.Mail.Fluent.IFluentMail.RequestReadReceipt"/> then using this method.
            </summary>
            <param name="confirmReadingTo">X-Confirm-Reading-To mailbox.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.XConfirmReadingTo(System.String)">
            <summary>
            Adds 'X-Confirm-Reading-To' field. It's easier to use <see cref="M:Lesnikowski.Mail.Fluent.IFluentMail.RequestReadReceipt"/> then using this method.
            </summary>
            <param name="address">X-Confirm-Reading-To email address.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.RequestReadReceipt">
            <summary> 
            This method copies Sender (if specified) or From list to all read receipts lists just before email is created (<see cref="M:Lesnikowski.Mail.Fluent.IFluentMail.Create"/> method).
            Read receipts are stored using <seealso cref="P:Lesnikowski.Mail.IMail.NotificationTo"/>, 
            <seealso cref="P:Lesnikowski.Mail.IMail.ReturnReceiptTo"/> or <seealso cref="P:Lesnikowski.Mail.IMail.XConfirmReadingTo"/> header.
            </summary>
            <remarks>
            Read receipt requests may not be always honored because:
            <list>
            <item>A mail client may not recognize the special Disposition-Notification-To header.</item>
            <item>A mail client may not implement that functionality.</item>
            <item>The end user may have that functionality turned off.</item>
            <item>The end user may optionally not choose to send one for your particular email.</item>
            </list>
            </remarks>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.Priority(Lesnikowski.Mail.Headers.Constants.MimePriority)">
            <summary>
            Sets the priority of the message.
            It's easier to use <see cref="M:Lesnikowski.Mail.Fluent.IFluentMail.PriorityHigh"/> or <see cref="M:Lesnikowski.Mail.Fluent.IFluentMail.PriorityLow"/> methods then setting this field.
            </summary>
            <param name="mimePriority">Message's priority.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.XPriority(System.Int32)">
            <summary>
            Sets the X-Priority for an email (Outlook specific).
            It's easier to use <see cref="M:Lesnikowski.Mail.Fluent.IFluentMail.PriorityHigh"/> or <see cref="M:Lesnikowski.Mail.Fluent.IFluentMail.PriorityLow"/> methods then setting this field.
            </summary>
            <param name="priority">Message's priority value ranges from "1" to "5" where "1" is the highest priority, "3" is normal, and "5" is the lowest priority.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.Importance(Lesnikowski.Mail.Headers.Constants.MimeImportance)">
            <summary>
            Sets the importance of the message.
            It's easier to use <see cref="M:Lesnikowski.Mail.Fluent.IFluentMail.PriorityHigh"/> or <see cref="M:Lesnikowski.Mail.Fluent.IFluentMail.PriorityLow"/> methods then setting this field.
            </summary>
            <param name="mimeImportance">Message's importance.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.Sensitivity(Lesnikowski.Mail.Headers.Constants.MimeSensitivity)">
            <summary>
            Sets the Sensitivity of the message ('Sensitivity' field)
            </summary>
            <param name="sensitivity">Message's sensitivity.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.PriorityHigh">
            <summary>  
            Sets <see cref="M:Lesnikowski.Mail.Fluent.IFluentMail.XPriority(System.Int32)"/> to 1, <see cref="M:Lesnikowski.Mail.Fluent.IFluentMail.Priority(Lesnikowski.Mail.Headers.Constants.MimePriority)"/> to <see cref="F:Lesnikowski.Mail.Headers.Constants.MimePriority.Urgent"/> and
            <see cref="M:Lesnikowski.Mail.Fluent.IFluentMail.Importance(Lesnikowski.Mail.Headers.Constants.MimeImportance)"/> to <see cref="F:Lesnikowski.Mail.Headers.Constants.MimeImportance.High"/>
            </summary>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.PriorityLow">
            <summary>  
            Sets <see cref="M:Lesnikowski.Mail.Fluent.IFluentMail.XPriority(System.Int32)"/> to 5, <see cref="M:Lesnikowski.Mail.Fluent.IFluentMail.Priority(Lesnikowski.Mail.Headers.Constants.MimePriority)"/> to <see cref="F:Lesnikowski.Mail.Headers.Constants.MimePriority.NonUrgent"/> and
            <see cref="M:Lesnikowski.Mail.Fluent.IFluentMail.Importance(Lesnikowski.Mail.Headers.Constants.MimeImportance)"/> to <see cref="F:Lesnikowski.Mail.Headers.Constants.MimeImportance.Low"/>
            </summary>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.MessageID(System.String)">
            <summary>
            Sets id of the message. Without surrounding brackets (&lt; and &gt;)
            If not set it is generated automatically.
            </summary>
            <param name="messageId">Message id without surrounding brackets.</param>
            <returns></returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.References(System.String)">
            <summary>
            Adds message id of the referenced message.
            </summary>
            <param name="messageId">Referenced message id without surrounding brackets.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.Subject(System.String)">
            <summary>
            Sets the subject of the message.
            </summary>
            <param name="subject"></param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.AddCustomHeader(System.String,System.String)">
            <summary>
            Adds custom header.
            </summary>
            <param name="header">Header name.</param>
            <param name="value">Header value.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.AddAttachment(System.String)">
            <summary>
            Adds a attachment to the message.
            </summary>
            <param name="fileName">File path to read from.</param>
            <returns>Email configuration for this attachment.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.AddAttachment(System.Byte[])">
            <summary>
            Adds a attachment to the message.
            </summary>
            <param name="data">Data of the attachment.</param>
            <returns>Email configuration for this attachment.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.AddVisual(System.String)">
            <summary>
            Adds a visual attachment to the message.
            </summary>
            <param name="fileName"></param>
            <returns>Email configuration for this attachment.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.AddVisual(System.Byte[])">
            <summary>
            Adds a visual attachment to the message.
            </summary>
            <param name="data">Data of the visual attachment.</param>
            <returns>Email configuration for this attachment.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.AddAlternative(Lesnikowski.Mail.MimeBase)">
            <summary>
            Adds alternative view for this message.
            </summary>
            <param name="alternativeView">Alternative view to add.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.AddAppointment(Lesnikowski.Mail.Appointments.Appointment)">
            <summary>
            Adds specified appointment as alternative view for this message. 
            </summary>
            <param name="appointment">Appointment to add.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.SignWith(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Signs the message.
            </summary>
            <param name="certificate">Certificate used for signing.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.DKIMSign(System.Security.Cryptography.RSACryptoServiceProvider,System.String,System.String)">
            <summary>
            Signs the message using DKIM (DomainKeys Identified Mail) signature.
            </summary>
            <param name="rsa">RSA class containing private key used for signing.</param>
            <param name="publicKeyDnsSelector">DNS public key domain selector.</param>
            <param name="publicKeyDnsDomain">DNS public key domain.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.DKIMSign(System.Security.Cryptography.RSACryptoServiceProvider,Lesnikowski.Mail.DKIM.DKIMSignatureInfo)">
            <summary>
            Signs the message using DKIM (DomainKeys Identified Mail) signature.
            </summary>
            <param name="rsa">RSA class containing private key used for signing.</param>
            <param name="signatureInfo">DKIM signature information.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.Create">
            <summary>
            Creates new <see cref="T:Lesnikowski.Mail.IMail"/> object.
            </summary>
            <returns>Email object.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.UsingNewSmtp">
            <summary>
            Creates new SMTP configuration for this message
            </summary>
            <returns>Email configuration for SMTP server connection.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentMail.UsingSmtp">
            <summary>
            Creates existing SMTP configuration for this message.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Lesnikowski.Mail.Fluent.IFluentAttachment">
            <summary>
            Represents attachment configuration.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentAttachment.SetFileName(System.String)">
            <summary>
            Sets the attachment's file name.
            </summary>
            <param name="fileName">FileName of the attachment.</param>
            <returns>Attachment configuration</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentAttachment.SetContentId(System.String)">
            <summary>
            Sets the attachment's Content-Id.
            </summary>
            <param name="contentId">Content-Id of the attachment.</param>
            <returns>Attachment configuration</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.IFluentAttachment.SetContentType(Lesnikowski.Mail.Headers.ContentType)">
            <summary>
            Sets the attachment's Content-type.
            </summary>
            <param name="contentType">Content-Type of the attachment.</param>
            <returns>Attachment configuration</returns>
        </member>
        <member name="T:Lesnikowski.Mail.Fluent.Mail">
            <summary>
            Allows creation and sending emails using fluent interface syntax.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.Mail.Text(System.String)">
            <summary>
            Creates new plain text email.
            </summary>
            <param name="text">Email content.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Fluent.Mail.Html(System.String)">
            <summary>
            Creates new HTML email.
            </summary>
            <param name="html">Email content in HTML format.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.ContentType">
            <summary>
            Represents content type of the message (E.g. "text/plain").
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.ContentType.TextPlain">
            <summary>
            Text/Plain content type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.ContentType.TextHtml">
            <summary>
            Text/Html content type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.ContentType.ApplicationOctetStream">
            <summary>
            application/octet-stream content type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.ContentType.ApplicationMsWord">
            <summary>
            Application/MsWord content type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.ContentType.MultipartMixed">
            <summary>
            Multipart/Mixed content type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.ContentType.MultipartRelated">
            <summary>
            Multipart/Related content type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.ContentType.MultipartAlternative">
            <summary>
            Multipart/Alternative content type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.ContentType.MultipartSigned">
            <summary>
            Multipart/Signed content type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.ContentType.MultipartReport">
            <summary>
            Multipart/Report content type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.ContentType.ApplicationMsTnef">
            <summary>
            Application/Ms-Tnef content type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.ContentType.ApplicationPdf">
            <summary>
            Application/Pdf content type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.ContentType.TextCalendar">
            <summary>
            Text/Calendar content type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.ContentType.MessageRfc822">
            <summary>
            Message/Rfc822 content type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.ContentType.ApplicationIcs">
            <summary>
            Application/Ics content type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.ContentType.ImageJpeg">
            <summary>
            Image/Jpeg content type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.ContentType.ImagePng">
            <summary>
            Image/Png content type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.ContentType.ImageGif">
            <summary>
            Image/Gif content type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.ContentType.ImageBmp">
            <summary>
            Image/Bmp content type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.ContentType.ImageTiff">
            <summary>
            Image/Tiff content type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.ContentType.ApplicationXPkcs7Signature">
            <summary>
            Application/x-pkcs7-signature content type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.ContentType.ApplicationPkcs7Signature">
            <summary>
            Application/pkcs7-signature content type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.ContentType.ApplicationPkcs7Mime">
            <summary>
            Application/pkcs7-mime content type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.ContentType.ApplicationXPkcs7Mime">
            <summary>
            Application/x-pkcs7-mime content type.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.ContentType.#ctor(Lesnikowski.Mail.Headers.Constants.MimeType,Lesnikowski.Mail.Headers.Constants.MimeSubtype)">
            <summary>
            Creates new content type instance.
            </summary>
            <param name="mimeType">Mime type.</param>
            <param name="mimeSubtype">Mime subtype</param>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.ContentType.ToString">
            <summary>
            Returns MimeTypeName/MimeSubtypeName string.
            </summary>
            <returns>MimeTypeName/MimeSubtypeName</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.ContentType.GetHashCode">
            <summary>
            Returns hash code for this instance.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.ContentType.Equals(System.Object)">
            <summary>
            Compares this instance to another <see cref="T:Lesnikowski.Mail.Headers.ContentType"/> instance.
            </summary>
            <param name="obj">Second instance to compare.</param>
            <returns><c>True</c> if instances are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.ContentType.op_Equality(Lesnikowski.Mail.Headers.ContentType,Lesnikowski.Mail.Headers.ContentType)">
            <summary>
            Compares two <see cref="T:Lesnikowski.Mail.Headers.ContentType"/> instances.
            </summary>
            <param name="a">First instance to compare.</param>
            <param name="b">Second instance to compare.</param>
            <returns><c>True</c> if instances are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.ContentType.op_Inequality(Lesnikowski.Mail.Headers.ContentType,Lesnikowski.Mail.Headers.ContentType)">
            <summary>
            Compares two <see cref="T:Lesnikowski.Mail.Headers.ContentType"/> instances.
            </summary>
            <param name="a">First instance to compare.</param>
            <param name="b">Second instance to compare.</param>
            <returns><c>False</c> if instances are equal, <c>true</c> otherwise.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.ContentType.Parse(System.String)">
            <summary>
            Parses specified string and creates new <see cref="T:Lesnikowski.Mail.Headers.ContentType"/> object.
            </summary>
            <param name="value">String in format: type/subtype</param>
            <returns>New <see cref="T:Lesnikowski.Mail.Headers.ContentType"/> object.</returns>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.ContentType.MimeType">
            <summary>
            Type name of content. Always in lower case.
            May be <c>null</c>.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.ContentType.MimeSubtype">
            <summary>
            Subtype name of content. Always in lower case.
            May be <c>null</c>.
            </summary>
        </member>
        <member name="M:Lesnikowski.Parsers.StringWalker.MoveOneForward">
            <returns>False if end is reached, true if we can move forward again.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.Address.MailBoxListTokenizer.MoveOneForward">
            <summary>
            Moves index one step forward, 
            this method is aware of the escaped strings.
            </summary>
            <returns>False if end is reached, <c>true</c> if we can move forward again.</returns>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.IMailBoxList">
            <summary>
            Represents collection of <see cref="T:Lesnikowski.Mail.Headers.MailBox"/> objects.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.IMailBoxList.AddRange(System.Collections.Generic.IEnumerable{Lesnikowski.Mail.Headers.MailBox})">
            <summary>
            Adds the elements of the specified collection to the end of the List.
            </summary>
            <param name="mailBoxList">The collection whose elements should be added to the end of the List. </param>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.IMailBoxList.ConvertAll``1(System.Converter{Lesnikowski.Mail.Headers.MailBox,``0})">
            <summary>
             Converts the elements in the current System.Collections.Generic.List to another type, and returns a list containing the converted elements.
            </summary>
            <param name="converter">A System.Converter delegate that converts each element from one type to another type.</param>
            <typeparam name="TOutput">The type of the elements of the target array.</typeparam>
            <returns>A System.Collections.Generic.List of the target type containing the converted elements from the current System.Collections.Generic.List.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.IMailBoxList.ForEach(System.Action{Lesnikowski.Mail.Headers.MailBox})">
            <summary>
            Performs specified action on each element of the collection.
            </summary>
            <param name="action">Action that will be performed on each element of the collection.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.IMailBoxList.Find(System.Predicate{Lesnikowski.Mail.Headers.MailBox})">
            <summary>
            Finds first element that matches specified predicate.
            </summary>
            <param name="predicate">Predicate used to find an element.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.IMailBoxList.ToList">
            <summary>
            Creates a new list that contains all elements from this collection.
            </summary>
            <returns>New list that contains elements from this collection.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.Parsers.CommentsRemover.RemoveComments(System.String)">
            <summary>
            Some header fields can contain comments - text
            between 2 parentheses '(' , ')'.
            This method removes comments from specified string. 
            </summary>
            <param name="s">String to remove comments from.</param>
            <returns>String s with no comments.</returns>
        </member>
        <member name="T:Lesnikowski.Mail.IMimeDataReadOnlyCollection">
            <summary>
            Interface for read-only access to MimeDataCollection
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.IMimeDataReadOnlyCollection.ForEach(System.Action{Lesnikowski.Mail.MimeData})">
            <summary>
            Performs specified action on each element of the collection.
            </summary>
            <param name="action">Action that will be performed on each element of the collection.</param>
        </member>
        <member name="M:Lesnikowski.Mail.IMimeDataReadOnlyCollection.Find(System.Predicate{Lesnikowski.Mail.MimeData})">
            <summary>
            Finds first element that matches specified predicate.
            </summary>
            <param name="predicate">Predicate used to find an element.</param>
        </member>
        <member name="M:Lesnikowski.Mail.IMimeDataReadOnlyCollection.ToList">
            <summary>
            Creates a new list that contains all elements from this collection.
            </summary>
            <returns>New list that contains elements from this collection.</returns>
        </member>
        <member name="P:Lesnikowski.Mail.IMimeDataReadOnlyCollection.Item(System.String)">
            <summary>
            Gets or set <see cref="T:Lesnikowski.Mail.MimeData"/> object with specified content-id.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.IMimeDataReadOnlyCollection.Item(System.Int32)">
            <summary>
            Gets or set <see cref="T:Lesnikowski.Mail.MimeData"/> object at specified index.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.IMimeDataReadOnlyCollection.Count">
            <summary>
            Gets the number of elements stored in the collection.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.ISimpleMailMessage">
            <summary>
            This class provides simple access to email message.
            Use <see cref="T:Lesnikowski.Mail.SimpleMailMessageBuilder"/> class to create this object.
            It is possible to access entire MIME tree using <see cref="T:Lesnikowski.Mail.MimeDocument"/> property.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.MimeDocumentProcessor">
            <summary>
            Creates MailMessage using properly formed <see cref="T:Lesnikowski.Mail.MimeDocument"/>.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.MimeReport">
            <summary>
            Represents 'Multipart/Report' MIME entity e.g. multiple mail messages.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.MimeMultipart">
            <summary>
            Implements 'Multipart/?' MIME entity.
            </summary>
            <remarks>
            There are specialized classes for different subtypes which derive from this class.
            </remarks>
        </member>
        <member name="M:Lesnikowski.Mail.MimeMultipart.ParseBody(System.String)">
            <summary>
            Parses this multipart mime entity.
            </summary>
            <param name="body">Mime to parse.</param>
        </member>
        <member name="M:Lesnikowski.Mail.MimeMultipart.RenderBody(System.Text.StringBuilder)">
            <summary>
            Renders body of this MIME object.
            </summary>
            <param name="writer"><see cref="T:System.Text.StringBuilder"/> to render on.</param>
        </member>
        <member name="P:Lesnikowski.Mail.MimeMultipart.Parts">
            <summary>
            Parts of the entity.
            In 'Multipart/?' e-mail parts are separated
            by boundary delimiter (<see cref="P:Lesnikowski.Mail.MimeMultipart.Boundary"/> property).
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MimeMultipart.Boundary">
            <summary>
            Boundary delimiter. 
            String which is separating parts of the multipart entity.
            Without additional '--' at the beginning.
            E.g. '=_NextPart_000_0020_01C36F64.F2562350'.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.MimeReport.GetMailMessage">
            <summary>
            Creates new <see cref="T:Lesnikowski.Mail.IMail"/> object from Parts[2] in 
            <see cref="P:Lesnikowski.Mail.MimeMultipart.Parts"/> collection.
            </summary>
            <returns>
            New <see cref="T:Lesnikowski.Mail.IMail"/> object or <c>null</c> if there was no attached mail message.
            </returns>
        </member>
        <member name="P:Lesnikowski.Mail.MimeReport.MimeReportType">
            <summary>
            Type of the report.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MimeReport.Description">
            <summary>
            Human readable description of error.
            It may be in any MIME standards-track content-type, charset, or language.
            Where a description of the error is desired in several languages
            or several media, a Multipart/Alternative construct may be used.(RFC 3462)
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MimeReport.Status">
            <summary>
            A machine parsable body part containing an account of the reported message handling event.		
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.MimeDigest">
            <summary>
            Implements 'Multipart/Digest' MIME entity (RFC 2046).
            E.g. multiple mail messages.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.MimeDigest.ParseBody(System.String)">
            <summary>
            Sets default Content-Type for each part to "Message/rfc822".
            </summary>
            <param name="body">Body to be parsed.</param>
        </member>
        <member name="M:Lesnikowski.Mail.MimeDigest.GetSimpleMailMessage(System.Int32)">
            <summary>
            Creates new <see cref="T:Lesnikowski.Mail.IMail"/> object from specified part in 
            <see cref="P:Lesnikowski.Mail.MimeMultipart.Parts"/> collection.
            If Content-Type for specified part is  different than 
            "message/rfc822" it returns null.
            </summary>
            <param name="index">Part index in <see cref="P:Lesnikowski.Mail.MimeMultipart.Parts"/> collection</param>
            <returns>
            New <see cref="T:Lesnikowski.Mail.IMail"/> object -or- <c>null</c> if Content-Type for 
            specified part is different than "message/rfc822".
            </returns>
        </member>
        <member name="T:Lesnikowski.Mail.MimeRelated">
            <summary>
            Represents 'Multipart/Related' MIME entity e.g. HTML e-mail with embedded pictures; (RFC 2387).
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.MimeRelated.ParseBody(System.String)">
            <summary>
            Parses this multipart mime entity.
            </summary>
            <param name="body">Mime to parse</param>
        </member>
        <member name="P:Lesnikowski.Mail.MimeRelated.Root">
             <summary>
             Root mime object.
             This element should be processed first.
             The 'parts' collection contains this element.
             </summary>
             <remarks>
             E.g. if E-mail is HTML e-mail with embedded pictures,
             root will contain html body.
             All images will be placed in the 'parts' collection.
            </remarks>
        </member>
        <member name="T:Lesnikowski.Mail.MimeAlternative">
            <summary>
            Implements 'Multipart/Alternative' MIME entity.
            E.g. E-mail containing 'Text/HTML' and 'Text/Plain' representations of the same information. (RFC2046)
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.MimeAlternative.GetSimplestData">
            <summary>
            Gets simplest data representation.
            </summary>
            <returns>'parts[0]' or <c>null</c> if 'parts.Count==0'.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.MimeAlternative.GetBestData">
            <summary>
            Gets most complicated data representation.
            </summary>
            <returns>'Parts[Parts.Count-1]' or <c>null</c> if 'parts.Count==0'.</returns>
        </member>
        <member name="T:Lesnikowski.Encoding2.Base64">
            <summary>
            Implements 'Base64' string encoding.
            </summary>
        </member>
        <member name="M:Lesnikowski.Encoding2.Base64.EncodeAsString(System.Byte[])">
            <summary>
            Encodes specified byte array using Base64.
            </summary>
            <param name="data">Byte array to encode.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="M:Lesnikowski.Encoding2.Base64.DecodeByteArray(System.String)">
            <summary>
            Decodes specified string using Base64.
            </summary>
            <param name="text">Encoded string to decode.</param>
            <returns>Decoded data.</returns>
        </member>
        <member name="M:Lesnikowski.Encoding2.Base64.DecodeString(System.String,System.String)">
            <summary>
            Decodes specified string using Base64.
            </summary>
            <param name="s"></param>
            <param name="charset">charset e.g. "iso-8859-1"</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">
            The charset is not supported by the current 
            regional options of the computer executing this method
            </exception>
        </member>
        <member name="M:Lesnikowski.Encoding2.Base64.EncodeString(System.String,System.Text.Encoding)">
            <summary>
            Encodes specified string using Base64 and specified encoding.
            </summary>
            <param name="s">String to encode.</param>
            <param name="encoding">Encoding.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="T:Lesnikowski.Encoding2.QuotedPrintable">
            <summary>
            Implements 'QuotedPrintable' string encoding.
            </summary>
        </member>
        <member name="M:Lesnikowski.Encoding2.QuotedPrintable.DecodeByteArray(System.String)">
            <summary>
            Changes Quoted-printable to byte array.
            Changes 3 chars '=A9' into one byte with value A9 HEX.
            If <see cref="P:Lesnikowski.Encoding2.QuotedPrintable.ConvertUnderscore"/> is set to <c>true</c> changes '_' into space ' ' (20 HEX).
            </summary>
            <param name="text">Quoted-printable string e.g. "Pawe=B3_Le=B6nikowski"</param>        
            <returns>Byte array.</returns>
        </member>
        <member name="M:Lesnikowski.Encoding2.QuotedPrintable.DecodeString(System.String,System.String)">
            <summary>
            Decodes Quoted-printable string.
            </summary>
            <param name="s">"Pawe=B3_Le=B6nikowski"</param>
            <param name="charset">charset e.g. "iso-8859-1"</param>
            <returns>"Paweł Leśnikowski"</returns>
            <exception cref="T:System.NotSupportedException">
            The <paramref name="charset"/> is not supported by the current 
            regional options of the computer executing this method
            </exception>
        </member>
        <member name="P:Lesnikowski.Encoding2.QuotedPrintable.ConvertUnderscore">
            <summary>
            if <c>true</c> converts underscore ('_') into space (' ')
            </summary>
        </member>
        <member name="T:Lesnikowski.Infrastructure.EnumTextConverter">
            <summary>
            Uses <see cref="T:Lesnikowski.Infrastructure.EnumTextAttribute"/> to apply different serialization logic to enums.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.Constants.HeaderEncoding">
            <summary>
            Header encoding format.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.HeaderEncoding.Base64">
            <summary>
            Base64 encoding.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.HeaderEncoding.Bit7">
            <summary>
            7 bit encoding.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.HeaderEncoding.QuotedPrintable">
            <summary>
            Quoted Printable encoding.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.Constants.MimeEncoding">
            <summary>
            Mime encoding format.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeEncoding.Bit7">
            <summary>
            7-bit encoding
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeEncoding.Bit8">
            <summary>
            8-bit encoding.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeEncoding.QuotedPrintable">
            <summary>
            Quoted-Printable encoding.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeEncoding.Base64">
            <summary>
            Base64 encoding.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeEncoding.XUUE">
            <summary>
            UUE encoding (Unix to Unix encoding).
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.Constants.MimeReportType">
            <summary>
            Represents report type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeReportType.DeliveryStatus">
            <summary>
            "delivery-status" type.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.ContentIdHelper">
            <summary>
            Contains helper methods for content-id operations.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.ContentIdHelper.DecodeContentId(System.String)">
            <summary>
            Decodes Content-ID in URL format ('a%25b@c').
            Converts %hh hex-escaped characters to their ASCII equivalents.
            </summary>
            <param name="cid">Content-ID for decoding.</param>
            <returns>
            Decoded Content-ID value ('a%b@c').
            </returns>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.ContentIdHelper.GetContentId(System.String)">
            <summary>
            If url is "cid" URL ('cid:a%25b@c') method returns decoded Content-ID message header ('a%b@c').
            </summary>
            <remarks>
            Converts %hh hex- escaped characters to their ASCII 
            equivalents.
            </remarks>
            <param name="href"></param>
            <returns>
            Content-ID message header -or- <c>null</c> if url is NOT "cid" URL.
            </returns>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.ContentTransferEncodingHeader">
            <summary>
            Implements 'content-transfer-encoding' header field. 
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.ContentDispositionHeader">
            <summary>
            Implements 'content-disposition' header field (RFC 2183).
            Giving simple access to disposition name as string and as enum,
            and all other options.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.IContentDisposition">
            <summary>
            Content-Disposition header interface.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.IContentDisposition.Item(System.String)">
            <summary>
            Gets or sets options value for specified key.
            </summary>
            <param name="key">Key.</param>
            <returns>Options value </returns>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.IContentDisposition.Value">
            <summary>
            Gets of sets disposition of content.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.IContentDisposition.FileName">
            <summary>
            Suggested filename ('filename' parameter). May be <c>null</c>.
            Consider using <see cref="P:Lesnikowski.Mail.MimeData.SafeFileName"/> as it is guaranteed to contain valid file name.
            </summary>
            <remarks>
              It is important that you should not blindly use the suggested
              filename.  The suggested filename SHOULD be checked (and possibly
              changed) to see that it conforms to local file system conventions,
              does not overwrite an existing file, and does not present a security
              problem.
            </remarks>
            <seealso cref="P:Lesnikowski.Mail.MimeData.FileName"/> 
        </member>
        <member name="M:Lesnikowski.Mail.Headers.ContentDispositionHeader.#ctor">
            <summary>
            Creates new ContentDispositionHeader object describing 'mimeBase'.
            </summary>
            <remarks>
            If there is no 'content-type' field in mimeBase:
            <list type="bullet">
            	<item>Value==<c>null</c>;</item>
            	<item>DispositionName==<c>null</c>;</item>
            	<item>Options==<c>null</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.ContentDispositionHeader.Value">
            <summary>
            Disposition of content.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.ContentTypeHeader">
            <summary>
            Implements 'content-type' header  field (RFC 2045).
            Giving simple access to type/subtype properties as strings.
            and all other options.
            </summary>
            <remarks>
            Messages without a MIME Content-Type header are taken
            to be plain text in the US-ASCII character set,
            which can be explicitly specified as:
            Content-type: text/plain; charset=us-ascii
            Each part in "multipart/digest" has a default type of "message/rfc822".
            </remarks>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.ContentTypeHeader.Value">
            <summary>
            Type name of content. Always in lower case.
            May be null.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.BracketIdHeader">
            <summary>
            Implements ID header surrounded by brackets (e.g. 'content-id' field (RFC 2183)).
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.BracketIdHeader.Value">
            <summary>
            'Content-id' name.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.Constants.MimeImportance">
            <summary>
            Importance of email message.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeImportance.High">
            <summary>
            High importance.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeImportance.Normal">
            <summary>
            Normal importance.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeImportance.Low">
            <summary>
            Low importance.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.Address.MailBoxList.Parse(System.String)">
            <summary>
            Parses input string, and creates new <see cref="T:Lesnikowski.Mail.Headers.Address.MailBoxList"/> object.
            Replaces escape sequences in mailbox's display-name,
            and decodes Quoted-Printable and Base64 fragments.
            </summary>
            <param name="s">
            String to parse.
            <list type="bullet">
            <listheader>Format:</listheader>
            	<item>
            	<see cref="T:Lesnikowski.Mail.Headers.MailBox"/>, <see cref="T:Lesnikowski.Mail.Headers.MailBox"/>, <see cref="T:Lesnikowski.Mail.Headers.MailBox"/>, ...
            	see <see cref="M:Lesnikowski.Mail.Headers.MailBox.Parse(System.String)"/>.
            	</item>
            </list>
            </param>
            <returns>New <see cref="T:Lesnikowski.Mail.Headers.Address.MailBoxList"/> object.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.Address.MailBoxList.Render">
            <summary>
            Renders this instance as string.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.Address.MailBoxList.ToString">
            <summary>
            String containing all mailboxes in this collection: "mailBox1.ToString(), mailBox2.ToString(), (...)".
            </summary>
            <returns>mailBox1.ToString(), mailBox2.ToString(), (...)</returns>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.MailBox">
            <summary>
            Simple mail box with address and name.
            </summary>
            <remarks>
            RFC 2822 says, that name can be null.
            </remarks>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.MailBox._parserString">
            <summary>
            Parser string used for parsing name and address
            <list type="bullet">
            <item>Group '1' = name;</item>
            <item>Group '2' = address.</item>
            </list>
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.MailBox._parser">
            <summary>
            Parser used for parsing name and address
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.MailBox.#ctor(System.String,System.String)">
            <summary>
            Creates new MailBox object.
            Fills <see cref="P:Lesnikowski.Mail.Headers.MailBox.Name"/> and <see cref="P:Lesnikowski.Mail.Headers.MailBox.Address"/> properties.
            </summary>
            <param name="address">E-mail address.</param>
            <param name="name">Display name.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.MailBox.#ctor(System.String)">
            <summary>
            Creates new MailBox object.
            Fills <see cref="P:Lesnikowski.Mail.Headers.MailBox.Name"/> property.
            </summary>
            <param name="address">E-mail address.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.MailBox.Parse(System.String)">
            <summary>
            Parses text, and creates new <see cref="T:Lesnikowski.Mail.Headers.MailBox"/> object.
            Replaces escape sequences in mailbox's display-name,
            and decodes Quoted-Printable and Base64 fragments.
            </summary>
            <param name="text">
            String to parse.
            <list type="bullet">
            	<listheader>Supported formats:</listheader>
            	<item>"name" &lt;address&gt;		 </item>
            	<item>name &lt;address&gt;			 </item>
            	<item>&lt;address&gt;	//name==null </item>
            	<item>address			//name==null </item>
            </list>
            </param>
            <returns>New <see cref="T:Lesnikowski.Mail.Headers.MailBox"/> object or <c>null</c> if s is<c>null</c>.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.MailBox.Render">
            <summary>
            Renders this mailbox as string.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.MailBox.ToString">
            <summary>
            Returns string containing the <see cref="P:Lesnikowski.Mail.Headers.MailBox.Name">Name</see> if it exists and the <see cref="P:Lesnikowski.Mail.Headers.MailBox.Address">Address</see>.
            </summary>
            <returns>
            <see cref="P:Lesnikowski.Mail.Headers.MailBox.Name">Name</see> &lt;<see cref="P:Lesnikowski.Mail.Headers.MailBox.Address">Address</see>&gt;
            </returns>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.MailBox.Address">
            <summary>
            E-mail address e.g. "john.smith@example.com".
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.MailBox.Name">
            <summary>
            Display name e.g. "John Smith".
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.MailBox.DebuggerDisplay">
            <summary>
            This property is used by DebuggerDisplay attribute.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.DateTimeHeader">
            <summary>
            Implements date/time header.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.PriorityHeader">
            <summary>
            Implementing 'priority' header field. 
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.HeaderCollection">
            <summary>
            Collection of mime headers, and listeners.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.HeaderCollection.Add(System.String,System.String)">
            <summary>
            Adds value for specified header key. Updates listener for that key.
            </summary>
            <param name="key">Header key.</param>
            <param name="value">Value for specified header key.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.HeaderCollection.GetValues(System.String)">
            <summary>
            Gets the values associated with the specified key.
            </summary>
            <param name="key">The String key of the entry that contains the values to get.</param>
            <returns>
            A String array that contains the values associated with the specified key.
            </returns>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.HeaderCollection.AddListener(Lesnikowski.Mail.Headers.IHeader)">
            <summary>
            Adds listener which will be informed when specified key changes.
            If the headers contains such key, listener should parse it (headers -> lister)
            otherwise we will get the value form listener (listener -> headers).
            </summary>
            <param name="listener">Header which will be informed about the change.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.HeaderCollection.#ctor">
            <summary>
            Creates new HeaderCollection object.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.HeaderCollection.Render(System.Text.StringBuilder)">
            <summary>
            Renders this header collection.
            </summary>
            <param name="writer"><see cref="T:System.Text.StringBuilder"/> to render on.</param>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.HeaderCollection.Item(System.String)">
            <summary>
            Gets or set header value for specified header keys. Updates listener for that key.
            </summary>
            <param name="key">Header key.</param>
            <returns>Value for specified header key.</returns>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.HeaderCollection.AllKeys">
            <summary>
            Gets all the header keys stored in this collection.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.Headers.HeaderCollection.Count">
            <summary>
            Returns the number of the elements in this collection.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.Constants.MimeDisposition">
            <summary>
            Types of actions which mail user agent should take to 
            present the specified data to the user.
            It simply says what you should do with the data.
            (RFC 2183)
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeDisposition.Inline">
            <summary>
            Data should be displayed to the user.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeDisposition.Attachment">
            <summary>
            This is attachment.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.Constants.MimeSubtype">
            <summary>
            Represents content's subtype (RFC 2045).
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSubtype.Plain">
            <summary>
            '?/plain' subtype.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSubtype.Html">
            <summary>
            '?/html' subtype.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSubtype.Related">
            <summary>
            '?/related' subtype.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSubtype.Mixed">
            <summary>
            '?/mixed' subtype.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSubtype.Alternative">
            <summary>
            '?/alternative' subtype.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSubtype.Digest">
            <summary>
            '?/digest' subtype.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSubtype.Report">
            <summary>
            '?/report' subtype.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSubtype.Rfc822">
            <summary>
            '?/rfc822' subtype.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSubtype.Signed">
            <summary>
            '?/signed' subtype.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSubtype.DeliveryStatus">
            <summary>
            '?/delivery-status' subtype.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSubtype.OctetStream">
            <summary>
            '?/octet-stream' subtype.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSubtype.Jpeg">
            <summary>
            '?/jpeg' subtype.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSubtype.Richtext">
            <summary>
            '?/richtext' subtype.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSubtype.Rtf">
            <summary>
            '?/rtf' subtype.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSubtype.Xml">
            <summary>
            '?/xml' subtype.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSubtype.Gif">
            <summary>
            '?/gif' subtype.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSubtype.Tiff">
            <summary>
            '?/tiff' subtype.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSubtype.Bmp">
            <summary>
            '?/bmp' subtype.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSubtype.Png">
            <summary>
            '?/png' subtype.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSubtype.Pdf">
            <summary>
            ?/pdf subtype.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSubtype.Mpeg">
            <summary>
            '?/mpeg' subtype.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSubtype.Mp4">
            <summary>
            '?/mp4' subtype.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSubtype.XZipCompressed">
            <summary>
            '?/x-zip-compressed' subtype.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSubtype.MsTnef">
            <summary>
            '?/ms-tnef' subtype.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSubtype.Calendar">
            <summary>
            '?/calendar' subtype.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeSubtype.MsWord">
            <summary>
            '?/msword' subtype.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.Constants.MimeSubtype.#ctor(System.String)">
            <summary>
            Creates new MimeSubtype instance.
            </summary>
            <param name="subtype">Subtype string.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.Constants.MimeSubtype.ToString">
            <summary>
            Converts object to string.
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.Constants.MimeSubtype.GetHashCode">
            <summary>
            Returns hash code for this instance.
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.Constants.MimeSubtype.Equals(System.Object)">
            <summary>
            Compares this instance to another <see cref="T:Lesnikowski.Mail.Headers.Constants.MimeSubtype"/> instance.
            </summary>
            <param name="obj">Second instance to compare.</param>
            <returns>True if instances are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.Constants.MimeSubtype.op_Equality(Lesnikowski.Mail.Headers.Constants.MimeSubtype,Lesnikowski.Mail.Headers.Constants.MimeSubtype)">
            <summary>
            Compares two <see cref="T:Lesnikowski.Mail.Headers.Constants.MimeSubtype"/> instances.
            </summary>
            <param name="a">First instance to compare.</param>
            <param name="b">Second instance to compare.</param>
            <returns>True if instances are equal, false otherwise.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.Constants.MimeSubtype.op_Inequality(Lesnikowski.Mail.Headers.Constants.MimeSubtype,Lesnikowski.Mail.Headers.Constants.MimeSubtype)">
            <summary>
            Compares two <see cref="T:Lesnikowski.Mail.Headers.Constants.MimeSubtype"/> instances.
            </summary>
            <param name="a">First instance to compare.</param>
            <param name="b">Second instance to compare.</param>
            <returns>False if instances are equal, true otherwise.</returns>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.Constants.MimeType">
            <summary>
            Represents content's type (RFC 2045).
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeType.Application">
            <summary>
            'application/?' type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeType.Text">
            <summary>
            'text/?' type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeType.Multipart">
            <summary>
            'multipart/?' type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeType.Message">
            <summary>
            'message/?' type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeType.Image">
            <summary>
            'image/?' type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeType.Audio">
            <summary>
            'audio/?' type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeType.Model">
            <summary>
            'model/?' type.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimeType.Video">
            <summary>
            'video/?' type.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.Constants.MimeType.#ctor(System.String)">
            <summary>
            Creates new MimeType instance.
            </summary>
            <param name="type">Type string.</param>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.Constants.MimeType.ToString">
            <summary>
            Converts object to string.
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.Constants.MimeType.GetHashCode">
            <summary>
            Returns hash code for this instance.
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.Constants.MimeType.Equals(System.Object)">
            <summary>
            Compares this instance to another <see cref="T:Lesnikowski.Mail.Headers.Constants.MimeType"/> instance.
            </summary>
            <param name="obj">Second instance to compare.</param>
            <returns>True if instances are equal, false otherwise.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.Constants.MimeType.op_Equality(Lesnikowski.Mail.Headers.Constants.MimeType,Lesnikowski.Mail.Headers.Constants.MimeType)">
            <summary>
            Compares two <see cref="T:Lesnikowski.Mail.Headers.Constants.MimeType"/> instances.
            </summary>
            <param name="a">First instance to compare.</param>
            <param name="b">Second instance to compare.</param>
            <returns>True if instances are equal, false otherwise.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.Constants.MimeType.op_Inequality(Lesnikowski.Mail.Headers.Constants.MimeType,Lesnikowski.Mail.Headers.Constants.MimeType)">
            <summary>
            Compares two <see cref="T:Lesnikowski.Mail.Headers.Constants.MimeType"/> instances.
            </summary>
            <param name="a">First instance to compare.</param>
            <param name="b">Second instance to compare.</param>
            <returns>False if instances are equal, true otherwise.</returns>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.OptionsHeader">
            <summary>
            </summary>
            <remarks>
            e.g.:
            'content-type: text/plain;  charset="iso-8859-2"; (comment) a=b'
            <list type="table">
            	<listheader>
            		<term>Key:</term>
            		<description>Value:</description>
            	</listheader>
            	<item>
            		<term>content-type</term>
            		<description>text/plain</description>
            	</item>
            	<item>
            		<term>charset</term>
            		<description>iso-8859-2</description>
            	</item>
            	<item>
            		<term>a</term>
            		<description>b</description>
            	</item>
            </list>
            </remarks>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.OptionsHeader.ParseHeaderValue(System.String)">
            <summary>
            Parses specified header value, extracts all key/value options.
            </summary>
            <param name="headerValue">value of the header.</param>
        </member>
        <member name="T:Lesnikowski.Client.ServerCertificateValidateEventArgs">
            <summary>
            Arguments for <see cref="T:Lesnikowski.Client.ServerCertificateValidateEventHandler"/> and <see cref="E:Lesnikowski.Client.TcpTextClient.ServerCertificateValidate"/> event.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.ServerCertificateValidateEventArgs.Certificate">
            <summary>
            The certificate used to authenticate the remote party.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.ServerCertificateValidateEventArgs.Chain">
            <summary>
            The _chain of certificate authorities associated with the remote certificate.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.ServerCertificateValidateEventArgs.SslPolicyErrors">
            <summary>
            One or more errors associated with the remote certificate.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.ServerCertificateValidateEventArgs.IsValid">
            <summary>
            Set this field to indicate validness of server's certificate.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.HeaderEncoder">
            <summary>
            Implements 'Base64' and 'Quoted-Printable' header string encoding (RFC 2047),
            removes comments and replacing escape sequences.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.HeaderEncoder.Decode(System.String)">
            <summary>
            Decodes Base64 and Quoted-Printable strings (RFC 2047).
            </summary>
            <param name="s">"Tom and =?iso-8859-2?Q?Pawe=B3_Le=B6nikowski?= are..."</param>
            <returns>"Tom and Paweł Leśnikowski are..."</returns>
            <exception cref="T:Lesnikowski.Mail.MailException">
            The charset is not supported by the current regional options of the computer executing this method.
            </exception>
        </member>
        <member name="M:Lesnikowski.Mail.Headers.HeaderEncoder.Encode(System.String,System.Text.Encoding)">
            <summary>
            Encodes header values. Uses 'Quoted-Printable' or 'Base64', whichever is best.
            </summary>
            <param name="text">Header value to encode.</param>
            <param name="encoding">Character encoding used.</param>
            <returns>Encoded header.</returns>
        </member>
        <member name="T:Lesnikowski.Mail.MailException">
            <summary>
            Represents an error that occured during e-mail parsing.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.MimeDocument">
            <summary>
            Represents MIME document tree.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.MimeDocument.AddListener(Lesnikowski.Mail.Headers.IHeader)">
            <summary>
            Adds new header listener.
            </summary>
            <param name="listener">Header listener. This object will be notified when header changes.</param>
        </member>
        <member name="M:Lesnikowski.Mail.MimeDocument.#ctor(Lesnikowski.Mail.MimeBase)">
            <summary>
            Creates new MimeDocument object.
            </summary>
            <param name="root">Root MIME object for newly created document.</param>
        </member>
        <member name="M:Lesnikowski.Mail.MimeDocument.Render(System.Text.StringBuilder)">
            <summary>
            Renders the document.
            </summary>
            <param name="writer"><see cref="T:System.Text.StringBuilder"/> to render on.</param>
        </member>
        <member name="P:Lesnikowski.Mail.MimeDocument.Root">
            <summary>
            Reference to the top most MIME object in this document.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MimeDocument.MimeVersion">
            <summary>
            'Mime-version' field, mime version.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MimeDocument.DKIMSignatureInfo">
            <summary>
            Gets DKIM signature information.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.Pop3">
            <summary>
            POP3 client implementation. 
            It allows listing, downloading and deleting emails from POP3 servers.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.#ctor">
            <summary>
            Initializes new instance of the Pop3 class.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.#ctor(System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes new instance of the Pop3 class.
            </summary>
        </member>
        <member name="F:Lesnikowski.Client.Pop3._timeStamp">
            <summary>
            A POP3 server which implements the APOP command will include a timestamp in its banner greeting.
            The syntax of the timestamp corresponds to the Message-ID ("&lt;12214.123@ad12&gt;")
            Filled by Connect method.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.GetServerGreeting">
            <summary>
            Receives server's greeting.
            Gets the timestamp.
            </summary>
            <exception cref="T:Lesnikowski.Client.ServerException">
            -ERR response.
             </exception>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.Connect(System.String)">
            <summary>
            Connects to POP3 server on port 110. Use <see cref="M:Lesnikowski.Client.Pop3.ConnectSSL(System.String)"/> when SSL connection is needed.
            </summary>
            <param name="host">Host name or IP address.</param>    
            <exception cref="T:Lesnikowski.Client.ServerException">
            Error response,
            DNS resolving error,
            Connecting error.
             </exception>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.ConnectSSL(System.String)">
            <summary>
            Connects to POP3 server using SSL on port 995.
            </summary>
            <param name="host">Host name or IP address.</param>
            <seealso cref="M:Lesnikowski.Client.TcpTextClient.Connect(System.String,System.Int32,System.Boolean)"/>
            <exception cref="T:Lesnikowski.Client.ServerException">
            Error response,
            DNS resolving error,
            Connecting error.
             </exception>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.STLS">
            <summary>
            Sends 'STLS' command and initializes SSL connection.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.SendCommand(System.String,System.Boolean)">
            <summary>
            Sends command which expects to receive single-line response e.g. "STAT".
            </summary>
            <exception cref="T:Lesnikowski.Client.ServerException">
            Throws <see cref="T:Lesnikowski.Client.ServerException"/> on -ERR response (if '<paramref name="throwException"/>' is set to <c>true</c>).
            </exception>
            <remarks>
            Some commands have their own specialized methods in this class, 
            you should probably use them instead.
            </remarks>
            <param name="command">Command e.g. "STAT".</param>
            <param name="throwException">If <c>true</c> throws <see cref="T:Lesnikowski.Client.ServerException"/> on -ERR response</param>
            <returns>Single-line response object.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.SendCommand(System.String)">
            <summary>
            Sends command which expects to receive single-line response e.g. "STAT".
            </summary>
            <exception cref="T:Lesnikowski.Client.ServerException">
            -ERR response.
            </exception>
            <remarks>
            Most commands have their own specialized methods in this class, 
            you should probably use them instead.
            This is equivalent to calling 'SendCommand(command, <c>true</c>);'.
            </remarks>
            <param name="command">Command e.g. "STAT".</param>
            <returns>Single-line response object.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.SendMultiLineCommand(System.String,System.Boolean)">
            <summary>
            Sends command which expects to receive multi-line response e.g. "RETR".
            </summary>
            <exception cref="T:Lesnikowski.Client.ServerException">
            Throws <see cref="T:Lesnikowski.Client.ServerException"/> on -ERR response (if '<paramref name="throwException"/>' is set to <c>true</c>).
            </exception>
            <remarks>
            Most commands have their own specialized methods in this class, you should probably use them instead.
            </remarks>
            <param name="command">Command to send e.g. "RETR".</param>
            <param name="throwException">If <c>true</c> throws <see cref="T:Lesnikowski.Client.ServerException"/> on -ERR response</param>
            <returns>Multi-line response object.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.SendMultiLineCommand(System.String)">
            <summary>
            Sends command which expects to receive multi-line response e.g. "RETR".
            </summary>
            <exception cref="T:Lesnikowski.Client.ServerException">
            -ERR response.
            </exception>
            <remarks>
            Some commands have their own specialized methods in this class, 
            you should probably use them instead.
            This is equal to 'SendMultiLineCommand(command, <c>true</c>);'.
            </remarks>
            <param name="command">Command to send e.g. "RETR".</param>
            <returns>Multi-line response object.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.UseBestLogin(System.String,System.String)">
            <summary>
            Logs user in using best available method. 
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <seealso cref="M:Lesnikowski.Client.Pop3.Login(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.Pop3.LoginAPOP(System.String,System.String)"/>
            <exception cref="T:Lesnikowski.Client.ServerException">Throws <see cref="T:Lesnikowski.Client.ServerException"/> on negative response.</exception>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.Login">
            <summary>
            Logs user in using USER and PASS commands. 
            Uses <see cref="P:Lesnikowski.Client.TcpTextClient.User"/> and <see cref="P:Lesnikowski.Client.TcpTextClient.Password"/> properties.
            This method sends the password in clear text, unless SSL connection is used.
            </summary>
            <seealso cref="M:Lesnikowski.Client.Pop3.LoginAPOP(System.String,System.String)"/>
            <exception cref="T:Lesnikowski.Client.ServerException">
            Throws <see cref="T:Lesnikowski.Client.ServerException"/> on -ERR response.
            </exception>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.Login(System.String,System.String)">
            <summary>
            Logs user in using USER and PASS commands. This method sends the password in clear text, unless SSL connection is used.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <seealso cref="M:Lesnikowski.Client.Pop3.LoginAPOP(System.String,System.String)"/>
            <exception cref="T:Lesnikowski.Client.ServerException">
            Throws <see cref="T:Lesnikowski.Client.ServerException"/> on -ERR response.
            </exception>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.LoginPLAIN(System.String,System.String)">
            <summary>
            Logs user in using AUTHENTICATE PLAIN command. This method sends the password in clear text (BASE64), unless SSL connection is used.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <seealso cref="M:Lesnikowski.Client.Pop3.ConnectSSL(System.String)"/> <seealso cref="M:Lesnikowski.Client.Pop3.Login(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.Pop3.LoginPLAIN(System.String,System.String,System.String)"/> 
            <seealso cref="M:Lesnikowski.Client.Pop3.LoginCRAM(System.String,System.String)"/>  <seealso cref="M:Lesnikowski.Client.Pop3.LoginAPOP(System.String,System.String)"/>
            <exception cref="T:Lesnikowski.Client.ServerException">Throws <see cref="T:Lesnikowski.Client.ServerException"/> on negative response.</exception>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.LoginPLAIN(System.String,System.String,System.String)">
            <summary>
            Logs user in using AUTH PLAIN command. This method sends the password in clear text (BASE64), unless SSL connection is used.
            </summary>
            <param name="user">User's login.</param>
            <param name="adminUser">Administrator's user.</param>
            <param name="adminPassword">Administrator's password.</param>
            <seealso cref="M:Lesnikowski.Client.Pop3.ConnectSSL(System.String)"/> <seealso cref="M:Lesnikowski.Client.Pop3.Login(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.Pop3.LoginPLAIN(System.String,System.String)"/> 
            <seealso cref="M:Lesnikowski.Client.Pop3.LoginCRAM(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.Pop3.LoginAPOP(System.String,System.String)"/>
            <exception cref="T:Lesnikowski.Client.ServerException">Throws <see cref="T:Lesnikowski.Client.ServerException"/> on negative response.</exception>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.LoginCRAM(System.String,System.String)">
            <summary>
            Logs user in using AUTH CRAM-MD5 command. This method does NOT send the password in clear text.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <remarks>
            This command is unnecessary if you are using SSL, use <see cref="M:Lesnikowski.Client.Pop3.Login(System.String,System.String)"/> method instead.
            </remarks>
            <seealso cref="M:Lesnikowski.Client.Pop3.ConnectSSL(System.String)"/> <seealso cref="M:Lesnikowski.Client.Pop3.Login(System.String,System.String)"/> 
            <seealso cref="M:Lesnikowski.Client.Pop3.LoginPLAIN(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.Pop3.LoginPLAIN(System.String,System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.Pop3.LoginAPOP(System.String,System.String)"/>
            <exception cref="T:Lesnikowski.Client.ServerException">Throws <see cref="T:Lesnikowski.Client.ServerException"/> on negative response.</exception>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.LoginDIGEST(System.String,System.String)">
            <summary>
            Logs user in using AUTH DIGEST-MD5 command. This method does NOT send the password in clear text.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <remarks>
            This command is unnecessary if you are using SSL, use <see cref="M:Lesnikowski.Client.Pop3.Login(System.String,System.String)"/> method instead.
            </remarks>
            <seealso cref="M:Lesnikowski.Client.Pop3.ConnectSSL(System.String)"/> <seealso cref="M:Lesnikowski.Client.Pop3.Login(System.String,System.String)"/> 
            <seealso cref="M:Lesnikowski.Client.Pop3.LoginPLAIN(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.Pop3.LoginPLAIN(System.String,System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.Pop3.LoginCRAM(System.String,System.String)"/>"/&gt;
            <exception cref="T:Lesnikowski.Client.ServerException">Throws <see cref="T:Lesnikowski.Client.ServerException"/> on negative response.</exception>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.LoginAPOP(System.String,System.String)">
            <summary>
            Logs user in using APOP command. This method does NOT send the password in clear text.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <remarks>
            APOP is optional command and a POP3 server does NOT need to support it.
            A POP3 server which implements the APOP command will include a timestamp in its banner greeting. 
            Check <see cref="P:Lesnikowski.Client.Pop3.HasTimeStamp"/> property in order to know if server included the timestamp.
            Some servers include timestamp, but do NOT support APOP command.
            This command is unnecessary if you are using SSL, use <see cref="M:Lesnikowski.Client.Pop3.Login(System.String,System.String)"/> method instead.
            </remarks>
            <seealso cref="M:Lesnikowski.Client.Pop3.ConnectSSL(System.String)"/>
            <seealso cref="M:Lesnikowski.Client.Pop3.Login(System.String,System.String)"/>
            <seealso cref="P:Lesnikowski.Client.Pop3.HasTimeStamp"/>
            <exception cref="T:Lesnikowski.Client.ServerException">
            Throws <see cref="T:Lesnikowski.Client.ServerException"/> on -ERR response.
            Throws <see cref="T:Lesnikowski.Client.ServerException"/> when there is no timestamp 
            (<see cref="P:Lesnikowski.Client.Pop3.HasTimeStamp"/>==<c>false</c>).
            </exception>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.GetAccountStat">
            <summary>
            Gets stat information from server.
            Fills <see cref="P:Lesnikowski.Client.Pop3.MessageCount"/> and <see cref="P:Lesnikowski.Client.Pop3.MailboxSize"/> property.
            </summary>
            <exception cref="T:Lesnikowski.Client.ServerException">
            Throws <see cref="T:Lesnikowski.Client.ServerException"/> on -ERR response.
            </exception>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.DeleteMessage(System.Int64)">
            <summary>
            Marks specified message for deletion.
            The POP3 server does not actually delete the message until successful QUIT command issued by <see cref="M:Lesnikowski.Client.TcpTextClient.Close"/> or <see cref="M:Lesnikowski.Client.TcpTextClient.Close(System.Boolean)"/>.
            </summary>
            <exception cref="T:Lesnikowski.Client.ServerException">
            -ERR response.
            </exception>
            <param name="messageNumber">Number of the message to delete (starts from 1)</param>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.GetHeaders(System.Int64)">
            <summary>
            Gets specified mail message containing only headers. Use <see cref="T:Lesnikowski.Mail.MailBuilder"/> to create <see cref="T:Lesnikowski.Mail.IMail"/> object.
            </summary>
            <exception cref="T:Lesnikowski.Client.ServerException">
            -ERR response or corrupted response.
            </exception>
            <param name="messageNumber">Number of message to get (starts from 1)</param>
            <returns>String containing mail message which contains only headers.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.GetMessageHeader(System.Int64)">
            <summary>
            Gets specified mail message containing only headers. Use <see cref="T:Lesnikowski.Mail.MailBuilder"/> to create <see cref="T:Lesnikowski.Mail.IMail"/> object.
            </summary>
            <exception cref="T:Lesnikowski.Client.ServerException">
            -ERR response or corrupted response.
            </exception>
            <param name="messageNumber">Number of message to get (starts from 1)</param>
            <returns>String containing mail message which contains only headers.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.GetMessage(System.Int64)">
            <summary>
            Gets specified mail message form server. Use <see cref="T:Lesnikowski.Mail.MailBuilder"/> to create <see cref="T:Lesnikowski.Mail.IMail"/> object.
            </summary>
            <exception cref="T:Lesnikowski.Client.ServerException">
            -ERR response or corrupted response.
            </exception>
            <param name="messageNumber">Number of the message to get (starts from 1).</param>
            <returns>String containing mail message</returns>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.ListUniqueID">
            <summary>
            Sends UIDL command to the pop3 server.
            Returns a key value collection. Keys are message numbers (starting from 1)
            value is a unique-id of the message.
            </summary>
            <seealso cref="M:Lesnikowski.Client.Pop3.GetAll"/>
            <returns>Key value collection, with message number as key and unique-id as a value</returns>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.GetAll">
            <summary>
            Gets UIDS of all messages.
            </summary>
            <seealso cref="M:Lesnikowski.Client.Pop3.GetMessageByUID(System.String)"/>
            <seealso cref="M:Lesnikowski.Client.Pop3.GetHeadersByUID(System.String)"/>
            <returns>UID list.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.GetHeadersByUID(System.String)">
            <summary>
            Gets headers of the specified mail message form server. Use <see cref="T:Lesnikowski.Mail.MailBuilder"/> to create <see cref="T:Lesnikowski.Mail.IMail"/> object.
            </summary>
            <param name="uid">Unique-id of the message to get.</param>
            <returns>String containing mail message headers.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.GetMessageHeaderByUID(System.String)">
            <summary>
            Gets headers of the specified mail message form server. Use <see cref="T:Lesnikowski.Mail.MailBuilder"/> to create <see cref="T:Lesnikowski.Mail.IMail"/> object.
            </summary>
            <param name="uid">Unique-id of the message to get.</param>
            <returns>String containing mail message headers.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.GetMessageByUID(System.String)">
            <summary>
            Gets specified mail message form server. Use <see cref="T:Lesnikowski.Mail.MailBuilder"/> to create <see cref="T:Lesnikowski.Mail.IMail"/> object.
            </summary>
            <param name="uid">Unique-id of the message to get.</param>
            <returns>String containing mail message.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.DeleteMessageByUID(System.String)">
            <summary>
            Deletes message specified by the <paramref name="uid"/>.
            </summary>
            <param name="uid">Unique-id of the message to flag.</param>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.ListUniqueID(System.Int64)">
            <summary>
            Sends UIDL command to the pop3 server.
            Returns line with the unique-id for that message.
            </summary>
            <param name="messageNumber">Message number</param>
            <returns>Line unique-id for that message</returns>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.ListSize">
            <summary>
            Returns the size (in bytes) of all messages.
            Keys are message numbers (starting from 1),  value is size of the message.
            </summary>
            <returns>Key value collection, with message number as key and size as a value</returns>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.ListSizeByUID">
            <summary>
            Returns the size (in bytes) of all messages.
            Keys are message uids, value is size of the message.
            </summary>
            <returns>Key value collection, with message UID as key and size as a value</returns>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.ListSizeByUID(System.String)">
            <summary>
            Returns the size (in bytes) of specified message in bytes.
            </summary>
            <param name="uid">Unique-id of the message to get.</param>
            <returns>Size of the message</returns>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.ListSize(System.Int64)">
            <summary>
            Returns the size (in bytes) of specified message in bytes.
            </summary>
            <param name="messageNumber">Number of message to get (starts from 1)</param>
            <returns>Size of the message</returns>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.CloseCommand">
            <summary>
            Sends the QUIT command.
            </summary>
            <exception cref="T:Lesnikowski.Client.ServerException">
            -ERR response on Quit command 
            </exception>
        </member>
        <member name="M:Lesnikowski.Client.Pop3.Capability">
            <summary>
            Sends CAPA command.
            </summary>
            <returns>Server's capability list.</returns>
        </member>
        <member name="P:Lesnikowski.Client.Pop3.HasTimeStamp">
            <summary>
            True if there was a timestamp in server's greeting
            (usually it means that APOP command is supported, but not always).
            Filled by Connect method.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.Pop3.MessageCount">
            <summary>
            Number of messages on server.
            Filled by <see cref="M:Lesnikowski.Client.Pop3.GetAccountStat"/>.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.Pop3.MailboxSize">
            <summary>
            Size of the mail massages on server in octets.
            Filled by <see cref="M:Lesnikowski.Client.Pop3.GetAccountStat"/>.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.Pop3MultiLineResponse">
            <summary>
            Implements POP3 server multi-line response.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.Pop3MultiLineResponse.GetLineList">
            <summary>
            Returns <see cref="P:Lesnikowski.Client.Pop3MultiLineResponse.MultiLineMessage"/> as a line collection.
            </summary>
            <returns><see cref="P:Lesnikowski.Client.Pop3MultiLineResponse.MultiLineMessage"/> as a line collection.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Pop3MultiLineResponse.ToString">
            <summary>
            Returns the <see cref="P:Lesnikowski.Client.Pop3MultiLineResponse.Message"/> property.
            </summary>
            <returns><see cref="P:Lesnikowski.Client.Pop3MultiLineResponse.Message"/> property.</returns>
        </member>
        <member name="P:Lesnikowski.Client.Pop3MultiLineResponse.Status">
            <summary>
            Gets the <see cref="T:Lesnikowski.Client.Pop3ResponseStatus"/> of this response.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.Pop3MultiLineResponse.Message">
            <summary>
            Gets the response message without "-ERR", or "+OK" strings.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.Pop3MultiLineResponse.MultiLineMessage">
            <summary>
            String that holds the response message (without "-ERR", or "+OK" strings).
            The first line can be obtained through <see cref="P:Lesnikowski.Client.Pop3MultiLineResponse.Message"/> property.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.Pop3Response">
            <summary>
            Represents single-line response from POP3 server.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.Pop3Response.ToString">
            <summary>
            Returns the <see cref="P:Lesnikowski.Client.Pop3Response.Message"/> property.
            </summary>
            <returns><see cref="P:Lesnikowski.Client.Pop3Response.Message"/> property.</returns>
        </member>
        <member name="P:Lesnikowski.Client.Pop3Response.Status">
            <summary>
            Gets the <see cref="T:Lesnikowski.Client.Pop3ResponseStatus"/> of this response.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.Pop3Response.Message">
            <summary>
            Gets the response message without "-ERR", or "+OK" strings.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.Headers.Constants.MimePriority">
            <summary>
            Priority of email message.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimePriority.Urgent">
            <summary>
            Urgent prioriy.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimePriority.Normal">
            <summary>
            Normal prioriy.
            </summary>
        </member>
        <member name="F:Lesnikowski.Mail.Headers.Constants.MimePriority.NonUrgent">
            <summary>
            Non urgent prioriy.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.MimeSigned">
            <summary>
            Represents 'Multipart/Signed' MIME entity.
            You can sign email messages using <see cref="M:Lesnikowski.Mail.MailBuilder.SignWith(System.Security.Cryptography.X509Certificates.X509Certificate2)"/> or <see cref="M:Lesnikowski.Mail.Fluent.IFluentMail.SignWith(System.Security.Cryptography.X509Certificates.X509Certificate2)"/>
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.MimeSigned.SignWith(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Sets the certificate used for signing.
            </summary>
            <param name="certificate">certificate used for signing.</param>
        </member>
        <member name="M:Lesnikowski.Mail.MimeSigned.CheckSignature(System.Boolean)">
            <summary>
            Verifies the digital signatures on the signed CMS/PKCS #7 message and, optionally, validates the signers' certificates.
            </summary>
            <param name="verifySignatureOnly">
            <paramref name="verifySignatureOnly"/>: A System.Boolean value that specifies whether only the digital signatures are verified 
            without the signers' certificates being validated. 
            If <paramref name="verifySignatureOnly"/> is <c>true</c>, only the digital signatures are verified. 
            If it is <c>false</c>, the digital signatures are verified, the signers' certificates are validated, 
            and the purposes of the certificates are validated. 
            The purposes of a certificate are considered valid if the certificate has no key usage or 
            if the key usage supports digital signatures or non-repudiation.
            </param>
        </member>
        <member name="M:Lesnikowski.Mail.MimeSigned.ReSignWith(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Computes the signature again.
            <param name="certificate">certificate used for signing.</param>
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.MailMessage.ReSignWith(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Computes the signature again.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.MailMessage.RequestReadReceipt">
            <summary>
            'Disposition-Notification-To'
            'Return-Receipt-To'
            'X-Confirm-Reading-To'
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailMessage.MessageID">
            <summary>
            'Message-ID'
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailMessage.InReplyTo">
            <summary>
            'In-Reply-To'
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailMessage.Sender">
            <summary>
            'Sender' field
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailMessage.ReplyTo">
            <summary>
            'Reply-to' field
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailMessage.NotificationTo">
            <summary>
            'Disposition-Notification-To' field.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailMessage.ReturnReceiptTo">
            <summary>
            'Return-Receipt-To' field.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailMessage.XConfirmReadingTo">
            <summary>
            'X-Confirm-Reading-To' field.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailMessage.Importance">
            <summary>
            'Importance' field
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailMessage.Priority">
            <summary>
            'Priority' field
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailMessage.XPriority">
            <summary>
            'X-Priority' field, "1" is the highest priority, "3" is normal, and "5" is the lowest priority.
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailMessage.Sensitivity">
            <summary>
            'Sensitivity' field
            </summary>
        </member>
        <member name="P:Lesnikowski.Mail.MailMessage.Received">
            <summary>
            List of all 'received' headers in this message.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.Smtp">
            <summary>
            SMTP client implementation.
            It allows sending emails using SMTP server.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.#ctor">
            <summary>
            Initializes new instance of the Smtp class.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.#ctor(System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes new instance of the Smtp class.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.GetServerGreeting">
            <summary>
            Receives server's greeting.
            </summary>
            <exception cref="T:Lesnikowski.Client.ServerException">
            </exception>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.Connect(System.String)">
            <summary>
            Connects to SMTP server on port 25. Use <see cref="M:Lesnikowski.Client.Smtp.ConnectSSL(System.String)"/> when SSL connection is needed.
            </summary>
            <param name="host">Host name or IP address.</param>
            <exception cref="T:Lesnikowski.Client.ServerException">
            Error response,
            DNS resolving error,
            Connecting error.
             </exception>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.ConnectSSL(System.String)">
            <summary>
            Connects to SMTP server using SSL on port 465.
            </summary>
            <param name="host">Host name or IP address.</param>
            <seealso cref="M:Lesnikowski.Client.TcpTextClient.Connect(System.String,System.Int32,System.Boolean)"/>
            <exception cref="T:Lesnikowski.Client.ServerException">
            Error response,
            DNS resolving error,
            Connecting error.
             </exception>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.StartTLS">
            <summary>
            Sends 'STARTTLS' command and initializes SSL connection.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.SendCommand(System.String,System.Boolean)">
            <summary>
            Sends command which expects to receive multi-line response e.g. "EHLO".
            </summary>
            <exception cref="T:Lesnikowski.Client.ServerException">
            Throws <see cref="T:Lesnikowski.Client.ServerException"/> on error response (if '<paramref name="throwException"/>' is set to <c>true</c>).
            </exception>
            <remarks>
            Most commands have their own specialized methods in this class, you should probably use them instead.
            </remarks>
            <param name="command">Command to send e.g. "EHLO".</param>
            <param name="throwException">If <c>true</c> throws <see cref="T:Lesnikowski.Client.ServerException"/> on error response</param>
            <returns>Multi-line response object.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.SendCommand(System.String)">
            <summary>
            Sends command which expects to receive multi-line response e.g. "EHLO".
            </summary>
            <exception cref="T:Lesnikowski.Client.ServerException">
            Throws <see cref="T:Lesnikowski.Client.ServerException"/> on error response.
            </exception>
            <remarks>
            Most commands have their own specialized methods in this class, you should probably use them instead.
            This is equal to 'SendMultiLineCommand(command,<c>true</c>);'.
            </remarks>
            <param name="command">Command to send e.g. "EHLO".</param>
            <returns>Multi-line response object.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.Ehlo">
            <summary>
            Says hello to the server. Uses local IP address as domain name.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.Helo(System.String)">
            <summary>
            Sends HELO to the server.
            </summary>
            <param name="domain">May be <c>null</c>, but rejected by some servers.</param>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.Ehlo(System.String)">
            <summary>
            Sends EHLO (Extended HELO) to the server.
            </summary>
            <param name="domain">May be <c>null</c>, but rejected by some servers.</param>
            <returns>Server's response.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.Ehlo(Lesnikowski.Client.HeloType,System.String)">
            <summary>
            Says hello to the server.
            </summary>
            <exception cref="T:Lesnikowski.Client.ServerException">On error response</exception>
            <param name="heloType">Hello type (EHLO, HELO, Try both)</param>
            <param name="domain">Fully qualified domain name or client's IP address in brackets.</param>
            <returns>Server's response.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.UseBestLogin(System.String,System.String)">
            <summary>
            Logs user in using best available method. 
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <seealso cref="M:Lesnikowski.Client.Smtp.Login(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.Smtp.LoginPLAIN(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.Smtp.LoginPLAIN(System.String,System.String,System.String)"/> 
            <seealso cref="M:Lesnikowski.Client.Smtp.LoginCRAM(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.Smtp.LoginOAUTH(System.String)"/>
            <exception cref="T:Lesnikowski.Client.ServerException">Throws <see cref="T:Lesnikowski.Client.ServerException"/> on negative response.</exception>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.Login">
            <summary>
            Logs user in using AUTH LOGIN command. 
            Uses <see cref="P:Lesnikowski.Client.TcpTextClient.User"/> and <see cref="P:Lesnikowski.Client.TcpTextClient.Password"/> properties.
             This method sends the password in clear text (BASE64), unless SSL connection is used.
            </summary>
            <seealso cref="M:Lesnikowski.Client.Smtp.LoginCRAM(System.String,System.String)"/>
            <exception cref="T:Lesnikowski.Client.ServerException">Throws <see cref="T:Lesnikowski.Client.ServerException"/> on negative response.</exception>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.Login(System.String,System.String)">
            <summary>
            Logs user in using AUTH LOGIN command. This method sends the password in clear text (BASE64), unless SSL connection is used.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <seealso cref="M:Lesnikowski.Client.Smtp.LoginCRAM(System.String,System.String)"/>
            <exception cref="T:Lesnikowski.Client.ServerException">Throws <see cref="T:Lesnikowski.Client.ServerException"/> on negative response.</exception>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.LoginPLAIN(System.String,System.String)">
            <summary>
            Logs user in using AUTH PLAIN command. This method sends the password in clear text (BASE64), unless SSL connection is used.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <seealso cref="M:Lesnikowski.Client.Smtp.ConnectSSL(System.String)"/> <seealso cref="M:Lesnikowski.Client.Smtp.Login(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.Smtp.LoginPLAIN(System.String,System.String)"/> 
            <exception cref="T:Lesnikowski.Client.ServerException">Throws <see cref="T:Lesnikowski.Client.ServerException"/> on negative response.</exception>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.LoginPLAIN(System.String,System.String,System.String)">
            <summary>
            Logs user in using AUTH PLAIN command. This method sends the password in clear text (BASE64), unless SSL connection is used.
            </summary>
            <param name="user">User's login.</param>
            <param name="adminUser">Administrator's user.</param>
            <param name="adminPassword">Administrator's password.</param>
            <seealso cref="M:Lesnikowski.Client.Smtp.ConnectSSL(System.String)"/> <seealso cref="M:Lesnikowski.Client.Smtp.Login(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.Smtp.LoginPLAIN(System.String,System.String)"/> 
            <seealso cref="M:Lesnikowski.Client.Smtp.LoginCRAM(System.String,System.String)"/> <seealso cref="M:Lesnikowski.Client.Smtp.LoginOAUTH(System.String)"/>
            <exception cref="T:Lesnikowski.Client.ServerException">Throws <see cref="T:Lesnikowski.Client.ServerException"/> on negative response.</exception>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.LoginCRAM(System.String,System.String)">
            <summary>
            Logs user in using AUTH CRAM-MD5 command. This method does NOT send the password in clear text.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <remarks>
            This command is unnecessary if you are using SSL, use <see cref="M:Lesnikowski.Client.Smtp.Login(System.String,System.String)"/> method instead.
            </remarks>
            <seealso cref="M:Lesnikowski.Client.Smtp.ConnectSSL(System.String)"/>
            <seealso cref="M:Lesnikowski.Client.Smtp.Login(System.String,System.String)"/>
            <exception cref="T:Lesnikowski.Client.ServerException">Throws <see cref="T:Lesnikowski.Client.ServerException"/> on negative response.</exception>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.LoginDIGEST(System.String,System.String)">
            <summary>
            Logs user in using AUTH DIGEST-MD5 command. This method does NOT send the password in clear text.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <remarks>
            This command is unnecessary if you are using SSL, use <see cref="M:Lesnikowski.Client.Smtp.Login(System.String,System.String)"/> method instead.
            </remarks>
            <seealso cref="M:Lesnikowski.Client.Smtp.ConnectSSL(System.String)"/>
            <seealso cref="M:Lesnikowski.Client.Smtp.Login(System.String,System.String)"/>
            <exception cref="T:Lesnikowski.Client.ServerException">Throws <see cref="T:Lesnikowski.Client.ServerException"/> on negative response.</exception>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.LoginOAUTH(System.String)">
            <summary>
            Logs user in using AUTH XOAUTH command. This method does NOT send the password.
            You can use <see cref="T:Lesnikowski.Client.Authentication.OAuth"/> class to create the key.
            </summary>
            <param name="key">XOAuth key. You can use <see cref="M:Lesnikowski.Client.Authentication.ISignedOAuth.GetXOAuthKey"/> method to create this key.</param>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.MailFrom(System.String)">
            <summary>
            Sends "MAIL FROM:" command.
            </summary>
            <param name="from">From address.</param>
            <exception cref="T:Lesnikowski.Client.ServerException">
            Throws <see cref="T:Lesnikowski.Client.ServerException"/> on error response.
            </exception>
            <returns>Response from server.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.RcptTo(System.String)">
            <summary>
            Sends "RCPT TO:" command.
            </summary>
            <param name="to">To address.</param>
            <exception cref="T:Lesnikowski.Client.ServerException">
            Throws <see cref="T:Lesnikowski.Client.ServerException"/> on error response.
            </exception>
            <returns>Response from server.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.Data">
            <summary>
            Sends "DATA" command.
            </summary>
            <exception cref="T:Lesnikowski.Client.ServerException">
            Throws <see cref="T:Lesnikowski.Client.ServerException"/> on error response.
            </exception>
            <returns>Response from server.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.MailFrom(System.String,System.Boolean)">
            <summary>
            Sends "MAIL FROM:" command.
            </summary>
            <param name="from">From address.</param>
            <exception cref="T:Lesnikowski.Client.ServerException">
            Throws <see cref="T:Lesnikowski.Client.ServerException"/> on error response (if '<paramref name="throwException"/>' is set to <c>true</c>).
            </exception>
            <param name="throwException">If <c>true</c> throws <see cref="T:Lesnikowski.Client.ServerException"/> on error response</param>
            <returns>Response from server.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.RcptTo(System.String,System.Boolean)">
            <summary>
            Sends "RCPT TO:" command.
            </summary>
            <param name="to">To address.</param>
            <exception cref="T:Lesnikowski.Client.ServerException">
            Throws <see cref="T:Lesnikowski.Client.ServerException"/> on error response (if '<paramref name="throwException"/>' is set to <c>true</c>).
            </exception>
            <returns>Response from server.</returns>
            <param name="throwException">If <c>true</c> throws <see cref="T:Lesnikowski.Client.ServerException"/> on error response</param>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.Data(System.Boolean)">
            <summary>
            Sends "DATA" command.
            </summary>
            <exception cref="T:Lesnikowski.Client.ServerException">
            Throws <see cref="T:Lesnikowski.Client.ServerException"/> on error response (if '<paramref name="throwException"/>' is set to <c>true</c>).
            </exception>
            <returns>Response from server.</returns>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.SendMessage(Lesnikowski.Mail.IMail)">
            <summary>
            Sends single message.
            </summary>
            <param name="mail"><see cref="T:Lesnikowski.Mail.IMail"/> message to send.</param>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.SendMessage(Lesnikowski.Client.ISmtpMail)">
            <summary>
            Sends single message.
            </summary>
            <exception cref="T:Lesnikowski.Client.ServerException">
            Throws <see cref="T:Lesnikowski.Client.ServerException"/> on error response.
             </exception>
            <param name="mail"><see cref="T:Lesnikowski.Client.ISmtpMail"/> message to send.</param>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.SendMessage(Lesnikowski.Mail.IMail,System.Boolean)">
            <summary>
            Sends single message.
            </summary>
            <exception cref="T:Lesnikowski.Client.ServerException">
            Throws <see cref="T:Lesnikowski.Client.ServerException"/> on error response (if '<paramref name="throwException"/>' is set to <c>true</c>).
            </exception>
            <param name="mail"><see cref="T:Lesnikowski.Mail.IMail"/> message to send.</param>
            <param name="throwException">If <c>true</c> throws <see cref="T:Lesnikowski.Client.ServerException"/> on error response</param>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.SendMessage(Lesnikowski.Client.ISmtpMail,System.Boolean)">
            <summary>
            Sends single message.
            </summary>
            <exception cref="T:Lesnikowski.Client.ServerException">
            Throws <see cref="T:Lesnikowski.Client.ServerException"/> on error response (if '<paramref name="throwException"/>' is set to <c>true</c>).
            </exception>
            <param name="mail"><see cref="T:Lesnikowski.Client.ISmtpMail"/> message to send.</param>
            <param name="throwException">If <c>true</c> throws <see cref="T:Lesnikowski.Client.ServerException"/> on error response</param>
        </member>
        <member name="M:Lesnikowski.Client.Smtp.CloseCommand">
            <summary>
            Sends the Quit command. And gets server response.
            </summary>
            <exception cref="T:Lesnikowski.Client.ServerException">
            Throws <see cref="T:Lesnikowski.Client.ServerException"/> on error response on Quit command 
            </exception>
        </member>
        <member name="T:Lesnikowski.Client.SmtpMail">
            <summary>
            Represents sender, recipient and raw message data sent via SMTP protocol.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.SmtpMail.RenderEml">
            <summary>
            Returns message data that can be sent using SMTP protocol.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.SmtpMail.#ctor">
            <summary>
            Creates new empty SmtpMail object.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.SmtpMail.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates new SmtpMail object.
            </summary>
            <param name="from">From mail address.</param>
            <param name="data">Message data to be send.</param>
            <param name="to">Collection of mail addresses this message will be sent to.</param>
        </member>
        <member name="M:Lesnikowski.Client.SmtpMail.CreateFromEml(System.String)">
            <summary>
            Creates new <see cref="T:Lesnikowski.Client.SmtpMail"/> using specified eml raw data string.
            From and To fields are extracted from the raw data.
            </summary>
            <param name="eml">Raw eml data string.</param>
            <returns>New <see cref="T:Lesnikowski.Client.SmtpMail"/> object.</returns>
        </member>
        <member name="M:Lesnikowski.Client.SmtpMail.CreateFromEmlFile(System.String)">
            <summary>
            Loads raw eml data from file and creates new <see cref="T:Lesnikowski.Mail.IMail"/> object.
            From and To fields are extracted from the raw data.
            </summary>
            <param name="path">The file to read raw eml data from.</param>
            <returns>New <see cref="T:Lesnikowski.Client.SmtpMail"/> object.</returns>
        </member>
        <member name="P:Lesnikowski.Client.SmtpMail.From">
            <summary>
            Gets or sets from mail address.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.SmtpMail.To">
            <summary>
            Gets the collection of mail addresses this message will be sent to.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.SmtpMail.RawSmtpData">
            <summary>
            Gets or sets the raw message data that can be sent using SMTP protocol.
            </summary>
        </member>
        <member name="T:Lesnikowski.Client.SmtpResponse">
            <summary>
            Implements SMTP server response
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.SmtpResponse.Parse(System.Collections.Generic.List{System.String})">
            <summary>
            Removes Codes from beginning of every line.
            Fills <see cref="P:Lesnikowski.Client.SmtpResponse.Message"/> and <see cref="P:Lesnikowski.Client.SmtpResponse.Code"/> and <see cref="P:Lesnikowski.Client.SmtpResponse.Lines"/>.
            </summary>
        </member>
        <member name="M:Lesnikowski.Client.SmtpResponse.ToString">
            <summary>
            Returns the <see cref="P:Lesnikowski.Client.SmtpResponse.Message"/> property.
            </summary>
            <returns><see cref="P:Lesnikowski.Client.SmtpResponse.Message"/> property.</returns>
        </member>
        <member name="P:Lesnikowski.Client.SmtpResponse.Code">
            <summary>
            Gets the status code.
            2yz is positive completion reply; 
            3yz is positive intermediate reply; 
            Other is negative.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.SmtpResponse.Lines">
            <summary>
            Lines returned from server.
            Every line is striped off of Code and '-' char at the beginning
            and without '\r\n' at the end.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.SmtpResponse.IsPositive">
            <summary>
            Gets the status of <see cref="P:Lesnikowski.Client.SmtpResponse.Code"/>.
            True if <see cref="P:Lesnikowski.Client.SmtpResponse.Code"/> is between 200 and 399.
            </summary>
        </member>
        <member name="P:Lesnikowski.Client.SmtpResponse.Message">
            <summary>
            First line of the response.
            </summary>
        </member>
        <member name="T:Lesnikowski.Mail.SimpleMailMessageBuilder">
            <summary>
            Provides methods for <see cref="T:Lesnikowski.Mail.ISimpleMailMessage"/> object creation.
            You should use <see cref="M:Lesnikowski.Mail.MailBuilder.CreateFromEml(System.String)"/> if you already have an eml data downloaded using <see cref="T:Lesnikowski.Client.Pop3"/> client.
            You should use other properties and <see cref="M:Lesnikowski.Mail.MailBuilder.Create"/> method to create message that you'll send using <see cref="T:Lesnikowski.Client.Smtp"/> client.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.SimpleMailMessageBuilder.Create">
            <summary>
            Creates new <see cref="T:Lesnikowski.Mail.ISimpleMailMessage"/> using builder configuration.
            </summary>
            <returns>New <see cref="T:Lesnikowski.Mail.ISimpleMailMessage"/> object.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.SimpleMailMessageBuilder.CreateFromDocument(Lesnikowski.Mail.MimeDocument)">
            <summary>
            Creates new <see cref="T:Lesnikowski.Mail.ISimpleMailMessage"/> using specified MIME document.
            </summary>
            <returns>New <see cref="T:Lesnikowski.Mail.ISimpleMailMessage"/> object.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.SimpleMailMessageBuilder.CreateFromEml(System.String)">
            <summary>
            Creates new <see cref="T:Lesnikowski.Mail.ISimpleMailMessage"/> using specified eml raw data string.
            </summary>
            <returns>New <see cref="T:Lesnikowski.Mail.ISimpleMailMessage"/> object.</returns>
        </member>
        <member name="T:Lesnikowski.Mail.Templates.Template">
            <summary>
            Represents the template that can be used to create email messages.
            </summary>
            <remarks>
            <code>
            string text = Template
                .LoadFromFile("template.txt")
                .DataFrom(reportData)
                .Render();
            </code>
            Template sample:
            <pre>
            Hi [FirstName] [LastName],
            
            Order items:
            [foreach OrderItems]
                - [Id] [Name] [Price]
            [end]
            </pre>
            </remarks>
        </member>
        <member name="M:Lesnikowski.Mail.Templates.Template.Create(System.String)">
            <summary>
            Creates new template using specified template text.
            </summary>
            <param name="templateText">Template's text.</param>
            <returns>New template.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Templates.Template.FromFile(System.String)">
            <summary>
            Loads a template from file.
            </summary>
            <param name="filePath">The file to open.</param>
            <returns>Loaded template.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Templates.Template.DataFrom(System.Object)">
            <summary>
            Specifies object that will be used as a data source for this template.
            If the method is called more than once, only last object is used.
            </summary>
            <param name="data">Data source for this template.</param>
            <returns>Current template.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Templates.Template.PermanentDataFrom(System.Object)">
            <summary>
            Specifies object that will be used as a data source for this template.
            If the method is called more than once, all objects are used.
            </summary>
            <param name="data">Data source for this template.</param>
            <returns>Current template.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Templates.Template.Render">
            <summary>
            Renders the template.
            </summary>
            <returns>Rendered template.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Templates.Template.AddKey(System.String,System.String)">
            <summary>
            Adds a custom key used by this template.
            </summary>
            <param name="key">Key name.</param>
            <param name="value">Value to be used when template is rendered.</param>
            <returns>Current template.</returns>
        </member>
        <member name="P:Lesnikowski.Mail.Templates.Template.Item(System.String)">
            <summary>
            Gets or sets custom keys used by this template.
            </summary>
            <param name="key">Key name.</param>
            <returns>Value to be used when template is rendered.</returns>
        </member>
        <member name="T:Lesnikowski.Mail.Templates.TemplateException">
            <summary>
            Represents an error that occured during template parsing.
            </summary>
        </member>
        <member name="M:Lesnikowski.Mail.Templates.TemplateParser.MoveOneForward">
            <summary>
            Moves index one step forward, this method is aware of the escaped chars.
            </summary>
            <returns>False if end is reached, true if we can move forward again.</returns>
        </member>
        <member name="M:Lesnikowski.Mail.Tnef.RtfDecompressor.ReadHeader">
            <summary>
            Reads header and validates checksum.
            </summary>
        </member>
    </members>
</doc>
